{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    createEventAccessor = _require.createEventAccessor;\n\nvar events = new Set([// WindowEventHandlers\n\"afterprint\", \"beforeprint\", \"beforeunload\", \"hashchange\", \"languagechange\", \"message\", \"messageerror\", \"offline\", \"online\", \"pagehide\", \"pageshow\", \"popstate\", \"rejectionhandled\", \"storage\", \"unhandledrejection\", \"unload\", // inherited and overridden\n\"blur\", \"error\", \"focus\", \"load\", \"resize\", \"scroll\"]); // This class builds on GlobalEventHandlers, which must be mixed in first.\n\nvar WindowEventHandlersImpl =\n/*#__PURE__*/\nfunction () {\n  function WindowEventHandlersImpl() {\n    _classCallCheck(this, WindowEventHandlersImpl);\n  }\n\n  _createClass(WindowEventHandlersImpl, [{\n    key: \"_proxyWindowEventsToWindow\",\n    value: function _proxyWindowEventsToWindow() {\n      var _this = this;\n\n      // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)\n      this._getEventHandlerTarget = function (event) {\n        if (events.has(event)) {\n          return _this.ownerDocument.defaultView || null;\n        }\n\n        return _this;\n      };\n    }\n  }]);\n\n  return WindowEventHandlersImpl;\n}();\n\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n    var event = _step.value;\n    createEventAccessor(WindowEventHandlersImpl.prototype, event);\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return != null) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: WindowEventHandlersImpl\n};","map":null,"metadata":{},"sourceType":"script"}