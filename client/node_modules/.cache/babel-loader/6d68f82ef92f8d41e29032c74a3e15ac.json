{"ast":null,"code":"import _objectSpread from \"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_ARTICLE, EDIT_ARTICLE, UPDATE_ARTICLE, DELETE_ARTICLE, GET_ARTICLE, GET_ARTICLES, ARTICLE_LOADING } from \"../actions/types\";\nconst intialState = {\n  articles: [],\n  article: {},\n  loading: false\n};\nexport default function (state = intialState, action) {\n  switch (action.type) {\n    case ARTICLE_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case ADD_ARTICLE:\n      return _objectSpread({}, state, {\n        articles: [action.payload, ...state.articles]\n      });\n\n    case GET_ARTICLES:\n      return _objectSpread({}, state, {\n        articles: action.payload,\n        loading: false\n      });\n\n    case GET_ARTICLE:\n      return _objectSpread({}, state, {\n        article: action.payload,\n        loading: false\n      });\n\n    case EDIT_ARTICLE:\n      return _objectSpread({}, state, {\n        articles: state.articles.map(article => article._id !== action.payload)\n      });\n\n    case UPDATE_ARTICLE:\n      stateCopy = state.map(article => {\n        const _action$payload = action.payload,\n              id = _action$payload.id,\n              title = _action$payload.title,\n              image = _action$payload.image,\n              imgSource = _action$payload.imgSource,\n              text = _action$payload.text;\n\n        if (article.id === id) {\n          article.title = title;\n          article.image = image;\n          article.imgSource = imgSource;\n          article.text = text;\n        }\n\n        return article;\n      });\n      localStorage.setItem(\"articles\", JSON.stringify(stateCopy));\n      return stateCopy;\n\n    case DELETE_ARTICLE:\n      return _objectSpread({}, state, {\n        articles: state.articles.filter(article => article._id !== action.payload)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Lawrence/Desktop/mind-of-a-millennial/client/src/reducers/articleReducer.js"],"names":["ADD_ARTICLE","EDIT_ARTICLE","UPDATE_ARTICLE","DELETE_ARTICLE","GET_ARTICLE","GET_ARTICLES","ARTICLE_LOADING","intialState","articles","article","loading","state","action","type","payload","map","_id","stateCopy","id","title","image","imgSource","text","localStorage","setItem","JSON","stringify","filter"],"mappings":";AAAA,SACEA,WADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,WALF,EAMEC,YANF,EAOEC,eAPF,QAQO,kBARP;AAUA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAE,EADQ;AAElBC,EAAAA,OAAO,EAAE,EAFS;AAGlBC,EAAAA,OAAO,EAAE;AAHS,CAApB;AAMA,eAAe,UAASC,KAAK,GAAGJ,WAAjB,EAA8BK,MAA9B,EAAsC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,eAAL;AACE,+BACKK,KADL;AAEED,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKV,WAAL;AACE,+BAAYW,KAAZ;AAAmBH,QAAAA,QAAQ,EAAE,CAACI,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACH,QAA1B;AAA7B;;AACF,SAAKH,YAAL;AACE,+BAAYM,KAAZ;AAAmBH,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAApC;AAA6CJ,QAAAA,OAAO,EAAE;AAAtD;;AACF,SAAKN,WAAL;AACE,+BAAYO,KAAZ;AAAmBF,QAAAA,OAAO,EAAEG,MAAM,CAACE,OAAnC;AAA4CJ,QAAAA,OAAO,EAAE;AAArD;;AACF,SAAKT,YAAL;AACE,+BACKU,KADL;AAEEH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeO,GAAf,CAAmBN,OAAO,IAAIA,OAAO,CAACO,GAAR,KAAgBJ,MAAM,CAACE,OAArD;AAFZ;;AAIF,SAAKZ,cAAL;AACEe,MAAAA,SAAS,GAAGN,KAAK,CAACI,GAAN,CAAUN,OAAO,IAAI;AAAA,gCACeG,MAAM,CAACE,OADtB;AAAA,cACvBI,EADuB,mBACvBA,EADuB;AAAA,cACnBC,KADmB,mBACnBA,KADmB;AAAA,cACZC,KADY,mBACZA,KADY;AAAA,cACLC,SADK,mBACLA,SADK;AAAA,cACMC,IADN,mBACMA,IADN;;AAE/B,YAAIb,OAAO,CAACS,EAAR,KAAeA,EAAnB,EAAuB;AACrBT,UAAAA,OAAO,CAACU,KAAR,GAAgBA,KAAhB;AACAV,UAAAA,OAAO,CAACW,KAAR,GAAgBA,KAAhB;AACAX,UAAAA,OAAO,CAACY,SAAR,GAAoBA,SAApB;AACAZ,UAAAA,OAAO,CAACa,IAAR,GAAeA,IAAf;AACD;;AACD,eAAOb,OAAP;AACD,OATW,CAAZ;AAUAc,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAAjC;AACA,aAAOA,SAAP;;AAEF,SAAKd,cAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAemB,MAAf,CACRlB,OAAO,IAAIA,OAAO,CAACO,GAAR,KAAgBJ,MAAM,CAACE,OAD1B;AAFZ;;AAMF;AACE,aAAOH,KAAP;AAvCJ;AAyCD","sourcesContent":["import {\n  ADD_ARTICLE,\n  EDIT_ARTICLE,\n  UPDATE_ARTICLE,\n  DELETE_ARTICLE,\n  GET_ARTICLE,\n  GET_ARTICLES,\n  ARTICLE_LOADING\n} from \"../actions/types\";\n\nconst intialState = {\n  articles: [],\n  article: {},\n  loading: false\n};\n\nexport default function(state = intialState, action) {\n  switch (action.type) {\n    case ARTICLE_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case ADD_ARTICLE:\n      return { ...state, articles: [action.payload, ...state.articles] };\n    case GET_ARTICLES:\n      return { ...state, articles: action.payload, loading: false };\n    case GET_ARTICLE:\n      return { ...state, article: action.payload, loading: false };\n    case EDIT_ARTICLE:\n      return {\n        ...state,\n        articles: state.articles.map(article => article._id !== action.payload)\n      };\n    case UPDATE_ARTICLE:\n      stateCopy = state.map(article => {\n        const { id, title, image, imgSource, text } = action.payload;\n        if (article.id === id) {\n          article.title = title;\n          article.image = image;\n          article.imgSource = imgSource;\n          article.text = text;\n        }\n        return article;\n      });\n      localStorage.setItem(\"articles\", JSON.stringify(stateCopy));\n      return stateCopy;\n\n    case DELETE_ARTICLE:\n      return {\n        ...state,\n        articles: state.articles.filter(\n          article => article._id !== action.payload\n        )\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}