{"ast":null,"code":"// freeze Array#slice, just in case of funny business later.\nvar _slice = Array.prototype.slice;\n\nvar getPromise = require('./_promise.js'); // deferred gets its own scope to prevent inadvertent capture in the closure\n\n\nvar deferred = function deferred(options) {\n  var Promise = getPromise();\n  var resolve,\n      reject,\n      p = new Promise(function (_resolve, _reject) {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  var pattern = options && options.pattern;\n  var noError = options && options.noError;\n  var cb = pattern ? function (err) {\n    if (err && !noError) {\n      return reject(err);\n    }\n\n    var result = {},\n        i,\n        offset = noError ? 0 : 1;\n\n    for (i = 0; i < pattern.length; i++) {\n      result[pattern[i]] = arguments[i + offset];\n    }\n\n    resolve(result);\n  } : noError ? resolve : function (err, val) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(val);\n    }\n  };\n  return {\n    promise: p,\n    callback: cb\n  };\n};\n\nvar promisify = module.exports = function (context, func, mandatoryArgs, options) {\n  if (options && options.callbackIsFirstArg) {\n    // duplicate some code here so we don't have to process this unusual\n    // situation at runtime in the common case.\n    return function (cb) {\n      if (typeof cb === 'function') {\n        return func.apply(context, arguments);\n      }\n\n      var d = deferred(options);\n\n      var a = _slice.call(arguments, 0);\n\n      a.unshift(d.callback);\n      func.apply(context, a);\n      return d.promise;\n    };\n  }\n\n  return function () {\n    var cb = arguments[arguments.length - 1];\n\n    if (typeof cb === 'function') {\n      return func.apply(context, arguments);\n    } // ooh, promises.\n\n\n    var d = deferred(options);\n\n    var a = _slice.call(arguments, 0);\n\n    while (a.length < mandatoryArgs) {\n      a.push(undefined);\n    }\n\n    a.push(d.callback);\n    var retval = func.apply(context, a);\n\n    if (options && options.returnsObject) {\n      // it would be nice to have a better convention here\n      Object.defineProperty(retval, 'promise', {\n        value: d.promise\n      });\n      return retval;\n    }\n\n    return d.promise;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}