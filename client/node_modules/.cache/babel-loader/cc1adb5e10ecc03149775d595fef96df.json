{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.editorStateToJSON = editorStateToJSON;\nexports.editorStateFromRaw = editorStateFromRaw;\nexports.getSelectedBlockElement = getSelectedBlockElement;\nexports.getSelectionCoords = getSelectionCoords;\nexports.createTypeStrategy = createTypeStrategy;\nexports.delayCall = delayCall;\n\nvar _draftJs = require(\"draft-js\");\n\nvar _defaultDecorator = require(\"./decorators/defaultDecorator\");\n\nvar _defaultDecorator2 = _interopRequireDefault(_defaultDecorator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n * Copyright (c) 2016, Globo.com (https://github.com/globocom)\n * Copyright (c) 2016, Andrew Coelho <info@andrewcoelho.com>\n *\n * License: MIT\n */\n\n\nfunction editorStateToJSON(editorState) {\n  if (editorState) {\n    var content = editorState.getCurrentContent();\n    return JSON.stringify((0, _draftJs.convertToRaw)(content), null, 2);\n  }\n}\n\nfunction editorStateFromRaw(rawContent) {\n  var decorator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _defaultDecorator2.default;\n\n  if (rawContent) {\n    var content = (0, _draftJs.convertFromRaw)(rawContent);\n    return _draftJs.EditorState.createWithContent(content, decorator);\n  } else {\n    return _draftJs.EditorState.createEmpty(decorator);\n  }\n}\n\nfunction getSelectedBlockElement(range) {\n  var node = range.startContainer;\n\n  do {\n    try {\n      var nodeIsDataBlock = node.getAttribute ? node.getAttribute(\"data-block\") : null;\n\n      if (nodeIsDataBlock) {\n        return node;\n      }\n\n      node = node.parentNode;\n    } catch (error) {\n      return null;\n    }\n  } while (node !== null);\n\n  return null;\n}\n\nfunction getSelectionCoords(editor, toolbar) {\n  var editorBounds = editor.getBoundingClientRect();\n  var win = editor.ownerDocument.defaultView || window;\n  var rangeBounds = (0, _draftJs.getVisibleSelectionRect)(win);\n\n  if (!rangeBounds || !toolbar) {\n    return null;\n  }\n\n  var toolbarHeight = toolbar.offsetHeight;\n  var toolbarWidth = toolbar.offsetWidth;\n  var minOffsetLeft = 5;\n  var minOffsetRight = 5;\n  var minOffsetTop = 5;\n  var rangeWidth = rangeBounds.right - rangeBounds.left;\n  var arrowStyle = {};\n  var offsetLeft = rangeBounds.left - editorBounds.left + rangeWidth / 2;\n  arrowStyle.left = \"50%\";\n\n  if (offsetLeft - toolbarWidth / 2 + editorBounds.left < minOffsetLeft) {\n    offsetLeft = toolbarWidth / 2 - editorBounds.left + minOffsetLeft;\n    arrowStyle.left = (rangeBounds.left + rangeBounds.right) / 2 - minOffsetLeft;\n  }\n\n  if (offsetLeft + toolbarWidth / 2 + editorBounds.left > win.innerWidth - minOffsetRight) {\n    arrowStyle.left = rangeBounds.left - (win.innerWidth - minOffsetRight - toolbarWidth) + (rangeBounds.right - rangeBounds.left) / 2;\n    offsetLeft = win.innerWidth - editorBounds.left - toolbarWidth / 2 - minOffsetRight;\n  }\n\n  var offsetTop = rangeBounds.top - editorBounds.top - 14;\n  arrowStyle.top = \"100%\";\n\n  if (offsetTop - minOffsetTop - toolbarHeight + editorBounds.top < 0) {\n    //Always make sure that, if the range bounds does not fully exists, we keep the current coordinates\n    if (rangeBounds.bottom && !Number.isNaN(rangeBounds.bottom)) {\n      offsetTop = rangeBounds.bottom - editorBounds.top + toolbarHeight + 14;\n      arrowStyle.top = \"-14px\";\n      arrowStyle.transform = \"rotate(180deg)\";\n    }\n  }\n\n  return {\n    offsetLeft: offsetLeft,\n    offsetTop: offsetTop,\n    arrowStyle: arrowStyle\n  };\n}\n\nfunction createTypeStrategy(type) {\n  return function (contentBlock, callback, contentState) {\n    contentBlock.findEntityRanges(function (character) {\n      var entityKey = character.getEntity();\n      return entityKey !== null && contentState.getEntity(entityKey).getType() === type;\n    }, callback);\n  };\n}\n/**\n * Returns a wrapper for the given function which cannot be called\n * more often than the given interval. Every time the wrapper is called\n * a timeout gets reset to the interval's number of ms before calling the fn.\n *\n * Keep attention to bind the correct context to the provided funtion using bind() or '::'!\n *\n * @export\n * @param {function} fn The function to execute after the given interval.\n * @param {number} [interval=100] The interval to wait for before calling the wrapped function.\n * @example\n * ```\n * const delayedLog = delayCall(::console.log, 200);\n * delayedLog('hans');\n * delayedLog('heiri');\n * // logs 'heiri' after 200ms, 'hans' won't be logged at all.\n * ```\n * @returns {void}\n */\n\n\nfunction delayCall(fn) {\n  var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var timeout = void 0;\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timeout) {\n      window.clearTimeout(timeout);\n    }\n\n    timeout = window.setTimeout(function () {\n      return fn.apply(window, args);\n    }, interval);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}