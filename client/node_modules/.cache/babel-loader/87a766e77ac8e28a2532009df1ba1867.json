{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar DOMException = require(\"domexception\");\n\nvar _require = require(\"../helpers/document-base-url\"),\n    documentBaseURL = _require.documentBaseURL,\n    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;\n\nvar _require2 = require(\"./navigation\"),\n    navigate = _require2.navigate; // Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function LocationImpl(args, privateData) {\n    _classCallCheck(this, LocationImpl);\n\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n  }\n\n  _createClass(LocationImpl, [{\n    key: \"_locationObjectSetterNavigate\",\n    value: function _locationObjectSetterNavigate(url) {\n      // Not implemented: extra steps here to determine replacement flag.\n      return this._locationObjectNavigate(url);\n    }\n  }, {\n    key: \"_locationObjectNavigate\",\n    value: function _locationObjectNavigate(url) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$replacement = _ref.replacement,\n          replacement = _ref$replacement === void 0 ? false : _ref$replacement;\n\n      // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n      navigate(this._relevantDocument._defaultView, url, {\n        replacement: replacement,\n        exceptionsEnabled: true\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.href;\n    }\n  }, {\n    key: \"assign\",\n    value: function assign(url) {\n      // Should be entry settings object; oh well\n      var parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n      if (parsedURL === null) {\n        throw new DOMException(\"Could not resolve the given string \\\"\".concat(url, \"\\\" relative to the \") + \"base URL \\\"\".concat(this._relevantDocument.URL, \"\\\"\"), \"SyntaxError\");\n      }\n\n      this._locationObjectNavigate(parsedURL);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(url) {\n      // Should be entry settings object; oh well\n      var parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n      if (parsedURL === null) {\n        throw new DOMException(\"Could not resolve the given string \\\"\".concat(url, \"\\\" relative to the \") + \"base URL \\\"\".concat(this._relevantDocument.URL, \"\\\"\"), \"SyntaxError\");\n      }\n\n      this._locationObjectNavigate(parsedURL, {\n        replacement: true\n      });\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      var flags = {\n        replace: true,\n        reloadTriggered: true,\n        exceptionsEnabled: true\n      };\n      navigate(this._relevantDocument._defaultView, this._url, flags);\n    }\n  }, {\n    key: \"_url\",\n    get: function get() {\n      return this._relevantDocument._URL;\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      return whatwgURL.serializeURL(this._url);\n    },\n    set: function set(v) {\n      var newURL = whatwgURL.parseURL(v, {\n        baseURL: documentBaseURL(this._relevantDocument)\n      });\n\n      if (newURL === null) {\n        throw new TypeError(\"Could not parse \\\"\".concat(v, \"\\\" as a URL\"));\n      }\n\n      this._locationObjectSetterNavigate(newURL);\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      return whatwgURL.serializeURLOrigin(this._url);\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      return this._url.scheme + \":\";\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n      var possibleFailure = whatwgURL.basicURLParse(v + \":\", {\n        url: copyURL,\n        stateOverride: \"scheme start\"\n      });\n\n      if (possibleFailure === null) {\n        throw new TypeError(\"Could not parse the URL after setting the procol to \\\"\".concat(v, \"\\\"\"));\n      }\n\n      if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n        return;\n      }\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      var url = this._url;\n\n      if (url.host === null) {\n        return \"\";\n      }\n\n      if (url.port === null) {\n        return whatwgURL.serializeHost(url.host);\n      }\n\n      return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n\n      if (copyURL.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: copyURL,\n        stateOverride: \"host\"\n      });\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      if (this._url.host === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeHost(this._url.host);\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n\n      if (copyURL.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: copyURL,\n        stateOverride: \"hostname\"\n      });\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      if (this._url.port === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeInteger(this._url.port);\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n\n      if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: copyURL,\n        stateOverride: \"port\"\n      });\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      var url = this._url;\n\n      if (url.cannotBeABaseURL) {\n        return url.path[0];\n      }\n\n      return \"/\" + url.path.join(\"/\");\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n\n      if (copyURL.cannotBeABaseURL) {\n        return;\n      }\n\n      copyURL.path = [];\n      whatwgURL.basicURLParse(v, {\n        url: copyURL,\n        stateOverride: \"path start\"\n      });\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      if (this._url.query === null || this._url.query === \"\") {\n        return \"\";\n      }\n\n      return \"?\" + this._url.query;\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n\n      if (v === \"\") {\n        copyURL.query = null;\n      } else {\n        var input = v[0] === \"?\" ? v.substring(1) : v;\n        copyURL.query = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: copyURL,\n          stateOverride: \"query\",\n          encodingOverride: this._relevantDocument.charset\n        });\n      }\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      if (this._url.fragment === null || this._url.fragment === \"\") {\n        return \"\";\n      }\n\n      return \"#\" + this._url.fragment;\n    },\n    set: function set(v) {\n      var copyURL = Object.assign({}, this._url);\n\n      if (copyURL.scheme === \"javascript\") {\n        return;\n      }\n\n      if (v === \"\") {\n        copyURL.fragment = null;\n      } else {\n        var input = v[0] === \"#\" ? v.substring(1) : v;\n        copyURL.fragment = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: copyURL,\n          stateOverride: \"fragment\"\n        });\n      }\n\n      this._locationObjectSetterNavigate(copyURL);\n    }\n  }]);\n\n  return LocationImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}