{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertAttr = require(\"./Attr.js\").convert;\n\nvar isNode = require(\"./Node.js\").is;\n\nvar impl = utils.implSymbol;\n\nvar Node = require(\"./Node.js\");\n\nvar ChildNode = require(\"./ChildNode.js\");\n\nvar NonDocumentTypeChildNode = require(\"./NonDocumentTypeChildNode.js\");\n\nvar ParentNode = require(\"./ParentNode.js\");\n\nfunction Element() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(Element.prototype, Node.interface.prototype);\nObject.setPrototypeOf(Element, Node.interface);\nObject.defineProperty(Element, \"prototype\", {\n  value: Element.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nElement.prototype.hasAttributes = function hasAttributes() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].hasAttributes();\n};\n\nElement.prototype.getAttributeNames = function getAttributeNames() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].getAttributeNames());\n};\n\nElement.prototype.getAttribute = function getAttribute(qualifiedName) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getAttribute' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl = this[impl]).getAttribute.apply(_this$impl, args);\n};\n\nElement.prototype.getAttributeNS = function getAttributeNS(namespace, localName) {\n  var _this$impl2;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getAttributeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg = arguments[1];\n    _curArg = conversions[\"DOMString\"](_curArg, {\n      context: \"Failed to execute 'getAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(_curArg);\n  }\n  return (_this$impl2 = this[impl]).getAttributeNS.apply(_this$impl2, args);\n};\n\nElement.prototype.setAttribute = function setAttribute(qualifiedName, value) {\n  var _this$impl3;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'setAttribute' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg2 = arguments[1];\n    _curArg2 = conversions[\"DOMString\"](_curArg2, {\n      context: \"Failed to execute 'setAttribute' on 'Element': parameter 2\"\n    });\n    args.push(_curArg2);\n  }\n  return (_this$impl3 = this[impl]).setAttribute.apply(_this$impl3, args);\n};\n\nElement.prototype.setAttributeNS = function setAttributeNS(namespace, qualifiedName, value) {\n  var _this$impl4;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 3) {\n    throw new TypeError(\"Failed to execute 'setAttributeNS' on 'Element': 3 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'setAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg3 = arguments[1];\n    _curArg3 = conversions[\"DOMString\"](_curArg3, {\n      context: \"Failed to execute 'setAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(_curArg3);\n  }\n  {\n    var _curArg4 = arguments[2];\n    _curArg4 = conversions[\"DOMString\"](_curArg4, {\n      context: \"Failed to execute 'setAttributeNS' on 'Element': parameter 3\"\n    });\n    args.push(_curArg4);\n  }\n  return (_this$impl4 = this[impl]).setAttributeNS.apply(_this$impl4, args);\n};\n\nElement.prototype.removeAttribute = function removeAttribute(qualifiedName) {\n  var _this$impl5;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'removeAttribute' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'removeAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl5 = this[impl]).removeAttribute.apply(_this$impl5, args);\n};\n\nElement.prototype.removeAttributeNS = function removeAttributeNS(namespace, localName) {\n  var _this$impl6;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'removeAttributeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg5 = arguments[1];\n    _curArg5 = conversions[\"DOMString\"](_curArg5, {\n      context: \"Failed to execute 'removeAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(_curArg5);\n  }\n  return (_this$impl6 = this[impl]).removeAttributeNS.apply(_this$impl6, args);\n};\n\nElement.prototype.hasAttribute = function hasAttribute(qualifiedName) {\n  var _this$impl7;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'hasAttribute' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'hasAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl7 = this[impl]).hasAttribute.apply(_this$impl7, args);\n};\n\nElement.prototype.hasAttributeNS = function hasAttributeNS(namespace, localName) {\n  var _this$impl8;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'hasAttributeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'hasAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg6 = arguments[1];\n    _curArg6 = conversions[\"DOMString\"](_curArg6, {\n      context: \"Failed to execute 'hasAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(_curArg6);\n  }\n  return (_this$impl8 = this[impl]).hasAttributeNS.apply(_this$impl8, args);\n};\n\nElement.prototype.getAttributeNode = function getAttributeNode(qualifiedName) {\n  var _this$impl9;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getAttributeNode' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getAttributeNode' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl9 = this[impl]).getAttributeNode.apply(_this$impl9, args));\n};\n\nElement.prototype.getAttributeNodeNS = function getAttributeNodeNS(namespace, localName) {\n  var _this$impl10;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getAttributeNodeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getAttributeNodeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg7 = arguments[1];\n    _curArg7 = conversions[\"DOMString\"](_curArg7, {\n      context: \"Failed to execute 'getAttributeNodeNS' on 'Element': parameter 2\"\n    });\n    args.push(_curArg7);\n  }\n  return utils.tryWrapperForImpl((_this$impl10 = this[impl]).getAttributeNodeNS.apply(_this$impl10, args));\n};\n\nElement.prototype.setAttributeNode = function setAttributeNode(attr) {\n  var _this$impl11;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setAttributeNode' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertAttr(curArg, {\n      context: \"Failed to execute 'setAttributeNode' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl11 = this[impl]).setAttributeNode.apply(_this$impl11, args));\n};\n\nElement.prototype.setAttributeNodeNS = function setAttributeNodeNS(attr) {\n  var _this$impl12;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setAttributeNodeNS' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertAttr(curArg, {\n      context: \"Failed to execute 'setAttributeNodeNS' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl12 = this[impl]).setAttributeNodeNS.apply(_this$impl12, args));\n};\n\nElement.prototype.removeAttributeNode = function removeAttributeNode(attr) {\n  var _this$impl13;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'removeAttributeNode' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertAttr(curArg, {\n      context: \"Failed to execute 'removeAttributeNode' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl13 = this[impl]).removeAttributeNode.apply(_this$impl13, args));\n};\n\nElement.prototype.closest = function closest(selectors) {\n  var _this$impl14;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'closest' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'closest' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl14 = this[impl]).closest.apply(_this$impl14, args));\n};\n\nElement.prototype.matches = function matches(selectors) {\n  var _this$impl15;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'matches' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'matches' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl15 = this[impl]).matches.apply(_this$impl15, args);\n};\n\nElement.prototype.webkitMatchesSelector = function webkitMatchesSelector(selectors) {\n  var _this$impl16;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'webkitMatchesSelector' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'webkitMatchesSelector' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl16 = this[impl]).webkitMatchesSelector.apply(_this$impl16, args);\n};\n\nElement.prototype.getElementsByTagName = function getElementsByTagName(qualifiedName) {\n  var _this$impl17;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByTagName' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByTagName' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl17 = this[impl]).getElementsByTagName.apply(_this$impl17, args));\n};\n\nElement.prototype.getElementsByTagNameNS = function getElementsByTagNameNS(namespace, localName) {\n  var _this$impl18;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getElementsByTagNameNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg8 = arguments[1];\n    _curArg8 = conversions[\"DOMString\"](_curArg8, {\n      context: \"Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 2\"\n    });\n    args.push(_curArg8);\n  }\n  return utils.tryWrapperForImpl((_this$impl18 = this[impl]).getElementsByTagNameNS.apply(_this$impl18, args));\n};\n\nElement.prototype.getElementsByClassName = function getElementsByClassName(classNames) {\n  var _this$impl19;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByClassName' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByClassName' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl19 = this[impl]).getElementsByClassName.apply(_this$impl19, args));\n};\n\nElement.prototype.insertAdjacentHTML = function insertAdjacentHTML(position, text) {\n  var _this$impl20;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'insertAdjacentHTML' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'insertAdjacentHTML' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg9 = arguments[1];\n    _curArg9 = conversions[\"DOMString\"](_curArg9, {\n      context: \"Failed to execute 'insertAdjacentHTML' on 'Element': parameter 2\"\n    });\n    args.push(_curArg9);\n  }\n  return (_this$impl20 = this[impl]).insertAdjacentHTML.apply(_this$impl20, args);\n};\n\nElement.prototype.getClientRects = function getClientRects() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].getClientRects());\n};\n\nElement.prototype.getBoundingClientRect = function getBoundingClientRect() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].getBoundingClientRect());\n};\n\nElement.prototype.before = function before() {\n  var _this$impl21;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'before' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl21 = this[impl]).before.apply(_this$impl21, args);\n};\n\nElement.prototype.after = function after() {\n  var _this$impl22;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'after' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl22 = this[impl]).after.apply(_this$impl22, args);\n};\n\nElement.prototype.replaceWith = function replaceWith() {\n  var _this$impl23;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'replaceWith' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl23 = this[impl]).replaceWith.apply(_this$impl23, args);\n};\n\nElement.prototype.remove = function remove() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].remove();\n};\n\nElement.prototype.prepend = function prepend() {\n  var _this$impl24;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'prepend' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl24 = this[impl]).prepend.apply(_this$impl24, args);\n};\n\nElement.prototype.append = function append() {\n  var _this$impl25;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'append' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl25 = this[impl]).append.apply(_this$impl25, args);\n};\n\nElement.prototype.querySelector = function querySelector(selectors) {\n  var _this$impl26;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'querySelector' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'querySelector' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl26 = this[impl]).querySelector.apply(_this$impl26, args));\n};\n\nElement.prototype.querySelectorAll = function querySelectorAll(selectors) {\n  var _this$impl27;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'querySelectorAll' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'querySelectorAll' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl27 = this[impl]).querySelectorAll.apply(_this$impl27, args));\n};\n\nObject.defineProperty(Element.prototype, \"namespaceURI\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"namespaceURI\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"prefix\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"prefix\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"localName\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"localName\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"tagName\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"tagName\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"id\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"id\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'id' property on 'Element': The provided value\"\n    });\n    this.setAttribute(\"id\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"className\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"class\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'className' property on 'Element': The provided value\"\n    });\n    this.setAttribute(\"class\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"classList\", {\n  get: function get() {\n    var _this = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"classList\", function () {\n      return utils.tryWrapperForImpl(_this[impl][\"classList\"]);\n    });\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    this.classList.value = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"attributes\", {\n  get: function get() {\n    var _this2 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"attributes\", function () {\n      return utils.tryWrapperForImpl(_this2[impl][\"attributes\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"innerHTML\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"innerHTML\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'innerHTML' property on 'Element': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"innerHTML\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"outerHTML\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"outerHTML\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'outerHTML' property on 'Element': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"outerHTML\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollTop\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollTop\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unrestricted double\"](V, {\n      context: \"Failed to set the 'scrollTop' property on 'Element': The provided value\"\n    });\n    this[impl][\"scrollTop\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollLeft\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollLeft\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unrestricted double\"](V, {\n      context: \"Failed to set the 'scrollLeft' property on 'Element': The provided value\"\n    });\n    this[impl][\"scrollLeft\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollWidth\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollWidth\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollHeight\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollHeight\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientTop\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientTop\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientLeft\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientLeft\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientWidth\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientWidth\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientHeight\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientHeight\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"previousElementSibling\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"previousElementSibling\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"nextElementSibling\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"nextElementSibling\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"children\", {\n  get: function get() {\n    var _this3 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"children\", function () {\n      return utils.tryWrapperForImpl(_this3[impl][\"children\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"firstElementChild\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"firstElementChild\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"lastElementChild\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"lastElementChild\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"childElementCount\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"childElementCount\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, Symbol.toStringTag, {\n  value: \"Element\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Element'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(Element.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(Element.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Node._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: Element,\n  expose: {\n    Window: {\n      Element: Element\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nChildNode._mixedIntoPredicates.push(module.exports.is);\n\nNonDocumentTypeChildNode._mixedIntoPredicates.push(module.exports.is);\n\nParentNode._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/Element-impl.js\");","map":null,"metadata":{},"sourceType":"script"}