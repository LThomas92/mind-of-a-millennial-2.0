{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  CSSValue: require('./CSSValue').CSSValue\n}; ///CommonJS\n\n/**\n * @constructor\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\n *\n */\n\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\n  this._token = token;\n  this._idx = idx;\n};\n\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\n/**\n * parse css expression() value\n *\n * @return {Object}\n *         - error:\n *         or\n *         - idx:\n *         - expression:\n *\n * Example:\n *\n * .selector {\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\n * }\n */\n\nCSSOM.CSSValueExpression.prototype.parse = function () {\n  var token = this._token,\n      idx = this._idx;\n  var character = '',\n      expression = '',\n      error = '',\n      info,\n      paren = [];\n\n  for (;; ++idx) {\n    character = token.charAt(idx); // end of token\n\n    if (character === '') {\n      error = 'css expression error: unfinished expression!';\n      break;\n    }\n\n    switch (character) {\n      case '(':\n        paren.push(character);\n        expression += character;\n        break;\n\n      case ')':\n        paren.pop(character);\n        expression += character;\n        break;\n\n      case '/':\n        if (info = this._parseJSComment(token, idx)) {\n          // comment?\n          if (info.error) {\n            error = 'css expression error: unfinished comment in expression!';\n          } else {\n            idx = info.idx; // ignore the comment\n          }\n        } else if (info = this._parseJSRexExp(token, idx)) {\n          // regexp\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          // other\n          expression += character;\n        }\n\n        break;\n\n      case \"'\":\n      case '\"':\n        info = this._parseJSString(token, idx, character);\n\n        if (info) {\n          // string\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          expression += character;\n        }\n\n        break;\n\n      default:\n        expression += character;\n        break;\n    }\n\n    if (error) {\n      break;\n    } // end of expression\n\n\n    if (paren.length === 0) {\n      break;\n    }\n  }\n\n  var ret;\n\n  if (error) {\n    ret = {\n      error: error\n    };\n  } else {\n    ret = {\n      idx: idx,\n      expression: expression\n    };\n  }\n\n  return ret;\n};\n/**\n *\n * @return {Object|false}\n *          - idx:\n *          - text:\n *          or\n *          - error:\n *          or\n *          false\n *\n */\n\n\nCSSOM.CSSValueExpression.prototype._parseJSComment = function (token, idx) {\n  var nextChar = token.charAt(idx + 1),\n      text;\n\n  if (nextChar === '/' || nextChar === '*') {\n    var startIdx = idx,\n        endIdx,\n        commentEndChar;\n\n    if (nextChar === '/') {\n      // line comment\n      commentEndChar = '\\n';\n    } else if (nextChar === '*') {\n      // block comment\n      commentEndChar = '*/';\n    }\n\n    endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\n\n    if (endIdx !== -1) {\n      endIdx = endIdx + commentEndChar.length - 1;\n      text = token.substring(idx, endIdx + 1);\n      return {\n        idx: endIdx,\n        text: text\n      };\n    } else {\n      var error = 'css expression error: unfinished comment in expression!';\n      return {\n        error: error\n      };\n    }\n  } else {\n    return false;\n  }\n};\n/**\n *\n * @return {Object|false}\n *\t\t\t\t\t- idx:\n *\t\t\t\t\t- text:\n *\t\t\t\t\tor \n *\t\t\t\t\tfalse\n *\n */\n\n\nCSSOM.CSSValueExpression.prototype._parseJSString = function (token, idx, sep) {\n  var endIdx = this._findMatchedIdx(token, idx, sep),\n      text;\n\n  if (endIdx === -1) {\n    return false;\n  } else {\n    text = token.substring(idx, endIdx + sep.length);\n    return {\n      idx: endIdx,\n      text: text\n    };\n  }\n};\n/**\n * parse regexp in css expression\n *\n * @return {Object|false}\n *\t\t\t\t- idx:\n *\t\t\t\t- regExp:\n *\t\t\t\tor \n *\t\t\t\tfalse\n */\n\n/*\n\nall legal RegExp\n \n/a/\n(/a/)\n[/a/]\n[12, /a/]\n\n!/a/\n\n+/a/\n-/a/\n* /a/\n/ /a/\n%/a/\n\n===/a/\n!==/a/\n==/a/\n!=/a/\n>/a/\n>=/a/\n</a/\n<=/a/\n\n&/a/\n|/a/\n^/a/\n~/a/\n<</a/\n>>/a/\n>>>/a/\n\n&&/a/\n||/a/\n?/a/\n=/a/\n,/a/\n\n\t\tdelete /a/\n\t\t\t\tin /a/\ninstanceof /a/\n\t\t\t\tnew /a/\n\t\ttypeof /a/\n\t\t\tvoid /a/\n\n*/\n\n\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function (token, idx) {\n  var before = token.substring(0, idx).replace(/\\s+$/, \"\"),\n      legalRegx = [/^$/, /\\($/, /\\[$/, /\\!$/, /\\+$/, /\\-$/, /\\*$/, /\\/\\s+/, /\\%$/, /\\=$/, /\\>$/, /<$/, /\\&$/, /\\|$/, /\\^$/, /\\~$/, /\\?$/, /\\,$/, /delete$/, /in$/, /instanceof$/, /new$/, /typeof$/, /void$/];\n  var isLegal = legalRegx.some(function (reg) {\n    return reg.test(before);\n  });\n\n  if (!isLegal) {\n    return false;\n  } else {\n    var sep = '/'; // same logic as string\n\n    return this._parseJSString(token, idx, sep);\n  }\n};\n/**\n *\n * find next sep(same line) index in `token`\n *\n * @return {Number}\n *\n */\n\n\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function (token, idx, sep) {\n  var startIdx = idx,\n      endIdx;\n  var NOT_FOUND = -1;\n\n  while (true) {\n    endIdx = token.indexOf(sep, startIdx + 1);\n\n    if (endIdx === -1) {\n      // not found\n      endIdx = NOT_FOUND;\n      break;\n    } else {\n      var text = token.substring(idx + 1, endIdx),\n          matched = text.match(/\\\\+$/);\n\n      if (!matched || matched[0] % 2 === 0) {\n        // not escaped\n        break;\n      } else {\n        startIdx = endIdx;\n      }\n    }\n  } // boundary must be in the same line(js sting or regexp)\n\n\n  var nextNewLineIdx = token.indexOf('\\n', idx + 1);\n\n  if (nextNewLineIdx < endIdx) {\n    endIdx = NOT_FOUND;\n  }\n\n  return endIdx;\n}; //.CommonJS\n\n\nexports.CSSValueExpression = CSSOM.CSSValueExpression; ///CommonJS","map":null,"metadata":{},"sourceType":"script"}