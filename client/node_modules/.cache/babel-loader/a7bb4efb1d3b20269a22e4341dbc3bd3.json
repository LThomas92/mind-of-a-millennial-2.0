{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertDocumentType = require(\"./DocumentType.js\").convert;\n\nvar impl = utils.implSymbol;\n\nfunction DOMImplementation() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(DOMImplementation, \"prototype\", {\n  value: DOMImplementation.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMImplementation.prototype.createDocumentType = function createDocumentType(qualifiedName, publicId, systemId) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 3) {\n    throw new TypeError(\"Failed to execute 'createDocumentType' on 'DOMImplementation': 3 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg = arguments[1];\n    _curArg = conversions[\"DOMString\"](_curArg, {\n      context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 2\"\n    });\n    args.push(_curArg);\n  }\n  {\n    var _curArg2 = arguments[2];\n    _curArg2 = conversions[\"DOMString\"](_curArg2, {\n      context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 3\"\n    });\n    args.push(_curArg2);\n  }\n  return utils.tryWrapperForImpl((_this$impl = this[impl]).createDocumentType.apply(_this$impl, args));\n};\n\nDOMImplementation.prototype.createDocument = function createDocument(namespace, qualifiedName) {\n  var _this$impl2;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'createDocument' on 'DOMImplementation': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg3 = arguments[1];\n    _curArg3 = conversions[\"DOMString\"](_curArg3, {\n      context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 2\",\n      treatNullAsEmptyString: true\n    });\n    args.push(_curArg3);\n  }\n  {\n    var _curArg4 = arguments[2];\n\n    if (_curArg4 !== undefined) {\n      if (_curArg4 === null || _curArg4 === undefined) {\n        _curArg4 = null;\n      } else {\n        _curArg4 = convertDocumentType(_curArg4, {\n          context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 3\"\n        });\n      }\n    } else {\n      _curArg4 = null;\n    }\n\n    args.push(_curArg4);\n  }\n  return utils.tryWrapperForImpl((_this$impl2 = this[impl]).createDocument.apply(_this$impl2, args));\n};\n\nDOMImplementation.prototype.createHTMLDocument = function createHTMLDocument() {\n  var _this$impl3;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'createHTMLDocument' on 'DOMImplementation': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl3 = this[impl]).createHTMLDocument.apply(_this$impl3, args));\n};\n\nDOMImplementation.prototype.hasFeature = function hasFeature() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].hasFeature();\n};\n\nObject.defineProperty(DOMImplementation.prototype, Symbol.toStringTag, {\n  value: \"DOMImplementation\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'DOMImplementation'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(DOMImplementation.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(DOMImplementation.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: DOMImplementation,\n  expose: {\n    Window: {\n      DOMImplementation: DOMImplementation\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/DOMImplementation-impl.js\");","map":null,"metadata":{},"sourceType":"script"}