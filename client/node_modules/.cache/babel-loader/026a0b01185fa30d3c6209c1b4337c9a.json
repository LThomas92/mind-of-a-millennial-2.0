{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    appendHandler = _require.appendHandler,\n    createEventAccessor = _require.createEventAccessor;\n\nvar events = new Set([\"abort\", \"autocomplete\", \"autocompleteerror\", \"blur\", \"cancel\", \"canplay\", \"canplaythrough\", \"change\", \"click\", \"close\", \"contextmenu\", \"cuechange\", \"dblclick\", \"drag\", \"dragend\", \"dragenter\", \"dragexit\", \"dragleave\", \"dragover\", \"dragstart\", \"drop\", \"durationchange\", \"emptied\", \"ended\", \"error\", \"focus\", \"input\", \"invalid\", \"keydown\", \"keypress\", \"keyup\", \"load\", \"loadeddata\", \"loadedmetadata\", \"loadstart\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"wheel\", \"pause\", \"play\", \"playing\", \"progress\", \"ratechange\", \"reset\", \"resize\", \"scroll\", \"securitypolicyviolation\", \"seeked\", \"seeking\", \"select\", \"sort\", \"stalled\", \"submit\", \"suspend\", \"timeupdate\", \"toggle\", \"volumechange\", \"waiting\"]);\n\nvar GlobalEventHandlersImpl =\n/*#__PURE__*/\nfunction () {\n  function GlobalEventHandlersImpl() {\n    _classCallCheck(this, GlobalEventHandlersImpl);\n  }\n\n  _createClass(GlobalEventHandlersImpl, [{\n    key: \"_initGlobalEvents\",\n    value: function _initGlobalEvents() {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n  }, {\n    key: \"_getEventHandlerTarget\",\n    value: function _getEventHandlerTarget() {\n      return this;\n    }\n  }, {\n    key: \"_getEventHandlerFor\",\n    value: function _getEventHandlerFor(event) {\n      var target = this._getEventHandlerTarget(event);\n\n      if (!target) {\n        return null;\n      }\n\n      return target._eventHandlers[event];\n    }\n  }, {\n    key: \"_setEventHandlerFor\",\n    value: function _setEventHandlerFor(event, handler) {\n      var target = this._getEventHandlerTarget(event);\n\n      if (!target) {\n        return;\n      }\n\n      if (!target._registeredHandlers.has(event) && handler !== null) {\n        target._registeredHandlers.add(event);\n\n        appendHandler(target, event);\n      }\n\n      target._eventHandlers[event] = handler;\n    }\n  }, {\n    key: \"_globalEventChanged\",\n    value: function _globalEventChanged(event) {\n      var propName = \"on\" + event;\n\n      if (!(propName in this)) {\n        return;\n      } // Only translate attribute changes into properties when runScripts: \"dangerously\" is set.\n      // Documents without a browsing context (i.e. without a _defaultView) never run scripts.\n\n\n      var runScripts = \"_runScripts\" in this ? this._runScripts : (this._ownerDocument._defaultView || {})._runScripts;\n\n      if (runScripts !== \"dangerously\") {\n        return;\n      }\n\n      var val = this.getAttribute(propName);\n      var handler = val === null ? null : {\n        body: val\n      };\n\n      this._setEventHandlerFor(event, handler);\n    }\n  }]);\n\n  return GlobalEventHandlersImpl;\n}();\n\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n    var event = _step.value;\n    createEventAccessor(GlobalEventHandlersImpl.prototype, event);\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return != null) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: GlobalEventHandlersImpl\n};","map":null,"metadata":{},"sourceType":"script"}