{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar OrderedSet = require(\"../helpers/ordered-set.js\");\n\nvar _require = require(\"../helpers/strings.js\"),\n    asciiLowercase = _require.asciiLowercase;\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require2 = require(\"../attributes.js\"),\n    getAttributeValue = _require2.getAttributeValue,\n    setAttributeValue = _require2.setAttributeValue,\n    hasAttributeByName = _require2.hasAttributeByName;\n\nfunction validateTokens() {\n  for (var _len = arguments.length, tokens = new Array(_len), _key = 0; _key < _len; _key++) {\n    tokens[_key] = arguments[_key];\n  }\n\n  for (var _i = 0, _tokens = tokens; _i < _tokens.length; _i++) {\n    var token = _tokens[_i];\n\n    if (token === \"\") {\n      throw new DOMException(\"The token provided must not be empty.\", \"SyntaxError\");\n    }\n  }\n\n  for (var _i2 = 0, _tokens2 = tokens; _i2 < _tokens2.length; _i2++) {\n    var _token = _tokens2[_i2];\n\n    if (/[\\t\\n\\f\\r ]/.test(_token)) {\n      var whitespaceMsg = \"The token provided contains HTML space characters, which are not valid in tokens.\";\n      throw new DOMException(whitespaceMsg, \"InvalidCharacterError\");\n    }\n  }\n} // https://dom.spec.whatwg.org/#domtokenlist\n\n\nvar DOMTokenListImpl =\n/*#__PURE__*/\nfunction () {\n  function DOMTokenListImpl(constructorArgs, privateData) {\n    _classCallCheck(this, DOMTokenListImpl);\n\n    // _syncWithElement() must always be called before any _tokenSet access.\n    this._tokenSet = new OrderedSet();\n    this._element = privateData.element;\n    this._attributeLocalName = privateData.attributeLocalName;\n    this._supportedTokens = privateData.supportedTokens; // Needs synchronization with element if token set is to be accessed.\n\n    this._dirty = true;\n  }\n\n  _createClass(DOMTokenListImpl, [{\n    key: \"attrModified\",\n    value: function attrModified() {\n      this._dirty = true;\n    }\n  }, {\n    key: \"_syncWithElement\",\n    value: function _syncWithElement() {\n      if (!this._dirty) {\n        return;\n      }\n\n      var val = getAttributeValue(this._element, this._attributeLocalName);\n\n      if (val === null) {\n        this._tokenSet.empty();\n      } else {\n        this._tokenSet = OrderedSet.parse(val);\n      }\n\n      this._dirty = false;\n    }\n  }, {\n    key: \"_validationSteps\",\n    value: function _validationSteps(token) {\n      if (!this._supportedTokens) {\n        throw new TypeError(\"\".concat(this._attributeLocalName, \" attribute has no supported tokens\"));\n      }\n\n      var lowerToken = asciiLowercase(token);\n      return this._supportedTokens.has(lowerToken);\n    }\n  }, {\n    key: \"_updateSteps\",\n    value: function _updateSteps() {\n      if (!hasAttributeByName(this._element, this._attributeLocalName) && this._tokenSet.isEmpty()) {\n        return;\n      }\n\n      setAttributeValue(this._element, this._attributeLocalName, this._tokenSet.serialize());\n    }\n  }, {\n    key: \"_serializeSteps\",\n    value: function _serializeSteps() {\n      return getAttributeValue(this._element, this._attributeLocalName);\n    } // Used by other parts of jsdom\n\n  }, {\n    key: \"item\",\n    value: function item(index) {\n      this._syncWithElement();\n\n      if (index >= this._tokenSet.size) {\n        return null;\n      }\n\n      return this._tokenSet.get(index);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(token) {\n      this._syncWithElement();\n\n      return this._tokenSet.contains(token);\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len2 = arguments.length, tokens = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        tokens[_key2] = arguments[_key2];\n      }\n\n      for (var _i3 = 0, _tokens3 = tokens; _i3 < _tokens3.length; _i3++) {\n        var token = _tokens3[_i3];\n        validateTokens(token);\n      }\n\n      this._syncWithElement();\n\n      for (var _i4 = 0, _tokens4 = tokens; _i4 < _tokens4.length; _i4++) {\n        var _token2 = _tokens4[_i4];\n\n        this._tokenSet.append(_token2);\n      }\n\n      this._updateSteps();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var _this$_tokenSet;\n\n      for (var _len3 = arguments.length, tokens = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        tokens[_key3] = arguments[_key3];\n      }\n\n      for (var _i5 = 0, _tokens5 = tokens; _i5 < _tokens5.length; _i5++) {\n        var token = _tokens5[_i5];\n        validateTokens(token);\n      }\n\n      this._syncWithElement();\n\n      (_this$_tokenSet = this._tokenSet).remove.apply(_this$_tokenSet, tokens);\n\n      this._updateSteps();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(token) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      validateTokens(token);\n\n      this._syncWithElement();\n\n      if (this._tokenSet.contains(token)) {\n        if (force === undefined || force === false) {\n          this._tokenSet.remove(token);\n\n          this._updateSteps();\n\n          return false;\n        }\n\n        return true;\n      }\n\n      if (force === undefined || force === true) {\n        this._tokenSet.append(token);\n\n        this._updateSteps();\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(token, newToken) {\n      validateTokens(token, newToken);\n\n      this._syncWithElement();\n\n      if (!this._tokenSet.contains(token)) {\n        return false;\n      }\n\n      this._tokenSet.replace(token, newToken);\n\n      this._updateSteps();\n\n      return true;\n    }\n  }, {\n    key: \"supports\",\n    value: function supports(token) {\n      return this._validationSteps(token);\n    }\n  }, {\n    key: \"tokenSet\",\n    get: function get() {\n      this._syncWithElement();\n\n      return this._tokenSet;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._syncWithElement();\n\n      return this._tokenSet.size;\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      this._syncWithElement();\n\n      return this._tokenSet.keys();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._serializeSteps();\n    },\n    set: function set(V) {\n      setAttributeValue(this._element, this._attributeLocalName, V);\n    }\n  }]);\n\n  return DOMTokenListImpl;\n}();\n\nexports.implementation = DOMTokenListImpl;","map":null,"metadata":{},"sourceType":"script"}