{"ast":null,"code":"\"use strict\";\n\nvar iconvLite = require(\"iconv-lite\");\n\nvar supportedNames = require(\"./supported-names.json\");\n\nvar labelsToNames = require(\"./labels-to-names.json\");\n\nvar supportedNamesSet = new Set(supportedNames); // https://encoding.spec.whatwg.org/#concept-encoding-get\n\nexports.labelToName = function (label) {\n  label = String(label).trim().toLowerCase();\n  return labelsToNames[label] || null;\n}; // https://encoding.spec.whatwg.org/#decode\n\n\nexports.decode = function (buffer, fallbackEncodingName) {\n  var encoding = fallbackEncodingName;\n\n  if (!exports.isSupported(encoding)) {\n    throw new RangeError(\"\\\"\".concat(encoding, \"\\\" is not a supported encoding name\"));\n  }\n\n  var bomEncoding = exports.getBOMEncoding(buffer);\n\n  if (bomEncoding !== null) {\n    encoding = bomEncoding;\n  } // iconv-lite will strip BOMs for us, so no need to do the stuff the spec does\n\n\n  return iconvLite.decode(buffer, encoding);\n}; // https://github.com/whatwg/html/issues/1910#issuecomment-254017369\n\n\nexports.getBOMEncoding = function (buffer) {\n  if (buffer[0] === 0xFE && buffer[1] === 0xFF) {\n    return \"UTF-16BE\";\n  } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) {\n    return \"UTF-16LE\";\n  } else if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    return \"UTF-8\";\n  }\n\n  return null;\n};\n\nexports.isSupported = function (name) {\n  return supportedNamesSet.has(String(name));\n};","map":null,"metadata":{},"sourceType":"script"}