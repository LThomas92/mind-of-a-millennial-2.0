{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar MouseEvent = require(\"../generated/MouseEvent\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    isLabelable = _require2.isLabelable,\n    isDisabled = _require2.isDisabled;\n\nfunction sendClickToAssociatedNode(node) {\n  node.dispatchEvent(MouseEvent.createImpl([\"click\", {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  }]));\n}\n\nvar HTMLLabelElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLLabelElementImpl, _HTMLElementImpl);\n\n  function HTMLLabelElementImpl() {\n    _classCallCheck(this, HTMLLabelElementImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLLabelElementImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLLabelElementImpl, [{\n    key: \"_activationBehavior\",\n    value: function _activationBehavior() {\n      var node = this.control;\n\n      if (node && !isDisabled(node)) {\n        sendClickToAssociatedNode(node);\n      }\n    }\n  }, {\n    key: \"control\",\n    get: function get() {\n      if (this.hasAttribute(\"for\")) {\n        var forValue = this.getAttribute(\"for\");\n\n        if (forValue === \"\") {\n          return null;\n        }\n\n        var root = this.getRootNode();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = domSymbolTree.treeIterator(root)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var descendant = _step.value;\n\n            if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttribute(\"id\") === forValue) {\n              return isLabelable(descendant) ? descendant : null;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return null;\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = domSymbolTree.treeIterator(this)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _descendant = _step2.value;\n\n          if (isLabelable(_descendant)) {\n            return _descendant;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      var node = this.control;\n\n      if (node) {\n        return node.form;\n      }\n\n      return null;\n    }\n  }]);\n\n  return HTMLLabelElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}