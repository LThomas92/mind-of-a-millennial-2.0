{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  CSSStyleDeclaration: require(\"./CSSStyleDeclaration\").CSSStyleDeclaration,\n  CSSRule: require(\"./CSSRule\").CSSRule\n}; ///CommonJS\n\n/**\n * @constructor\n * @see http://dev.w3.org/csswg/cssom/#cssstylerule\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule\n */\n\nCSSOM.CSSStyleRule = function CSSStyleRule() {\n  CSSOM.CSSRule.call(this);\n  this.selectorText = \"\";\n  this.style = new CSSOM.CSSStyleDeclaration();\n  this.style.parentRule = this;\n};\n\nCSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule();\nCSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;\nCSSOM.CSSStyleRule.prototype.type = 1;\nObject.defineProperty(CSSOM.CSSStyleRule.prototype, \"cssText\", {\n  get: function get() {\n    var text;\n\n    if (this.selectorText) {\n      text = this.selectorText + \" {\" + this.style.cssText + \"}\";\n    } else {\n      text = \"\";\n    }\n\n    return text;\n  },\n  set: function set(cssText) {\n    var rule = CSSOM.CSSStyleRule.parse(cssText);\n    this.style = rule.style;\n    this.selectorText = rule.selectorText;\n  }\n});\n/**\n * NON-STANDARD\n * lightweight version of parse.js.\n * @param {string} ruleText\n * @return CSSStyleRule\n */\n\nCSSOM.CSSStyleRule.parse = function (ruleText) {\n  var i = 0;\n  var state = \"selector\";\n  var index;\n  var j = i;\n  var buffer = \"\";\n  var SIGNIFICANT_WHITESPACE = {\n    \"selector\": true,\n    \"value\": true\n  };\n  var styleRule = new CSSOM.CSSStyleRule();\n  var name,\n      priority = \"\";\n\n  for (var character; character = ruleText.charAt(i); i++) {\n    switch (character) {\n      case \" \":\n      case \"\\t\":\n      case \"\\r\":\n      case \"\\n\":\n      case \"\\f\":\n        if (SIGNIFICANT_WHITESPACE[state]) {\n          // Squash 2 or more white-spaces in the row into 1\n          switch (ruleText.charAt(i - 1)) {\n            case \" \":\n            case \"\\t\":\n            case \"\\r\":\n            case \"\\n\":\n            case \"\\f\":\n              break;\n\n            default:\n              buffer += \" \";\n              break;\n          }\n        }\n\n        break;\n      // String\n\n      case '\"':\n        j = i + 1;\n        index = ruleText.indexOf('\"', j) + 1;\n\n        if (!index) {\n          throw '\" is missing';\n        }\n\n        buffer += ruleText.slice(i, index);\n        i = index - 1;\n        break;\n\n      case \"'\":\n        j = i + 1;\n        index = ruleText.indexOf(\"'\", j) + 1;\n\n        if (!index) {\n          throw \"' is missing\";\n        }\n\n        buffer += ruleText.slice(i, index);\n        i = index - 1;\n        break;\n      // Comment\n\n      case \"/\":\n        if (ruleText.charAt(i + 1) === \"*\") {\n          i += 2;\n          index = ruleText.indexOf(\"*/\", i);\n\n          if (index === -1) {\n            throw new SyntaxError(\"Missing */\");\n          } else {\n            i = index + 1;\n          }\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \"{\":\n        if (state === \"selector\") {\n          styleRule.selectorText = buffer.trim();\n          buffer = \"\";\n          state = \"name\";\n        }\n\n        break;\n\n      case \":\":\n        if (state === \"name\") {\n          name = buffer.trim();\n          buffer = \"\";\n          state = \"value\";\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \"!\":\n        if (state === \"value\" && ruleText.indexOf(\"!important\", i) === i) {\n          priority = \"important\";\n          i += \"important\".length;\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \";\":\n        if (state === \"value\") {\n          styleRule.style.setProperty(name, buffer.trim(), priority);\n          priority = \"\";\n          buffer = \"\";\n          state = \"name\";\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \"}\":\n        if (state === \"value\") {\n          styleRule.style.setProperty(name, buffer.trim(), priority);\n          priority = \"\";\n          buffer = \"\";\n        } else if (state === \"name\") {\n          break;\n        } else {\n          buffer += character;\n        }\n\n        state = \"selector\";\n        break;\n\n      default:\n        buffer += character;\n        break;\n    }\n  }\n\n  return styleRule;\n}; //.CommonJS\n\n\nexports.CSSStyleRule = CSSOM.CSSStyleRule; ///CommonJS","map":null,"metadata":{},"sourceType":"script"}