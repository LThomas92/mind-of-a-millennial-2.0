{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"./helpers\"),\n    filter = _require2.filter,\n    FILTER_ACCEPT = _require2.FILTER_ACCEPT;\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function NodeIteratorImpl(constructorArgs, privateData) {\n    _classCallCheck(this, NodeIteratorImpl);\n\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true; // This is used to deactive the NodeIterator if there are too many working in a Document at the same time.\n    // Without weak references, a JS implementation of NodeIterator will leak, since we can't know when to clean it up.\n    // This ensures we force a clean up of those beyond some maximum (specified by the Document).\n\n    this._working = true;\n    this._workingNodeIteratorsMax = privateData.workingNodeIteratorsMax;\n  }\n\n  _createClass(NodeIteratorImpl, [{\n    key: \"nextNode\",\n    value: function nextNode() {\n      this._throwIfNotWorking();\n\n      return this._traverse(\"next\");\n    }\n  }, {\n    key: \"previousNode\",\n    value: function previousNode() {\n      this._throwIfNotWorking();\n\n      return this._traverse(\"previous\");\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {} // Intentionally do nothing, per spec.\n    // Called by Documents.\n\n  }, {\n    key: \"_preRemovingSteps\",\n    value: function _preRemovingSteps(toBeRemovedNode) {\n      // Second clause is https://github.com/whatwg/dom/issues/496\n      if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n        return;\n      }\n\n      if (this._pointerBeforeReferenceNode) {\n        var next = null;\n        var candidateForNext = domSymbolTree.following(toBeRemovedNode, {\n          skipChildren: true\n        });\n\n        while (candidateForNext !== null) {\n          if (this.root.contains(candidateForNext)) {\n            next = candidateForNext;\n            break;\n          }\n\n          candidateForNext = domSymbolTree.following(candidateForNext, {\n            skipChildren: true\n          });\n        }\n\n        if (next !== null) {\n          this._referenceNode = next;\n          return;\n        }\n\n        this._pointerBeforeReferenceNode = false;\n      }\n\n      var previousSibling = toBeRemovedNode.previousSibling;\n      this._referenceNode = previousSibling === null ? toBeRemovedNode.parentNode : domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n    } // Only called by getters and methods that are affected by the pre-removing steps\n\n  }, {\n    key: \"_throwIfNotWorking\",\n    value: function _throwIfNotWorking() {\n      if (!this._working) {\n        throw Error(\"This NodeIterator is no longer working. More than \".concat(this._workingNodeIteratorsMax, \" iterators are \") + \"being used concurrently. You can increase the 'concurrentNodeIterators' option to make this error go away.\");\n      }\n    }\n  }, {\n    key: \"_traverse\",\n    value: function _traverse(direction) {\n      var node = this._referenceNode;\n      var beforeNode = this._pointerBeforeReferenceNode;\n\n      while (true) {\n        if (direction === \"next\") {\n          if (!beforeNode) {\n            node = domSymbolTree.following(node, {\n              root: this.root\n            });\n\n            if (!node) {\n              return null;\n            }\n          }\n\n          beforeNode = false;\n        } else if (direction === \"previous\") {\n          if (beforeNode) {\n            node = domSymbolTree.preceding(node, {\n              root: this.root\n            });\n\n            if (!node) {\n              return null;\n            }\n          }\n\n          beforeNode = true;\n        }\n\n        var result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          break;\n        }\n      }\n\n      this._referenceNode = node;\n      this._pointerBeforeReferenceNode = beforeNode;\n      return node;\n    }\n  }, {\n    key: \"referenceNode\",\n    get: function get() {\n      this._throwIfNotWorking();\n\n      return this._referenceNode;\n    }\n  }, {\n    key: \"pointerBeforeReferenceNode\",\n    get: function get() {\n      this._throwIfNotWorking();\n\n      return this._pointerBeforeReferenceNode;\n    }\n  }]);\n\n  return NodeIteratorImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}