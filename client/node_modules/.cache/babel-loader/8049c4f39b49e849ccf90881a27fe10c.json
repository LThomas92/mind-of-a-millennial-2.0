{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _assertThisInitialized = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    closest = _require3.closest;\n\nvar _require4 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nvar HTMLSelectElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLSelectElementImpl, _HTMLElementImpl);\n\n  function HTMLSelectElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLSelectElementImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLSelectElementImpl).call(this, args, privateData));\n    _this._options = HTMLOptionsCollection.createImpl([], {\n      element: _assertThisInitialized(_this),\n      query: function query() {\n        // Customized domSymbolTree.treeToArray() clone.\n        var array = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = domSymbolTree.childrenIterator(_assertThisInitialized(_this))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var child = _step.value;\n\n            if (child._localName === \"option\") {\n              array.push(child);\n            } else if (child._localName === \"optgroup\") {\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = domSymbolTree.childrenIterator(child)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var childOfGroup = _step2.value;\n\n                  if (childOfGroup._localName === \"option\") {\n                    array.push(childOfGroup);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return array;\n      }\n    });\n    _this._selectedOptions = null; // lazy\n\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  }\n\n  _createClass(HTMLSelectElementImpl, [{\n    key: \"_formReset\",\n    value: function _formReset() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var option = _step3.value;\n          option._selectedness = option.hasAttribute(\"selected\");\n          option._dirtyness = false;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this._askedForAReset();\n    }\n  }, {\n    key: \"_askedForAReset\",\n    value: function _askedForAReset() {\n      if (this.hasAttribute(\"multiple\")) {\n        return;\n      }\n\n      var selected = this.options.filter(function (opt) {\n        return opt._selectedness;\n      });\n      var size = this._displaySize;\n\n      if (size === 1 && !selected.length) {\n        // select the first option that is not disabled\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this.options[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var option = _step4.value;\n            var disabled = option.hasAttribute(\"disabled\");\n            var parentNode = domSymbolTree.parent(option);\n\n            if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttribute(\"disabled\")) {\n              disabled = true;\n            }\n\n            if (!disabled) {\n              // (do not set dirty)\n              option._selectedness = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      } else if (selected.length >= 2) {\n        // select the last selected option\n        selected.forEach(function (option, index) {\n          option._selectedness = index === selected.length - 1;\n        });\n      }\n    }\n  }, {\n    key: \"_descendantAdded\",\n    value: function _descendantAdded(parent, child) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_descendantAdded\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_descendantRemoved\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name) {\n      if (name === \"multiple\" || name === \"size\") {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"item\",\n    value: function item(index) {\n      return this.options.item(index);\n    }\n  }, {\n    key: \"namedItem\",\n    value: function namedItem(name) {\n      return this.options.namedItem(name);\n    }\n  }, {\n    key: idlUtils.indexedSetNew,\n    value: function value(index, _value) {\n      return this.options[idlUtils.indexedSetNew](index, _value);\n    }\n  }, {\n    key: idlUtils.indexedSetExisting,\n    value: function value(index, _value2) {\n      return this.options[idlUtils.indexedSetExisting](index, _value2);\n    }\n  }, {\n    key: \"add\",\n    value: function add(opt, before) {\n      this.options.add(opt, before);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      if (arguments.length > 0) {\n        index = conversions.long(index, {\n          context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n        });\n        this.options.remove(index);\n      } else {\n        _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"remove\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      return this.hasAttribute(\"readonly\");\n    } // Constraint validation: If the element has its required attribute specified,\n    // and either none of the option elements in the select element's list of options\n    // have their selectedness set to true, or the only option element in the select\n    // element's list of options with its selectedness set to true is the placeholder\n    // label option, then the element is suffering from being missing.\n\n  }, {\n    key: \"_displaySize\",\n    get: function get() {\n      if (this.hasAttribute(\"size\")) {\n        var attr = this.getAttribute(\"size\"); // We don't allow hexadecimal numbers here.\n        // eslint-disable-next-line radix\n\n        var size = parseInt(attr, 10);\n\n        if (!isNaN(size) && size >= 0) {\n          return size;\n        }\n      }\n\n      return this.hasAttribute(\"multiple\") ? 4 : 1;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    }\n  }, {\n    key: \"selectedOptions\",\n    get: function get() {\n      var _this2 = this;\n\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return domSymbolTree.treeToArray(_this2, {\n            filter: function filter(node) {\n              return node._localName === \"option\" && node._selectedness === true;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      for (var i = 0; i < this.options.length; i++) {\n        if (this.options.item(i)._selectedness) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    set: function set(index) {\n      for (var i = 0; i < this.options.length; i++) {\n        this.options.item(i).selected = i === index;\n      }\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var i = this.selectedIndex;\n\n      if (this.options.length && i === -1) {\n        i = 0;\n      }\n\n      if (i === -1) {\n        return \"\";\n      }\n\n      return this.options.item(i).value;\n    },\n    set: function set(val) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.options[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var option = _step5.value;\n\n          if (option.value === val) {\n            option._selectedness = true;\n            option._dirtyness = true;\n          } else {\n            option._selectedness = false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return closest(this, \"form\");\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.hasAttribute(\"multiple\") ? \"select-multiple\" : \"select-one\";\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      return this.options[idlUtils.supportedPropertyIndices];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.options.length;\n    },\n    set: function set(value) {\n      this.options.length = value;\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this._validity) {\n        this._validity = ValidityState.createImpl(this, {\n          valueMissing: function valueMissing() {\n            if (!_this3.hasAttribute(\"required\")) {\n              return false;\n            }\n\n            var selectedOptionIndex = _this3.selectedIndex;\n            return selectedOptionIndex < 0 || selectedOptionIndex === 0 && _this3._hasPlaceholderOption;\n          }\n        });\n      }\n\n      return this._validity;\n    } // If a select element has a required attribute specified, does not have a multiple attribute\n    // specified, and has a display size of 1; and if the value of the first option element in the\n    // select element's list of options (if any) is the empty string, and that option element's parent\n    // node is the select element(and not an optgroup element), then that option is the select\n    // element's placeholder label option.\n    // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n\n  }, {\n    key: \"_hasPlaceholderOption\",\n    get: function get() {\n      return this.hasAttribute(\"required\") && !this.hasAttribute(\"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n    }\n  }]);\n\n  return HTMLSelectElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}