{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _model = require('../../model');\n\nvar _constants = require('../../util/constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ImageButton = function (_React$Component) {\n  _inherits(ImageButton, _React$Component);\n\n  function ImageButton(props) {\n    _classCallCheck(this, ImageButton);\n\n    var _this = _possibleConstructorReturn(this, (ImageButton.__proto__ || Object.getPrototypeOf(ImageButton)).call(this, props));\n\n    _this.onClick = _this.onClick.bind(_this);\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  _createClass(ImageButton, [{\n    key: 'onClick',\n    value: function onClick() {\n      this.input.value = null;\n      this.input.click();\n    }\n    /*\n    This is an example of how an image button can be added\n    on the side control. This Button handles the image addition locally\n    by creating an object url. You can override this method to upload\n    images to your server first, then get the image url in return and then\n    add to the editor.\n    */\n\n  }, {\n    key: 'onChange',\n    value: function onChange(e) {\n      // e.preventDefault();\n      var file = e.target.files[0];\n\n      if (file.type.indexOf('image/') === 0) {\n        // console.log(this.props.getEditorState());\n        // eslint-disable-next-line no-undef\n        var src = URL.createObjectURL(file);\n        this.props.setEditorState((0, _model.addNewBlock)(this.props.getEditorState(), _constants.Block.IMAGE, {\n          src: src\n        }));\n      }\n\n      this.props.close();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return _react2.default.createElement('button', {\n        className: 'md-sb-button md-sb-img-button',\n        type: 'button',\n        onClick: this.onClick,\n        title: 'Add an Image'\n      }, _react2.default.createElement('i', {\n        className: 'fa fa-image'\n      }), _react2.default.createElement('input', {\n        type: 'file',\n        accept: 'image/*',\n        ref: function ref(c) {\n          _this2.input = c;\n        },\n        onChange: this.onChange,\n        style: {\n          display: 'none'\n        }\n      }));\n    }\n  }]);\n\n  return ImageButton;\n}(_react2.default.Component);\n\nImageButton.propTypes = {\n  setEditorState: _propTypes2.default.func,\n  getEditorState: _propTypes2.default.func,\n  close: _propTypes2.default.func\n};\nexports.default = ImageButton;","map":null,"metadata":{},"sourceType":"script"}