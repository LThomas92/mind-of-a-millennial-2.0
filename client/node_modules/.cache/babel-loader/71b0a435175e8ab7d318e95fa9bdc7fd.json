{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar attributes = require(\"../attributes.js\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function NamedNodeMapImpl(args, privateData) {\n    _classCallCheck(this, NamedNodeMapImpl);\n\n    this._element = privateData.element;\n  }\n\n  _createClass(NamedNodeMapImpl, [{\n    key: \"item\",\n    value: function item(index) {\n      if (index >= this._attributeList.length) {\n        return null;\n      }\n\n      return this._attributeList[index];\n    }\n  }, {\n    key: \"getNamedItem\",\n    value: function getNamedItem(qualifiedName) {\n      return attributes.getAttributeByName(this._element, qualifiedName);\n    }\n  }, {\n    key: \"getNamedItemNS\",\n    value: function getNamedItemNS(namespace, localName) {\n      return attributes.getAttributeByNameNS(this._element, namespace, localName);\n    }\n  }, {\n    key: \"setNamedItem\",\n    value: function setNamedItem(attr) {\n      return attributes.setAttribute(this._element, attr);\n    }\n  }, {\n    key: \"setNamedItemNS\",\n    value: function setNamedItemNS(attr) {\n      return attributes.setAttribute(this._element, attr);\n    }\n  }, {\n    key: \"removeNamedItem\",\n    value: function removeNamedItem(qualifiedName) {\n      var attr = attributes.removeAttributeByName(this._element, qualifiedName);\n\n      if (attr === null) {\n        throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n      }\n\n      return attr;\n    }\n  }, {\n    key: \"removeNamedItemNS\",\n    value: function removeNamedItemNS(namespace, localName) {\n      var attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);\n\n      if (attr === null) {\n        throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n      }\n\n      return attr;\n    }\n  }, {\n    key: \"_attributeList\",\n    get: function get() {\n      return this._element._attributeList;\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      return this._attributeList.keys();\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._attributeList.length;\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      var names = new Set(this._attributeList.map(function (a) {\n        return a._qualifiedName;\n      }));\n      var el = this._element;\n\n      if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === \"html\") {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var name = _step.value;\n            var lowercaseName = name.toLowerCase();\n\n            if (lowercaseName !== name) {\n              names.delete(name);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return names;\n    }\n  }]);\n\n  return NamedNodeMapImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}