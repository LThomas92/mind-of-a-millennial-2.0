{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertBlob = require(\"./Blob.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar EventTarget = require(\"./EventTarget.js\");\n\nmodule.exports = {\n  createInterface: function createInterface() {\n    var defaultPrivateData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    function FileReader() {\n      if ((this instanceof FileReader ? this.constructor : void 0) === undefined) {\n        throw new TypeError(\"Failed to construct 'FileReader'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n      }\n\n      iface.setup(this);\n    }\n\n    Object.setPrototypeOf(FileReader.prototype, EventTarget.interface.prototype);\n    Object.setPrototypeOf(FileReader, EventTarget.interface);\n    Object.defineProperty(FileReader, \"prototype\", {\n      value: FileReader.prototype,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n\n    FileReader.prototype.readAsArrayBuffer = function readAsArrayBuffer(blob) {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsArrayBuffer' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl = this[impl]).readAsArrayBuffer.apply(_this$impl, args);\n    };\n\n    FileReader.prototype.readAsBinaryString = function readAsBinaryString(blob) {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsBinaryString' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsBinaryString' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl2 = this[impl]).readAsBinaryString.apply(_this$impl2, args);\n    };\n\n    FileReader.prototype.readAsText = function readAsText(blob) {\n      var _this$impl3;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsText' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsText' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n\n        if (_curArg !== undefined) {\n          _curArg = conversions[\"DOMString\"](_curArg, {\n            context: \"Failed to execute 'readAsText' on 'FileReader': parameter 2\"\n          });\n        }\n\n        args.push(_curArg);\n      }\n      return (_this$impl3 = this[impl]).readAsText.apply(_this$impl3, args);\n    };\n\n    FileReader.prototype.readAsDataURL = function readAsDataURL(blob) {\n      var _this$impl4;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsDataURL' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsDataURL' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl4 = this[impl]).readAsDataURL.apply(_this$impl4, args);\n    };\n\n    FileReader.prototype.abort = function abort() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].abort();\n    };\n\n    Object.defineProperty(FileReader.prototype, \"readyState\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"readyState\"];\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"result\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"result\"]);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"error\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"error\"]);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onloadstart\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onloadstart\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onloadstart\"] = V;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onprogress\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onprogress\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onprogress\"] = V;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onload\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onload\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onload\"] = V;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onabort\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onabort\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onabort\"] = V;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onerror\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onerror\"] = V;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onloadend\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onloadend\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onloadend\"] = V;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader, \"EMPTY\", {\n      value: 0,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"EMPTY\", {\n      value: 0,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader, \"LOADING\", {\n      value: 1,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"LOADING\", {\n      value: 1,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader, \"DONE\", {\n      value: 2,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"DONE\", {\n      value: 2,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, Symbol.toStringTag, {\n      value: \"FileReader\",\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    var iface = {\n      create: function create(constructorArgs, privateData) {\n        var obj = Object.create(FileReader.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return obj;\n      },\n      createImpl: function createImpl(constructorArgs, privateData) {\n        var obj = Object.create(FileReader.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return utils.implForWrapper(obj);\n      },\n      _internalSetup: function _internalSetup(obj) {\n        EventTarget._internalSetup(obj);\n      },\n      setup: function setup(obj, constructorArgs, privateData) {\n        if (!privateData) privateData = {};\n\n        for (var prop in defaultPrivateData) {\n          if (!(prop in privateData)) {\n            privateData[prop] = defaultPrivateData[prop];\n          }\n        }\n\n        privateData.wrapper = obj;\n\n        this._internalSetup(obj);\n\n        Object.defineProperty(obj, impl, {\n          value: new Impl.implementation(constructorArgs, privateData),\n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        obj[impl][utils.wrapperSymbol] = obj;\n\n        if (Impl.init) {\n          Impl.init(obj[impl], privateData);\n        }\n\n        return obj;\n      },\n      interface: FileReader,\n      expose: {\n        Window: {\n          FileReader: FileReader\n        },\n        Worker: {\n          FileReader: FileReader\n        }\n      }\n    }; // iface\n\n    return iface;\n  },\n  // createInterface\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'FileReader'.\"));\n  }\n}; // module.exports\n\nvar Impl = require(\"../file-api/FileReader-impl.js\");","map":null,"metadata":{},"sourceType":"script"}