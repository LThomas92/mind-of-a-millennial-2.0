{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar DOMException = require(\"domexception\");\n\nvar _require = require(\"../node-document-position\"),\n    DOCUMENT_POSITION_CONTAINS = _require.DOCUMENT_POSITION_CONTAINS,\n    DOCUMENT_POSITION_CONTAINED_BY = _require.DOCUMENT_POSITION_CONTAINED_BY;\n\nvar Element = require(\"../generated/Element\");\n\nvar Node = require(\"../generated/Node\");\n\nvar HTMLCollectionImpl = require(\"./HTMLCollection-impl\").implementation;\n\nexports.implementation =\n/*#__PURE__*/\nfunction (_HTMLCollectionImpl) {\n  _inherits(HTMLOptionsCollectionImpl, _HTMLCollectionImpl);\n\n  function HTMLOptionsCollectionImpl() {\n    _classCallCheck(this, HTMLOptionsCollectionImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLOptionsCollectionImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLOptionsCollectionImpl, [{\n    key: idlUtils.indexedSetNew,\n    value: function value(index, _value) {\n      if (_value === null) {\n        this.remove(index);\n        return;\n      }\n\n      this._update();\n\n      var length = this._list.length;\n      var n = index - length;\n\n      if (n > 0) {\n        var doc = this._element._ownerDocument;\n        var frag = doc.createDocumentFragment(); // Spec says n - 1, but n seems to be the right number here.\n\n        for (var i = 0; i < n; i++) {\n          var el = doc.createElement(\"option\");\n          frag.appendChild(el);\n        }\n\n        this._element.appendChild(frag);\n      }\n\n      if (n >= 0) {\n        this._element.appendChild(_value);\n      } else {\n        this._element.replaceChild(_value, this._list[index]);\n      }\n    }\n  }, {\n    key: idlUtils.indexedSetExisting,\n    value: function value(index, _value2) {\n      return this[idlUtils.indexedSetNew](index, _value2);\n    }\n  }, {\n    key: \"add\",\n    value: function add(element, before) {\n      if (this._element.compareDocumentPosition(element) & DOCUMENT_POSITION_CONTAINS) {\n        throw new DOMException(\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\");\n      }\n\n      if (Element.isImpl(before) && !(this._element.compareDocumentPosition(before) & DOCUMENT_POSITION_CONTAINED_BY)) {\n        throw new DOMException(\"The object can not be found here.\", \"NotFoundError\");\n      }\n\n      if (element === before) {\n        return;\n      }\n\n      var reference = null;\n\n      if (Node.isImpl(before)) {\n        reference = before;\n      } else if (typeof before === \"number\") {\n        this._update();\n\n        reference = this._list[before] || null;\n      }\n\n      var parent = reference !== null ? reference.parentNode : this._element;\n      parent.insertBefore(element, reference);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this._update();\n\n      if (this._list.length === 0) {\n        return;\n      }\n\n      if (index < 0 || index >= this._list.length) {\n        return;\n      }\n\n      var element = this._list[index];\n      element.parentNode.removeChild(element);\n    }\n  }, {\n    key: \"length\",\n    // inherits supported property indices\n    get: function get() {\n      this._update();\n\n      return this._list.length;\n    },\n    set: function set(value) {\n      this._update();\n\n      if (value > this._list.length) {\n        var doc = this._element._ownerDocument;\n\n        for (var i = this._list.length; i < value; i++) {\n          var el = doc.createElement(\"option\");\n\n          this._element.appendChild(el);\n        }\n      } else if (value < this._list.length) {\n        for (var _i = this._list.length - 1; _i >= value; _i--) {\n          var _el = this._list[_i];\n\n          this._element.removeChild(_el);\n        }\n      }\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      this._update();\n\n      var result = new Set();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var element = _step.value;\n          result.add(element.getAttribute(\"id\"));\n          result.add(element.getAttribute(\"name\"));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._element.selectedIndex;\n    },\n    set: function set(value) {\n      this._element.selectedIndex = value;\n    }\n  }]);\n\n  return HTMLOptionsCollectionImpl;\n}(HTMLCollectionImpl);","map":null,"metadata":{},"sourceType":"script"}