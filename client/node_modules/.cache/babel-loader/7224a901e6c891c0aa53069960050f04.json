{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar EventModifierInit = require(\"./EventModifierInit.js\");\n\nmodule.exports = {\n  convertInherit: function convertInherit(obj, ret) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    EventModifierInit.convertInherit(obj, ret, {\n      context: context\n    });\n    {\n      var key = \"changedTouches\";\n      var value = obj === undefined || obj === null ? undefined : obj[key];\n\n      if (value !== undefined) {\n        if (!utils.isObject(value)) {\n          throw new TypeError(context + \" has member changedTouches that\" + \" is not an iterable object.\");\n        } else {\n          var V = [];\n          var tmp = value;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var nextItem = _step.value;\n              nextItem = utils.tryImplForWrapper(nextItem);\n              V.push(nextItem);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          value = V;\n        }\n\n        ret[key] = value;\n      } else {\n        ret[key] = [];\n      }\n    }\n    {\n      var _key = \"targetTouches\";\n\n      var _value = obj === undefined || obj === null ? undefined : obj[_key];\n\n      if (_value !== undefined) {\n        if (!utils.isObject(_value)) {\n          throw new TypeError(context + \" has member targetTouches that\" + \" is not an iterable object.\");\n        } else {\n          var _V = [];\n          var _tmp = _value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _tmp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _nextItem = _step2.value;\n              _nextItem = utils.tryImplForWrapper(_nextItem);\n\n              _V.push(_nextItem);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          _value = _V;\n        }\n\n        ret[_key] = _value;\n      } else {\n        ret[_key] = [];\n      }\n    }\n    {\n      var _key2 = \"touches\";\n\n      var _value2 = obj === undefined || obj === null ? undefined : obj[_key2];\n\n      if (_value2 !== undefined) {\n        if (!utils.isObject(_value2)) {\n          throw new TypeError(context + \" has member touches that\" + \" is not an iterable object.\");\n        } else {\n          var _V2 = [];\n          var _tmp2 = _value2;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = _tmp2[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _nextItem2 = _step3.value;\n              _nextItem2 = utils.tryImplForWrapper(_nextItem2);\n\n              _V2.push(_nextItem2);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          _value2 = _V2;\n        }\n\n        ret[_key2] = _value2;\n      } else {\n        ret[_key2] = [];\n      }\n    }\n  },\n  convert: function convert(obj) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$context = _ref2.context,\n        context = _ref2$context === void 0 ? \"The provided value\" : _ref2$context;\n\n    if (obj !== undefined && typeof obj !== \"object\" && typeof obj !== \"function\") {\n      throw new TypeError(\"\".concat(context, \" is not an object.\"));\n    }\n\n    var ret = Object.create(null);\n    module.exports.convertInherit(obj, ret, {\n      context: context\n    });\n    return ret;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}