{"ast":null,"code":"'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer'); // Shorthands\n\n\nexports.parse = function parse(html, options) {\n  var parser = new Parser(options);\n  return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  var parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n  var serializer = new Serializer(node, options);\n  return serializer.serialize();\n}; // Tree adapters\n\n\nexports.treeAdapters = {\n  default: require('./tree_adapters/default'),\n  htmlparser2: require('./tree_adapters/htmlparser2')\n}; // Streaming\n// NOTE: streaming API is lazy loadable to enable bundling for platforms\n// that are different from Node.js.\n// See https://github.com/inikulin/parse5/issues/235.\n\nvar streamingAPI = {\n  ParserStream: './parser/parser_stream',\n  PlainTextConversionStream: './parser/plain_text_conversion_stream',\n  SerializerStream: './serializer/serializer_stream',\n  SAXParser: './sax'\n};\nObject.keys(streamingAPI).forEach(function (cls) {\n  Object.defineProperty(exports, cls, {\n    get: function get() {\n      try {\n        return require(streamingAPI[cls]);\n      } catch (e) {\n        throw new Error(cls + ' is supported only for Node.js.' + 'See https://github.com/inikulin/parse5/issues/235 for the details.');\n      }\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"script"}