{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server = _interopRequireDefault(require(\"react-dom/server\"));\n\nvar _draftJs = require(\"draft-js\");\n\nvar _encodeBlock = _interopRequireDefault(require(\"./encodeBlock\"));\n\nvar _blockEntities = _interopRequireDefault(require(\"./blockEntities\"));\n\nvar _blockInlineStyles = _interopRequireDefault(require(\"./blockInlineStyles\"));\n\nvar _accumulateFunction = _interopRequireDefault(require(\"./util/accumulateFunction\"));\n\nvar _blockTypeObjectFunction = _interopRequireDefault(require(\"./util/blockTypeObjectFunction\"));\n\nvar _getBlockTags = _interopRequireDefault(require(\"./util/getBlockTags\"));\n\nvar _getNestedBlockTags = _interopRequireDefault(require(\"./util/getNestedBlockTags\"));\n\nvar _defaultBlockHTML = _interopRequireDefault(require(\"./default/defaultBlockHTML\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // import Immutable from 'immutable'; // eslint-disable-line no-unused-vars\n\n\nvar defaultEntityToHTML = function defaultEntityToHTML(entity, originalText) {\n  return originalText;\n};\n\nvar convertToHTML = function convertToHTML(_ref) {\n  var _ref$styleToHTML = _ref.styleToHTML,\n      styleToHTML = _ref$styleToHTML === void 0 ? {} : _ref$styleToHTML,\n      _ref$blockToHTML = _ref.blockToHTML,\n      blockToHTML = _ref$blockToHTML === void 0 ? {} : _ref$blockToHTML,\n      _ref$entityToHTML = _ref.entityToHTML,\n      entityToHTML = _ref$entityToHTML === void 0 ? defaultEntityToHTML : _ref$entityToHTML;\n  return function (contentState) {\n    (0, _invariant[\"default\"])(contentState !== null && contentState !== undefined, 'Expected contentState to be non-null');\n    var getBlockHTML;\n\n    if (blockToHTML.__isMiddleware === true) {\n      getBlockHTML = blockToHTML((0, _blockTypeObjectFunction[\"default\"])(_defaultBlockHTML[\"default\"]));\n    } else {\n      getBlockHTML = (0, _accumulateFunction[\"default\"])((0, _blockTypeObjectFunction[\"default\"])(blockToHTML), (0, _blockTypeObjectFunction[\"default\"])(_defaultBlockHTML[\"default\"]));\n    }\n\n    var rawState = (0, _draftJs.convertToRaw)(contentState);\n    var listStack = [];\n    var result = rawState.blocks.map(function (block) {\n      var type = block.type,\n          depth = block.depth;\n      var closeNestTags = '';\n      var openNestTags = '';\n      var blockHTMLResult = getBlockHTML(block);\n\n      if (!blockHTMLResult) {\n        throw new Error(\"convertToHTML: missing HTML definition for block with type \".concat(block.type));\n      }\n\n      if (!blockHTMLResult.nest) {\n        // this block can't be nested, so reset all nesting if necessary\n        closeNestTags = listStack.reduceRight(function (string, nestedBlock) {\n          return string + (0, _getNestedBlockTags[\"default\"])(getBlockHTML(nestedBlock)).nestEnd;\n        }, '');\n        listStack = [];\n      } else {\n        while (depth + 1 !== listStack.length || type !== listStack[depth].type) {\n          if (depth + 1 === listStack.length) {\n            // depth is right but doesn't match type\n            var blockToClose = listStack[depth];\n            closeNestTags += (0, _getNestedBlockTags[\"default\"])(getBlockHTML(blockToClose)).nestEnd;\n            openNestTags += (0, _getNestedBlockTags[\"default\"])(getBlockHTML(block)).nestStart;\n            listStack[depth] = block;\n          } else if (depth + 1 < listStack.length) {\n            var _blockToClose = listStack[listStack.length - 1];\n            closeNestTags += (0, _getNestedBlockTags[\"default\"])(getBlockHTML(_blockToClose)).nestEnd;\n            listStack = listStack.slice(0, -1);\n          } else {\n            openNestTags += (0, _getNestedBlockTags[\"default\"])(getBlockHTML(block)).nestStart;\n            listStack.push(block);\n          }\n        }\n      }\n\n      var innerHTML = (0, _blockInlineStyles[\"default\"])((0, _blockEntities[\"default\"])((0, _encodeBlock[\"default\"])(block), rawState.entityMap, entityToHTML), styleToHTML);\n      var blockHTML = (0, _getBlockTags[\"default\"])(getBlockHTML(block));\n      var html;\n\n      if (typeof blockHTML === 'string') {\n        html = blockHTML;\n      } else {\n        html = blockHTML.start + innerHTML + blockHTML.end;\n      }\n\n      if (innerHTML.length === 0 && Object.prototype.hasOwnProperty.call(blockHTML, 'empty')) {\n        if (_react[\"default\"].isValidElement(blockHTML.empty)) {\n          html = _server[\"default\"].renderToStaticMarkup(blockHTML.empty);\n        } else {\n          html = blockHTML.empty;\n        }\n      }\n\n      return closeNestTags + openNestTags + html;\n    }).join('');\n    result = listStack.reduce(function (res, nestBlock) {\n      return res + (0, _getNestedBlockTags[\"default\"])(getBlockHTML(nestBlock)).nestEnd;\n    }, result);\n    return result;\n  };\n};\n\nvar _default = function _default() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 1 && Object.prototype.hasOwnProperty.call(args[0], '_map') && args[0].getBlockMap != null) {\n    // skip higher-order function and use defaults\n    return convertToHTML({}).apply(void 0, args);\n  }\n\n  return convertToHTML.apply(void 0, args);\n};\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}