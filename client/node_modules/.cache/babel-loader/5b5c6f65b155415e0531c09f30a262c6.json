{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertNode = require(\"./Node.js\").convert;\n\nvar isNode = require(\"./Node.js\").is;\n\nvar convertHTMLElement = require(\"./HTMLElement.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar Node = require(\"./Node.js\");\n\nvar GlobalEventHandlers = require(\"./GlobalEventHandlers.js\");\n\nvar NonElementParentNode = require(\"./NonElementParentNode.js\");\n\nvar ParentNode = require(\"./ParentNode.js\");\n\nfunction Document() {\n  if ((this instanceof Document ? this.constructor : void 0) === undefined) {\n    throw new TypeError(\"Failed to construct 'Document'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  iface.setup(this);\n}\n\nObject.setPrototypeOf(Document.prototype, Node.interface.prototype);\nObject.setPrototypeOf(Document, Node.interface);\nObject.defineProperty(Document, \"prototype\", {\n  value: Document.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDocument.prototype.getElementsByTagName = function getElementsByTagName(qualifiedName) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByTagName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByTagName' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl = this[impl]).getElementsByTagName.apply(_this$impl, args));\n};\n\nDocument.prototype.getElementsByTagNameNS = function getElementsByTagNameNS(namespace, localName) {\n  var _this$impl2;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getElementsByTagNameNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg = arguments[1];\n    _curArg = conversions[\"DOMString\"](_curArg, {\n      context: \"Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 2\"\n    });\n    args.push(_curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl2 = this[impl]).getElementsByTagNameNS.apply(_this$impl2, args));\n};\n\nDocument.prototype.getElementsByClassName = function getElementsByClassName(classNames) {\n  var _this$impl3;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByClassName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByClassName' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl3 = this[impl]).getElementsByClassName.apply(_this$impl3, args));\n};\n\nDocument.prototype.createElement = function createElement(localName) {\n  var _this$impl4;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createElement' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createElement' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl4 = this[impl]).createElement.apply(_this$impl4, args));\n};\n\nDocument.prototype.createElementNS = function createElementNS(namespace, qualifiedName) {\n  var _this$impl5;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'createElementNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'createElementNS' on 'Document': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg2 = arguments[1];\n    _curArg2 = conversions[\"DOMString\"](_curArg2, {\n      context: \"Failed to execute 'createElementNS' on 'Document': parameter 2\"\n    });\n    args.push(_curArg2);\n  }\n  return utils.tryWrapperForImpl((_this$impl5 = this[impl]).createElementNS.apply(_this$impl5, args));\n};\n\nDocument.prototype.createDocumentFragment = function createDocumentFragment() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].createDocumentFragment());\n};\n\nDocument.prototype.createTextNode = function createTextNode(data) {\n  var _this$impl6;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createTextNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createTextNode' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl6 = this[impl]).createTextNode.apply(_this$impl6, args));\n};\n\nDocument.prototype.createCDATASection = function createCDATASection(data) {\n  var _this$impl7;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createCDATASection' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createCDATASection' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl7 = this[impl]).createCDATASection.apply(_this$impl7, args));\n};\n\nDocument.prototype.createComment = function createComment(data) {\n  var _this$impl8;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createComment' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createComment' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl8 = this[impl]).createComment.apply(_this$impl8, args));\n};\n\nDocument.prototype.createProcessingInstruction = function createProcessingInstruction(target, data) {\n  var _this$impl9;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'createProcessingInstruction' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createProcessingInstruction' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg3 = arguments[1];\n    _curArg3 = conversions[\"DOMString\"](_curArg3, {\n      context: \"Failed to execute 'createProcessingInstruction' on 'Document': parameter 2\"\n    });\n    args.push(_curArg3);\n  }\n  return utils.tryWrapperForImpl((_this$impl9 = this[impl]).createProcessingInstruction.apply(_this$impl9, args));\n};\n\nDocument.prototype.importNode = function importNode(node) {\n  var _this$impl10;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'importNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertNode(curArg, {\n      context: \"Failed to execute 'importNode' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg4 = arguments[1];\n\n    if (_curArg4 !== undefined) {\n      _curArg4 = conversions[\"boolean\"](_curArg4, {\n        context: \"Failed to execute 'importNode' on 'Document': parameter 2\"\n      });\n    } else {\n      _curArg4 = false;\n    }\n\n    args.push(_curArg4);\n  }\n  return utils.tryWrapperForImpl((_this$impl10 = this[impl]).importNode.apply(_this$impl10, args));\n};\n\nDocument.prototype.adoptNode = function adoptNode(node) {\n  var _this$impl11;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'adoptNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertNode(curArg, {\n      context: \"Failed to execute 'adoptNode' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl11 = this[impl]).adoptNode.apply(_this$impl11, args));\n};\n\nDocument.prototype.createAttribute = function createAttribute(localName) {\n  var _this$impl12;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createAttribute' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createAttribute' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl12 = this[impl]).createAttribute.apply(_this$impl12, args));\n};\n\nDocument.prototype.createAttributeNS = function createAttributeNS(namespace, qualifiedName) {\n  var _this$impl13;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'createAttributeNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'createAttributeNS' on 'Document': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg5 = arguments[1];\n    _curArg5 = conversions[\"DOMString\"](_curArg5, {\n      context: \"Failed to execute 'createAttributeNS' on 'Document': parameter 2\"\n    });\n    args.push(_curArg5);\n  }\n  return utils.tryWrapperForImpl((_this$impl13 = this[impl]).createAttributeNS.apply(_this$impl13, args));\n};\n\nDocument.prototype.createEvent = function createEvent(_interface) {\n  var _this$impl14;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createEvent' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createEvent' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl14 = this[impl]).createEvent.apply(_this$impl14, args));\n};\n\nDocument.prototype.createNodeIterator = function createNodeIterator(root) {\n  var _this$impl15;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createNodeIterator' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertNode(curArg, {\n      context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg6 = arguments[1];\n\n    if (_curArg6 !== undefined) {\n      _curArg6 = conversions[\"unsigned long\"](_curArg6, {\n        context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 2\"\n      });\n    } else {\n      _curArg6 = 0xffffffff;\n    }\n\n    args.push(_curArg6);\n  }\n  {\n    var _curArg7 = arguments[2];\n\n    if (_curArg7 !== undefined) {\n      if (_curArg7 === null || _curArg7 === undefined) {\n        _curArg7 = null;\n      } else {\n        _curArg7 = utils.tryImplForWrapper(_curArg7);\n      }\n    } else {\n      _curArg7 = null;\n    }\n\n    args.push(_curArg7);\n  }\n  return utils.tryWrapperForImpl((_this$impl15 = this[impl]).createNodeIterator.apply(_this$impl15, args));\n};\n\nDocument.prototype.createTreeWalker = function createTreeWalker(root) {\n  var _this$impl16;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'createTreeWalker' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = convertNode(curArg, {\n      context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg8 = arguments[1];\n\n    if (_curArg8 !== undefined) {\n      _curArg8 = conversions[\"unsigned long\"](_curArg8, {\n        context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 2\"\n      });\n    } else {\n      _curArg8 = 0xffffffff;\n    }\n\n    args.push(_curArg8);\n  }\n  {\n    var _curArg9 = arguments[2];\n\n    if (_curArg9 !== undefined) {\n      if (_curArg9 === null || _curArg9 === undefined) {\n        _curArg9 = null;\n      } else {\n        _curArg9 = utils.tryImplForWrapper(_curArg9);\n      }\n    } else {\n      _curArg9 = null;\n    }\n\n    args.push(_curArg9);\n  }\n  return utils.tryWrapperForImpl((_this$impl16 = this[impl]).createTreeWalker.apply(_this$impl16, args));\n};\n\nDocument.prototype.getElementsByName = function getElementsByName(elementName) {\n  var _this$impl17;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByName' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl17 = this[impl]).getElementsByName.apply(_this$impl17, args));\n};\n\nDocument.prototype.open = function open() {\n  var _this$impl18;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'open' on 'Document': parameter 1\"\n      });\n    } else {\n      curArg = \"text/html\";\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg10 = arguments[1];\n\n    if (_curArg10 !== undefined) {\n      _curArg10 = conversions[\"DOMString\"](_curArg10, {\n        context: \"Failed to execute 'open' on 'Document': parameter 2\"\n      });\n    } else {\n      _curArg10 = \"\";\n    }\n\n    args.push(_curArg10);\n  }\n  return utils.tryWrapperForImpl((_this$impl18 = this[impl]).open.apply(_this$impl18, args));\n};\n\nDocument.prototype.close = function close() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].close();\n};\n\nDocument.prototype.write = function write() {\n  var _this$impl19;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'write' on 'Document': parameter \" + (i + 1)\n    });\n    args.push(curArg);\n  }\n\n  return (_this$impl19 = this[impl]).write.apply(_this$impl19, args);\n};\n\nDocument.prototype.writeln = function writeln() {\n  var _this$impl20;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'writeln' on 'Document': parameter \" + (i + 1)\n    });\n    args.push(curArg);\n  }\n\n  return (_this$impl20 = this[impl]).writeln.apply(_this$impl20, args);\n};\n\nDocument.prototype.hasFocus = function hasFocus() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].hasFocus();\n};\n\nDocument.prototype.clear = function clear() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].clear();\n};\n\nDocument.prototype.captureEvents = function captureEvents() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].captureEvents();\n};\n\nDocument.prototype.releaseEvents = function releaseEvents() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].releaseEvents();\n};\n\nDocument.prototype.getElementById = function getElementById(elementId) {\n  var _this$impl21;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementById' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementById' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl21 = this[impl]).getElementById.apply(_this$impl21, args));\n};\n\nDocument.prototype.prepend = function prepend() {\n  var _this$impl22;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'prepend' on 'Document': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl22 = this[impl]).prepend.apply(_this$impl22, args);\n};\n\nDocument.prototype.append = function append() {\n  var _this$impl23;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n\n  for (var i = 0; i < arguments.length; i++) {\n    var curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'append' on 'Document': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return (_this$impl23 = this[impl]).append.apply(_this$impl23, args);\n};\n\nDocument.prototype.querySelector = function querySelector(selectors) {\n  var _this$impl24;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'querySelector' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'querySelector' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl24 = this[impl]).querySelector.apply(_this$impl24, args));\n};\n\nDocument.prototype.querySelectorAll = function querySelectorAll(selectors) {\n  var _this$impl25;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'querySelectorAll' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'querySelectorAll' on 'Document': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl25 = this[impl]).querySelectorAll.apply(_this$impl25, args));\n};\n\nObject.defineProperty(Document.prototype, \"implementation\", {\n  get: function get() {\n    var _this = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"implementation\", function () {\n      return utils.tryWrapperForImpl(_this[impl][\"implementation\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"URL\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"URL\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"documentURI\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"documentURI\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"origin\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"origin\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"compatMode\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"compatMode\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"characterSet\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"characterSet\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"charset\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"charset\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"inputEncoding\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"inputEncoding\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"contentType\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"contentType\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"doctype\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"doctype\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"documentElement\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"documentElement\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"referrer\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"referrer\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"cookie\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"cookie\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'cookie' property on 'Document': The provided value\"\n    });\n    this[impl][\"cookie\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"lastModified\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"lastModified\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"readyState\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"readyState\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"title\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"title\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'title' property on 'Document': The provided value\"\n    });\n    this[impl][\"title\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"dir\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"dir\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'dir' property on 'Document': The provided value\"\n    });\n    this[impl][\"dir\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"body\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"body\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = convertHTMLElement(V, {\n        context: \"Failed to set the 'body' property on 'Document': The provided value\"\n      });\n    }\n\n    this[impl][\"body\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"head\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"head\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"images\", {\n  get: function get() {\n    var _this2 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"images\", function () {\n      return utils.tryWrapperForImpl(_this2[impl][\"images\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"embeds\", {\n  get: function get() {\n    var _this3 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"embeds\", function () {\n      return utils.tryWrapperForImpl(_this3[impl][\"embeds\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"plugins\", {\n  get: function get() {\n    var _this4 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"plugins\", function () {\n      return utils.tryWrapperForImpl(_this4[impl][\"plugins\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"links\", {\n  get: function get() {\n    var _this5 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"links\", function () {\n      return utils.tryWrapperForImpl(_this5[impl][\"links\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"forms\", {\n  get: function get() {\n    var _this6 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"forms\", function () {\n      return utils.tryWrapperForImpl(_this6[impl][\"forms\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"scripts\", {\n  get: function get() {\n    var _this7 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"scripts\", function () {\n      return utils.tryWrapperForImpl(_this7[impl][\"scripts\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"currentScript\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"currentScript\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"defaultView\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"defaultView\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"activeElement\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"activeElement\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onreadystatechange\", {\n  get: function get() {\n    return utils.tryWrapperForImpl(this[impl][\"onreadystatechange\"]);\n  },\n  set: function set(V) {\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onreadystatechange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"anchors\", {\n  get: function get() {\n    var _this8 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"anchors\", function () {\n      return utils.tryWrapperForImpl(_this8[impl][\"anchors\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"applets\", {\n  get: function get() {\n    var _this9 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"applets\", function () {\n      return utils.tryWrapperForImpl(_this9[impl][\"applets\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"styleSheets\", {\n  get: function get() {\n    var _this10 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"styleSheets\", function () {\n      return utils.tryWrapperForImpl(_this10[impl][\"styleSheets\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"hidden\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"hidden\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"visibilityState\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"visibilityState\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onvisibilitychange\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onvisibilitychange\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onvisibilitychange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onabort\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onabort\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onabort\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onauxclick\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onauxclick\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onauxclick\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onblur\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onblur\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onblur\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oncancel\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oncancel\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oncancel\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oncanplay\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oncanplay\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oncanplay\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oncanplaythrough\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oncanplaythrough\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oncanplaythrough\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onchange\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onchange\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onchange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onclick\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onclick\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onclick\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onclose\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onclose\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onclose\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oncontextmenu\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oncontextmenu\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oncontextmenu\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oncuechange\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oncuechange\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oncuechange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondblclick\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondblclick\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondblclick\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondrag\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondrag\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondrag\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondragend\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondragend\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondragend\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondragenter\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondragenter\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondragenter\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondragexit\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondragexit\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondragexit\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondragleave\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondragleave\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondragleave\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondragover\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondragover\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondragover\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondragstart\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondragstart\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondragstart\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondrop\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondrop\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondrop\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ondurationchange\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ondurationchange\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ondurationchange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onemptied\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onemptied\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onemptied\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onended\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onended\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onended\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onerror\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onerror\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onfocus\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onfocus\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onfocus\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oninput\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oninput\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oninput\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"oninvalid\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"oninvalid\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"oninvalid\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onkeydown\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onkeydown\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onkeydown\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onkeypress\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onkeypress\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onkeypress\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onkeyup\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onkeyup\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onkeyup\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onload\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onload\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onload\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onloadeddata\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onloadeddata\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onloadeddata\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onloadedmetadata\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onloadedmetadata\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onloadedmetadata\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onloadend\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onloadend\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onloadend\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onloadstart\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onloadstart\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onloadstart\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmousedown\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onmousedown\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmousedown\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmouseenter\", {\n  get: function get() {\n    return utils.tryWrapperForImpl(this[impl][\"onmouseenter\"]);\n  },\n  set: function set(V) {\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmouseenter\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmouseleave\", {\n  get: function get() {\n    return utils.tryWrapperForImpl(this[impl][\"onmouseleave\"]);\n  },\n  set: function set(V) {\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmouseleave\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmousemove\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onmousemove\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmousemove\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmouseout\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onmouseout\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmouseout\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmouseover\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onmouseover\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmouseover\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onmouseup\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onmouseup\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onmouseup\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onwheel\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onwheel\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onwheel\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onpause\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onpause\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onpause\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onplay\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onplay\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onplay\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onplaying\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onplaying\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onplaying\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onprogress\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onprogress\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onprogress\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onratechange\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onratechange\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onratechange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onreset\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onreset\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onreset\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onresize\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onresize\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onresize\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onscroll\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onscroll\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onscroll\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onsecuritypolicyviolation\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onsecuritypolicyviolation\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onsecuritypolicyviolation\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onseeked\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onseeked\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onseeked\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onseeking\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onseeking\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onseeking\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onselect\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onselect\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onselect\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onstalled\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onstalled\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onstalled\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onsubmit\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onsubmit\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onsubmit\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onsuspend\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onsuspend\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onsuspend\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ontimeupdate\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ontimeupdate\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ontimeupdate\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"ontoggle\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ontoggle\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"ontoggle\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onvolumechange\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onvolumechange\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onvolumechange\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"onwaiting\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"onwaiting\"]);\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = utils.tryImplForWrapper(V);\n    this[impl][\"onwaiting\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"children\", {\n  get: function get() {\n    var _this11 = this;\n\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"children\", function () {\n      return utils.tryWrapperForImpl(_this11[impl][\"children\"]);\n    });\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"firstElementChild\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"firstElementChild\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"lastElementChild\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"lastElementChild\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, \"childElementCount\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"childElementCount\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Document.prototype, Symbol.toStringTag, {\n  value: \"Document\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Document'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(Document.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(Document.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Node._internalSetup(obj);\n\n    Object.defineProperty(obj, \"location\", {\n      get: function get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(obj[impl][\"location\"]);\n      },\n      set: function set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        this.location.href = V;\n      },\n      enumerable: true,\n      configurable: false\n    });\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: Document,\n  expose: {\n    Window: {\n      Document: Document\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nGlobalEventHandlers._mixedIntoPredicates.push(module.exports.is);\n\nNonElementParentNode._mixedIntoPredicates.push(module.exports.is);\n\nParentNode._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/Document-impl.js\");","map":null,"metadata":{},"sourceType":"script"}