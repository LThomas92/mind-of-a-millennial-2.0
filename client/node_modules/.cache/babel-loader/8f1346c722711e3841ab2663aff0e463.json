{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertSelectionMode = require(\"./SelectionMode.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nfunction HTMLTextAreaElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLTextAreaElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLTextAreaElement, HTMLElement.interface);\nObject.defineProperty(HTMLTextAreaElement, \"prototype\", {\n  value: HTMLTextAreaElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nHTMLTextAreaElement.prototype.checkValidity = function checkValidity() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].checkValidity();\n};\n\nHTMLTextAreaElement.prototype.reportValidity = function reportValidity() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].reportValidity();\n};\n\nHTMLTextAreaElement.prototype.setCustomValidity = function setCustomValidity(error) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl = this[impl]).setCustomValidity.apply(_this$impl, args);\n};\n\nHTMLTextAreaElement.prototype.select = function select() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].select();\n};\n\nHTMLTextAreaElement.prototype.setRangeText = function setRangeText(replacement) {\n  var _this$impl2;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n\n  switch (arguments.length) {\n    case 1:\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      break;\n\n    case 2:\n      throw new TypeError(\"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': only \" + arguments.length + \" arguments present.\");\n      break;\n\n    case 3:\n      {\n        var _curArg = arguments[0];\n        _curArg = conversions[\"DOMString\"](_curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n        });\n        args.push(_curArg);\n      }\n      {\n        var _curArg2 = arguments[1];\n        _curArg2 = conversions[\"unsigned long\"](_curArg2, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2\"\n        });\n        args.push(_curArg2);\n      }\n      {\n        var _curArg3 = arguments[2];\n        _curArg3 = conversions[\"unsigned long\"](_curArg3, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3\"\n        });\n        args.push(_curArg3);\n      }\n      break;\n\n    default:\n      {\n        var _curArg4 = arguments[0];\n        _curArg4 = conversions[\"DOMString\"](_curArg4, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n        });\n        args.push(_curArg4);\n      }\n      {\n        var _curArg5 = arguments[1];\n        _curArg5 = conversions[\"unsigned long\"](_curArg5, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2\"\n        });\n        args.push(_curArg5);\n      }\n      {\n        var _curArg6 = arguments[2];\n        _curArg6 = conversions[\"unsigned long\"](_curArg6, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3\"\n        });\n        args.push(_curArg6);\n      }\n      {\n        var _curArg7 = arguments[3];\n\n        if (_curArg7 !== undefined) {\n          _curArg7 = convertSelectionMode(_curArg7, {\n            context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 4\"\n          });\n        } else {\n          _curArg7 = \"preserve\";\n        }\n\n        args.push(_curArg7);\n      }\n  }\n\n  return (_this$impl2 = this[impl]).setRangeText.apply(_this$impl2, args);\n};\n\nHTMLTextAreaElement.prototype.setSelectionRange = function setSelectionRange(start, end) {\n  var _this$impl3;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"unsigned long\"](curArg, {\n      context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg8 = arguments[1];\n    _curArg8 = conversions[\"unsigned long\"](_curArg8, {\n      context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 2\"\n    });\n    args.push(_curArg8);\n  }\n  {\n    var _curArg9 = arguments[2];\n\n    if (_curArg9 !== undefined) {\n      _curArg9 = conversions[\"DOMString\"](_curArg9, {\n        context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 3\"\n      });\n    }\n\n    args.push(_curArg9);\n  }\n  return (_this$impl3 = this[impl]).setSelectionRange.apply(_this$impl3, args);\n};\n\nObject.defineProperty(HTMLTextAreaElement.prototype, \"autocomplete\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"autocomplete\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'autocomplete' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"autocomplete\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"autofocus\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"autofocus\");\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'autofocus' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"autofocus\", \"\");\n    } else {\n      this.removeAttribute(\"autofocus\");\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"cols\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"cols\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'cols' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"cols\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"dirName\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"dirName\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'dirName' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"dirName\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"disabled\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"disabled\");\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'disabled' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"disabled\", \"\");\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"form\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"form\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"inputMode\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"inputMode\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'inputMode' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"inputMode\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"maxLength\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = parseInt(this.getAttribute(\"maxLength\"));\n    return isNaN(value) || value < -2147483648 || value > 2147483647 ? 0 : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"long\"](V, {\n      context: \"Failed to set the 'maxLength' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"maxLength\", String(V));\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"minLength\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = parseInt(this.getAttribute(\"minLength\"));\n    return isNaN(value) || value < -2147483648 || value > 2147483647 ? 0 : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"long\"](V, {\n      context: \"Failed to set the 'minLength' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"minLength\", String(V));\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"name\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"name\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'name' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"name\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"placeholder\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"placeholder\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'placeholder' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"placeholder\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"readOnly\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"readOnly\");\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'readOnly' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"readOnly\", \"\");\n    } else {\n      this.removeAttribute(\"readOnly\");\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"required\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"required\");\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'required' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"required\", \"\");\n    } else {\n      this.removeAttribute(\"required\");\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"rows\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"rows\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'rows' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"rows\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"wrap\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    var value = this.getAttribute(\"wrap\");\n    return value === null ? \"\" : value;\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'wrap' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"wrap\", V);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"type\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"type\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"defaultValue\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"defaultValue\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'defaultValue' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"defaultValue\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"value\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"value\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'value' property on 'HTMLTextAreaElement': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"value\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"textLength\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"textLength\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"willValidate\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"willValidate\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"validity\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"validity\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"validationMessage\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"validationMessage\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"labels\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"labels\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"selectionStart\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"selectionStart\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'selectionStart' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"selectionStart\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"selectionEnd\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"selectionEnd\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'selectionEnd' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"selectionEnd\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"selectionDirection\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"selectionDirection\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'selectionDirection' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"selectionDirection\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLTextAreaElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTextAreaElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLTextAreaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLTextAreaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLTextAreaElement,\n  expose: {\n    Window: {\n      HTMLTextAreaElement: HTMLTextAreaElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/HTMLTextAreaElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}