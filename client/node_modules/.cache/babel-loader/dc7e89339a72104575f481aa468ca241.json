{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertHTMLFormElement = require(\"./HTMLFormElement.js\").convert;\n\nvar isBlob = require(\"./Blob.js\").is;\n\nvar convertBlob = require(\"./Blob.js\").convert;\n\nvar impl = utils.implSymbol;\nvar IteratorPrototype = Object.create(utils.IteratorPrototype, _defineProperty({\n  next: {\n    value: function next() {\n      var internal = this[utils.iterInternalSymbol];\n      var target = internal.target,\n          kind = internal.kind,\n          index = internal.index;\n      var values = Array.from(target[impl]);\n      var len = values.length;\n\n      if (index >= len) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      var pair = values[index];\n      internal.index = index + 1;\n\n      var _pair$map = pair.map(utils.tryWrapperForImpl),\n          _pair$map2 = _slicedToArray(_pair$map, 2),\n          key = _pair$map2[0],\n          value = _pair$map2[1];\n\n      var result;\n\n      switch (kind) {\n        case \"key\":\n          result = key;\n          break;\n\n        case \"value\":\n          result = value;\n          break;\n\n        case \"key+value\":\n          result = [key, value];\n          break;\n      }\n\n      return {\n        value: result,\n        done: false\n      };\n    },\n    writable: true,\n    enumerable: true,\n    configurable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"FormDataIterator\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n}));\n\nfunction FormData() {\n  if ((this instanceof FormData ? this.constructor : void 0) === undefined) {\n    throw new TypeError(\"Failed to construct 'FormData'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = convertHTMLFormElement(curArg, {\n        context: \"Failed to construct 'FormData': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.defineProperty(FormData, \"prototype\", {\n  value: FormData.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(FormData.prototype, Symbol.iterator, {\n  writable: true,\n  enumerable: false,\n  configurable: true,\n  value: function entries() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"key+value\");\n  }\n});\n\nFormData.prototype.forEach = function forEach(callback) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'forEach' on 'FormData': 1 argument required, \" + \"but only 0 present.\");\n  }\n\n  if (typeof callback !== \"function\") {\n    throw new TypeError(\"Failed to execute 'forEach' on 'FormData': The callback provided \" + \"as parameter 1 is not a function.\");\n  }\n\n  var thisArg = arguments[1];\n  var pairs = Array.from(this[impl]);\n  var i = 0;\n\n  while (i < pairs.length) {\n    var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),\n        _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),\n        key = _pairs$i$map2[0],\n        value = _pairs$i$map2[1];\n\n    callback.call(thisArg, value, key, this);\n    pairs = Array.from(this[impl]);\n    i++;\n  }\n};\n\nFormData.prototype.append = function append(name, value) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'append' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n\n  switch (arguments.length) {\n    case 2:\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n\n        if (isBlob(_curArg)) {\n          {\n            var _curArg2 = arguments[1];\n            _curArg2 = convertBlob(_curArg2, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n            });\n            args.push(_curArg2);\n          }\n        } else {\n          {\n            var _curArg3 = arguments[1];\n            _curArg3 = conversions[\"USVString\"](_curArg3, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n            });\n            args.push(_curArg3);\n          }\n        }\n      }\n      break;\n\n    default:\n      {\n        var _curArg4 = arguments[0];\n        _curArg4 = conversions[\"USVString\"](_curArg4, {\n          context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n        });\n        args.push(_curArg4);\n      }\n      {\n        var _curArg5 = arguments[1];\n        _curArg5 = convertBlob(_curArg5, {\n          context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n        });\n        args.push(_curArg5);\n      }\n      {\n        var _curArg6 = arguments[2];\n\n        if (_curArg6 !== undefined) {\n          _curArg6 = conversions[\"USVString\"](_curArg6, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 3\"\n          });\n        }\n\n        args.push(_curArg6);\n      }\n  }\n\n  return (_this$impl = this[impl]).append.apply(_this$impl, args);\n};\n\nFormData.prototype.delete = function _delete(name) {\n  var _this$impl2;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'delete' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'delete' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl2 = this[impl]).delete.apply(_this$impl2, args);\n};\n\nFormData.prototype.get = function get(name) {\n  var _this$impl3;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'get' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'get' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl3 = this[impl]).get.apply(_this$impl3, args));\n};\n\nFormData.prototype.getAll = function getAll(name) {\n  var _this$impl4;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getAll' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'getAll' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl4 = this[impl]).getAll.apply(_this$impl4, args));\n};\n\nFormData.prototype.has = function has(name) {\n  var _this$impl5;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'has' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'has' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return (_this$impl5 = this[impl]).has.apply(_this$impl5, args);\n};\n\nFormData.prototype.set = function set(name, value) {\n  var _this$impl6;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'set' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n\n  switch (arguments.length) {\n    case 2:\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'FormData': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg7 = arguments[1];\n\n        if (isBlob(_curArg7)) {\n          {\n            var _curArg8 = arguments[1];\n            _curArg8 = convertBlob(_curArg8, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n            });\n            args.push(_curArg8);\n          }\n        } else {\n          {\n            var _curArg9 = arguments[1];\n            _curArg9 = conversions[\"USVString\"](_curArg9, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n            });\n            args.push(_curArg9);\n          }\n        }\n      }\n      break;\n\n    default:\n      {\n        var _curArg10 = arguments[0];\n        _curArg10 = conversions[\"USVString\"](_curArg10, {\n          context: \"Failed to execute 'set' on 'FormData': parameter 1\"\n        });\n        args.push(_curArg10);\n      }\n      {\n        var _curArg11 = arguments[1];\n        _curArg11 = convertBlob(_curArg11, {\n          context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n        });\n        args.push(_curArg11);\n      }\n      {\n        var _curArg12 = arguments[2];\n\n        if (_curArg12 !== undefined) {\n          _curArg12 = conversions[\"USVString\"](_curArg12, {\n            context: \"Failed to execute 'set' on 'FormData': parameter 3\"\n          });\n        }\n\n        args.push(_curArg12);\n      }\n  }\n\n  return (_this$impl6 = this[impl]).set.apply(_this$impl6, args);\n};\n\nFormData.prototype.entries = FormData.prototype[Symbol.iterator];\n\nFormData.prototype.keys = function keys() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return module.exports.createDefaultIterator(this, \"key\");\n};\n\nFormData.prototype.values = function values() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return module.exports.createDefaultIterator(this, \"value\");\n};\n\nObject.defineProperty(FormData.prototype, Symbol.toStringTag, {\n  value: \"FormData\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'FormData'.\"));\n  },\n  createDefaultIterator: function createDefaultIterator(target, kind) {\n    var iterator = Object.create(IteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n      value: {\n        target: target,\n        kind: kind,\n        index: 0\n      },\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    return iterator;\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: FormData,\n  expose: {\n    Window: {\n      FormData: FormData\n    },\n    Worker: {\n      FormData: FormData\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../xhr/FormData-impl.js\");","map":null,"metadata":{},"sourceType":"script"}