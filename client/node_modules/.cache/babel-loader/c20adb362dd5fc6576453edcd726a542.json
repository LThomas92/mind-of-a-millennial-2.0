{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"./internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"../node-type\"),\n    DOCUMENT_NODE = _require2.DOCUMENT_NODE;\n\nvar _require3 = require(\"./namespaces\"),\n    HTML_NS = _require3.HTML_NS; // All these operate on and return impls, not wrappers!\n\n\nexports.closest = function (e, localName) {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === HTML_NS) {\n      return e;\n    }\n\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.isConnected = function (node) {\n  while (node) {\n    if (node.nodeType === DOCUMENT_NODE) {\n      return true;\n    }\n\n    node = domSymbolTree.parent(node);\n  }\n\n  return false;\n};\n\nexports.childrenByHTMLLocalName = function (parent, localName) {\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS;\n    }\n  });\n};\n\nexports.descendantsByHTMLLocalName = function (parent, localName) {\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS && node !== parent;\n    }\n  });\n};\n\nexports.childrenByHTMLLocalNames = function (parent, localNamesSet) {\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS;\n    }\n  });\n};\n\nexports.descendantsByHTMLLocalNames = function (parent, localNamesSet) {\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS && node !== parent;\n    }\n  });\n};\n\nexports.firstChildWithHTMLLocalName = function (parent, localName) {\n  var iterator = domSymbolTree.childrenIterator(parent);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterator[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var child = _step.value;\n\n      if (child._localName === localName && child._namespaceURI === HTML_NS) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n};\n\nexports.firstChildWithHTMLLocalNames = function (parent, localNamesSet) {\n  var iterator = domSymbolTree.childrenIterator(parent);\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = iterator[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var child = _step2.value;\n\n      if (localNamesSet.has(child._localName) && child._namespaceURI === HTML_NS) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return null;\n};\n\nexports.firstDescendantWithHTMLLocalName = function (parent, localName) {\n  var iterator = domSymbolTree.treeIterator(parent);\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = iterator[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var descendant = _step3.value;\n\n      if (descendant._localName === localName && descendant._namespaceURI === HTML_NS) {\n        return descendant;\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"script"}