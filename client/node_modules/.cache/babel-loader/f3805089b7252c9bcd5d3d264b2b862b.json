{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar NodeImpl = require(\"./Node-impl\").implementation;\n\nvar NonElementParentNodeImpl = require(\"./NonElementParentNode-impl\").implementation;\n\nvar ParentNodeImpl = require(\"./ParentNode-impl\").implementation;\n\nvar DocumentFragmentImpl =\n/*#__PURE__*/\nfunction (_NodeImpl) {\n  _inherits(DocumentFragmentImpl, _NodeImpl);\n\n  function DocumentFragmentImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, DocumentFragmentImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DocumentFragmentImpl).call(this, args, privateData));\n    _this.nodeType = NODE_TYPE.DOCUMENT_FRAGMENT_NODE;\n    return _this;\n  } // This is implemented separately for Document (which has a _ids cache) and DocumentFragment (which does not).\n\n\n  _createClass(DocumentFragmentImpl, [{\n    key: \"getElementById\",\n    value: function getElementById(id) {\n      if (id === \"\") {\n        return null;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = domSymbolTree.treeIterator(this)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var descendant = _step.value;\n\n          if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, \"id\") === id) {\n            return descendant;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return DocumentFragmentImpl;\n}(NodeImpl);\n\nmixin(DocumentFragmentImpl.prototype, NonElementParentNodeImpl.prototype);\nmixin(DocumentFragmentImpl.prototype, ParentNodeImpl.prototype);\nmodule.exports = {\n  implementation: DocumentFragmentImpl\n};","map":null,"metadata":{},"sourceType":"script"}