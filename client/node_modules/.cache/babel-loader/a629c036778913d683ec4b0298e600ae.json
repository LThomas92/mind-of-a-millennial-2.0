{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _Object$definePropert;\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\nvar IteratorPrototype = Object.create(utils.IteratorPrototype, _defineProperty({\n  next: {\n    value: function next() {\n      var internal = this[utils.iterInternalSymbol];\n      var target = internal.target,\n          kind = internal.kind,\n          index = internal.index;\n      var values = Array.from(target[impl]);\n      var len = values.length;\n\n      if (index >= len) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      var pair = values[index];\n      internal.index = index + 1;\n\n      var _pair$map = pair.map(utils.tryWrapperForImpl),\n          _pair$map2 = _slicedToArray(_pair$map, 2),\n          key = _pair$map2[0],\n          value = _pair$map2[1];\n\n      var result;\n\n      switch (kind) {\n        case \"key\":\n          result = key;\n          break;\n\n        case \"value\":\n          result = value;\n          break;\n\n        case \"key+value\":\n          result = [key, value];\n          break;\n      }\n\n      return {\n        value: result,\n        done: false\n      };\n    },\n    writable: true,\n    enumerable: true,\n    configurable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"URLSearchParams Iterator\",\n  configurable: true\n}));\n\nvar URLSearchParams =\n/*#__PURE__*/\nfunction () {\n  function URLSearchParams() {\n    _classCallCheck(this, URLSearchParams);\n\n    var args = [];\n    {\n      var curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        if (utils.isObject(curArg)) {\n          if (curArg[Symbol.iterator] !== undefined) {\n            if (!utils.isObject(curArg)) {\n              throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\");\n            } else {\n              var V = [];\n              var tmp = curArg;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var nextItem = _step.value;\n\n                  if (!utils.isObject(nextItem)) {\n                    throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \" is not an iterable object.\");\n                  } else {\n                    var _V = [];\n                    var _tmp = nextItem;\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                      for (var _iterator2 = _tmp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _nextItem = _step2.value;\n                        _nextItem = conversions[\"USVString\"](_nextItem, {\n                          context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\"\n                        });\n\n                        _V.push(_nextItem);\n                      }\n                    } catch (err) {\n                      _didIteratorError2 = true;\n                      _iteratorError2 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                          _iterator2.return();\n                        }\n                      } finally {\n                        if (_didIteratorError2) {\n                          throw _iteratorError2;\n                        }\n                      }\n                    }\n\n                    nextItem = _V;\n                  }\n\n                  V.push(nextItem);\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              curArg = V;\n            }\n          } else {\n            if (!utils.isObject(curArg)) {\n              throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\");\n            } else {\n              var result = Object.create(null);\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n\n              try {\n                for (var _iterator3 = Reflect.ownKeys(curArg)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  var key = _step3.value;\n                  var desc = Object.getOwnPropertyDescriptor(curArg, key);\n\n                  if (desc && desc.enumerable) {\n                    var typedKey = key;\n                    var typedValue = curArg[key];\n                    typedKey = conversions[\"USVString\"](typedKey, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\"\n                    });\n                    typedValue = conversions[\"USVString\"](typedValue, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\"\n                    });\n                    result[typedKey] = typedValue;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n\n              curArg = result;\n            }\n          }\n        } else {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to construct 'URLSearchParams': parameter 1\"\n          });\n        }\n      } else {\n        curArg = \"\";\n      }\n\n      args.push(curArg);\n    }\n    return iface.setup(Object.create((this instanceof URLSearchParams ? this.constructor : void 0).prototype), args);\n  }\n\n  _createClass(URLSearchParams, [{\n    key: \"append\",\n    value: function append(name, value) {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n        _curArg = conversions[\"USVString\"](_curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\"\n        });\n        args.push(_curArg);\n      }\n      return (_this$impl = this[impl]).append.apply(_this$impl, args);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl2 = this[impl]).delete.apply(_this$impl2, args);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _this$impl3;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl3 = this[impl]).get.apply(_this$impl3, args);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      var _this$impl4;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl4 = this[impl]).getAll.apply(_this$impl4, args));\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      var _this$impl5;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl5 = this[impl]).has.apply(_this$impl5, args);\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      var _this$impl6;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg2 = arguments[1];\n        _curArg2 = conversions[\"USVString\"](_curArg2, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\"\n        });\n        args.push(_curArg2);\n      }\n      return (_this$impl6 = this[impl]).set.apply(_this$impl6, args);\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].sort();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].toString();\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return module.exports.createDefaultIterator(this, \"key\");\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return module.exports.createDefaultIterator(this, \"value\");\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return module.exports.createDefaultIterator(this, \"key+value\");\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, \" + \"but only 0 present.\");\n      }\n\n      if (typeof callback !== \"function\") {\n        throw new TypeError(\"Failed to execute 'forEach' on 'iterable': The callback provided \" + \"as parameter 1 is not a function.\");\n      }\n\n      var thisArg = arguments[1];\n      var pairs = Array.from(this[impl]);\n      var i = 0;\n\n      while (i < pairs.length) {\n        var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),\n            _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),\n            key = _pairs$i$map2[0],\n            value = _pairs$i$map2[1];\n\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[impl]);\n        i++;\n      }\n    }\n  }]);\n\n  return URLSearchParams;\n}();\n\nObject.defineProperties(URLSearchParams.prototype, (_Object$definePropert = {\n  append: {\n    enumerable: true\n  },\n  delete: {\n    enumerable: true\n  },\n  get: {\n    enumerable: true\n  },\n  getAll: {\n    enumerable: true\n  },\n  has: {\n    enumerable: true\n  },\n  set: {\n    enumerable: true\n  },\n  sort: {\n    enumerable: true\n  },\n  toString: {\n    enumerable: true\n  },\n  keys: {\n    enumerable: true\n  },\n  values: {\n    enumerable: true\n  },\n  entries: {\n    enumerable: true\n  },\n  forEach: {\n    enumerable: true\n  }\n}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n  value: \"URLSearchParams\",\n  configurable: true\n}), _defineProperty(_Object$definePropert, Symbol.iterator, {\n  value: URLSearchParams.prototype.entries,\n  configurable: true,\n  writable: true\n}), _Object$definePropert));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var isMixedInto = _step4.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var isMixedInto = _step5.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'URLSearchParams'.\"));\n  },\n  createDefaultIterator: function createDefaultIterator(target, kind) {\n    var iterator = Object.create(IteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n      value: {\n        target: target,\n        kind: kind,\n        index: 0\n      },\n      configurable: true\n    });\n    return iterator;\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(URLSearchParams.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(URLSearchParams.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: URLSearchParams,\n  expose: {\n    Window: {\n      URLSearchParams: URLSearchParams\n    },\n    Worker: {\n      URLSearchParams: URLSearchParams\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"./URLSearchParams-impl.js\");","map":null,"metadata":{},"sourceType":"script"}