{"ast":null,"code":"\"use strict\";\n\nvar attributes = require(\"./attributes\");\n\nvar _require = require(\"./helpers/internal-constants\"),\n    cloningSteps = _require.cloningSteps,\n    domSymbolTree = _require.domSymbolTree;\n\nvar NODE_TYPE = require(\"./node-type\");\n\nvar orderedSetParse = require(\"./helpers/ordered-set\").parse;\n\nvar _require2 = require(\"./helpers/strings\"),\n    asciiCaseInsensitiveMatch = _require2.asciiCaseInsensitiveMatch,\n    asciiLowercase = _require2.asciiLowercase;\n\nvar _require3 = require(\"./helpers/namespaces\"),\n    HTML_NS = _require3.HTML_NS,\n    XMLNS_NS = _require3.XMLNS_NS;\n\nvar HTMLCollection = require(\"./generated/HTMLCollection\");\n\nmodule.exports.clone = function (node, document, cloneChildren) {\n  if (document === undefined) {\n    document = node._ownerDocument;\n  }\n\n  var copy;\n\n  switch (node.nodeType) {\n    case NODE_TYPE.DOCUMENT_NODE:\n      // Can't use a simple Document.createImpl because of circular dependency issues :-/\n      copy = document.implementation.createDocument(null, \"\", null);\n      copy._encoding = node._encoding;\n      copy.contentType = node.contentType;\n      copy._URL = node._URL;\n      copy.origin = node.origin;\n      copy._parsingMode = node._parsingMode;\n      break;\n\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      copy = document.implementation.createDocumentType(node.name, node.publicId, node.systemId);\n      break;\n\n    case NODE_TYPE.ELEMENT_NODE:\n      copy = document._createElementWithCorrectElementInterface(node._localName, node._namespaceURI);\n      copy._prefix = node._prefix;\n      attributes.copyAttributeList(node, copy);\n      break;\n\n    case NODE_TYPE.TEXT_NODE:\n      copy = document.createTextNode(node._data);\n      break;\n\n    case NODE_TYPE.CDATA_SECTION_NODE:\n      copy = document.createCDATASection(node._data);\n      break;\n\n    case NODE_TYPE.COMMENT_NODE:\n      copy = document.createComment(node._data);\n      break;\n\n    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      copy = document.createProcessingInstruction(node.target, node._data);\n      break;\n\n    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      copy = document.createDocumentFragment();\n      break;\n  }\n\n  if (node[cloningSteps]) {\n    node[cloningSteps](copy, node, document, cloneChildren);\n  }\n\n  if (cloneChildren) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = domSymbolTree.childrenIterator(node)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var child = _step.value;\n        var childCopy = module.exports.clone(child, document, true);\n        copy.appendChild(childCopy);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return copy;\n}; // For the following, memoization is not applied here since the memoized results are stored on `this`.\n\n\nmodule.exports.listOfElementsWithClassNames = function (classNames, root) {\n  // https://dom.spec.whatwg.org/#concept-getElementsByClassName\n  var classes = orderedSetParse(classNames);\n\n  if (classes.size === 0) {\n    return HTMLCollection.createImpl([], {\n      element: root,\n      query: function query() {\n        return [];\n      }\n    });\n  }\n\n  return HTMLCollection.createImpl([], {\n    element: root,\n    query: function query() {\n      var isQuirksMode = root._ownerDocument.compatMode === \"BackCompat\";\n      return domSymbolTree.treeToArray(root, {\n        filter: function filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          var classList = node.classList;\n\n          if (isQuirksMode) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              var _loop = function _loop() {\n                var className = _step2.value;\n\n                if (!classList.tokenSet.some(function (cur) {\n                  return asciiCaseInsensitiveMatch(cur, className);\n                })) {\n                  return {\n                    v: false\n                  };\n                }\n              };\n\n              for (var _iterator2 = classes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var _ret = _loop();\n\n                if (typeof _ret === \"object\") return _ret.v;\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          } else {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = classes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var className = _step3.value;\n\n                if (!classList.tokenSet.contains(className)) {\n                  return false;\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          return true;\n        }\n      });\n    }\n  });\n};\n\nmodule.exports.listOfElementsWithQualifiedName = function (qualifiedName, root) {\n  // https://dom.spec.whatwg.org/#concept-getelementsbytagname\n  if (qualifiedName === \"*\") {\n    return HTMLCollection.createImpl([], {\n      element: root,\n      query: function query() {\n        return domSymbolTree.treeToArray(root, {\n          filter: function filter(node) {\n            return node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root;\n          }\n        });\n      }\n    });\n  }\n\n  if (root._ownerDocument._parsingMode === \"html\") {\n    var lowerQualifiedName = asciiLowercase(qualifiedName);\n    return HTMLCollection.createImpl([], {\n      element: root,\n      query: function query() {\n        return domSymbolTree.treeToArray(root, {\n          filter: function filter(node) {\n            if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n              return false;\n            }\n\n            if (node._namespaceURI === HTML_NS) {\n              return node._qualifiedName === lowerQualifiedName;\n            }\n\n            return node._qualifiedName === qualifiedName;\n          }\n        });\n      }\n    });\n  }\n\n  return HTMLCollection.createImpl([], {\n    element: root,\n    query: function query() {\n      return domSymbolTree.treeToArray(root, {\n        filter: function filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          return node._qualifiedName === qualifiedName;\n        }\n      });\n    }\n  });\n};\n\nmodule.exports.listOfElementsWithNamespaceAndLocalName = function (namespace, localName, root) {\n  // https://dom.spec.whatwg.org/#concept-getelementsbytagnamens\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  if (namespace === \"*\" && localName === \"*\") {\n    return HTMLCollection.createImpl([], {\n      element: root,\n      query: function query() {\n        return domSymbolTree.treeToArray(root, {\n          filter: function filter(node) {\n            return node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root;\n          }\n        });\n      }\n    });\n  }\n\n  if (namespace === \"*\") {\n    return HTMLCollection.createImpl([], {\n      element: root,\n      query: function query() {\n        return domSymbolTree.treeToArray(root, {\n          filter: function filter(node) {\n            if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n              return false;\n            }\n\n            return node._localName === localName;\n          }\n        });\n      }\n    });\n  }\n\n  if (localName === \"*\") {\n    return HTMLCollection.createImpl([], {\n      element: root,\n      query: function query() {\n        return domSymbolTree.treeToArray(root, {\n          filter: function filter(node) {\n            if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n              return false;\n            }\n\n            return node._namespaceURI === namespace;\n          }\n        });\n      }\n    });\n  }\n\n  return HTMLCollection.createImpl([], {\n    element: root,\n    query: function query() {\n      return domSymbolTree.treeToArray(root, {\n        filter: function filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          return node._localName === localName && node._namespaceURI === namespace;\n        }\n      });\n    }\n  });\n}; // https://dom.spec.whatwg.org/#converting-nodes-into-a-node\n// create a fragment (or just return a node for one item)\n\n\nexports.convertNodesIntoNode = function (document, nodes) {\n  if (nodes.length === 1) {\n    // note: I'd prefer to check instanceof Node rather than string\n    return typeof nodes[0] === \"string\" ? document.createTextNode(nodes[0]) : nodes[0];\n  }\n\n  var fragment = document.createDocumentFragment();\n\n  for (var i = 0; i < nodes.length; i++) {\n    fragment.appendChild(typeof nodes[i] === \"string\" ? document.createTextNode(nodes[i]) : nodes[i]);\n  }\n\n  return fragment;\n}; // https://dom.spec.whatwg.org/#locate-a-namespace-prefix\n\n\nexports.locateNamespacePrefix = function (element, namespace) {\n  if (element._namespaceURI === namespace && element._prefix !== null) {\n    return element._prefix;\n  }\n\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = element._attributeList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var attribute = _step4.value;\n\n      if (attribute._namespacePrefix === \"xmlns\" && attribute._value === namespace) {\n        return attribute._localName;\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  if (element.parentElement !== null) {\n    return exports.locateNamespacePrefix(element.parentElement, namespace);\n  }\n\n  return null;\n}; // https://dom.spec.whatwg.org/#locate-a-namespace\n\n\nexports.locateNamespace = function (node, prefix) {\n  switch (node.nodeType) {\n    case NODE_TYPE.ELEMENT_NODE:\n      {\n        if (node._namespaceURI !== null && node._prefix === prefix) {\n          return node._namespaceURI;\n        }\n\n        if (prefix === null) {\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = node._attributeList[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var attribute = _step5.value;\n\n              if (attribute._namespace === XMLNS_NS && attribute._namespacePrefix === null && attribute._localName === \"xmlns\") {\n                return attribute._value !== \"\" ? attribute._value : null;\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        } else {\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = node._attributeList[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var _attribute = _step6.value;\n\n              if (_attribute._namespace === XMLNS_NS && _attribute._namespacePrefix === \"xmlns\" && _attribute._localName === prefix) {\n                return _attribute._value !== \"\" ? _attribute._value : null;\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        }\n\n        if (node.parentElement === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node.parentElement, prefix);\n      }\n\n    case NODE_TYPE.DOCUMENT_NODE:\n      {\n        if (node.documentElement === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node.documentElement, prefix);\n      }\n\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      {\n        return null;\n      }\n\n    case NODE_TYPE.ATTRIBUTE_NODE:\n      {\n        if (node._element === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node._element, prefix);\n      }\n\n    default:\n      {\n        if (node.parentElement === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node.parentElement, prefix);\n      }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}