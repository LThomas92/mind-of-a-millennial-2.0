{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCursorBetweenLink = exports.addNewBlockAt = exports.updateDataOfBlock = exports.resetBlockWithType = exports.addNewBlock = exports.getCurrentBlock = exports.getDefaultBlockData = undefined;\n\nvar _immutable = require('immutable');\n\nvar _draftJs = require('draft-js');\n\nvar _constants = require('../util/constants');\n/*\nReturns default block-level metadata for various block type. Empty object otherwise.\n*/\n\n\nvar getDefaultBlockData = exports.getDefaultBlockData = function getDefaultBlockData(blockType) {\n  var initialData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (blockType) {\n    case _constants.Block.TODO:\n      return {\n        checked: false\n      };\n\n    default:\n      return initialData;\n  }\n};\n/*\nGet currentBlock in the editorState.\n*/\n\n\nvar getCurrentBlock = exports.getCurrentBlock = function getCurrentBlock(editorState) {\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n  var block = contentState.getBlockForKey(selectionState.getStartKey());\n  return block;\n};\n/*\nAdds a new block (currently replaces an empty block) at the current cursor position\nof the given `newType`.\n*/\n\n\nvar addNewBlock = exports.addNewBlock = function addNewBlock(editorState) {\n  var newType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.Block.UNSTYLED;\n  var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var selectionState = editorState.getSelection();\n\n  if (!selectionState.isCollapsed()) {\n    return editorState;\n  }\n\n  var contentState = editorState.getCurrentContent();\n  var key = selectionState.getStartKey();\n  var blockMap = contentState.getBlockMap();\n  var currentBlock = getCurrentBlock(editorState);\n\n  if (!currentBlock) {\n    return editorState;\n  }\n\n  if (currentBlock.getLength() === 0) {\n    if (currentBlock.getType() === newType) {\n      return editorState;\n    }\n\n    var newBlock = currentBlock.merge({\n      type: newType,\n      data: getDefaultBlockData(newType, initialData)\n    });\n    var newContentState = contentState.merge({\n      blockMap: blockMap.set(key, newBlock),\n      selectionAfter: selectionState\n    });\n    return _draftJs.EditorState.push(editorState, newContentState, 'change-block-type');\n  }\n\n  return editorState;\n};\n/*\nChanges the block type of the current block.\n*/\n\n\nvar resetBlockWithType = exports.resetBlockWithType = function resetBlockWithType(editorState) {\n  var newType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.Block.UNSTYLED;\n  var overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n  var key = selectionState.getStartKey();\n  var blockMap = contentState.getBlockMap();\n  var block = blockMap.get(key);\n  var newBlock = block.mergeDeep(overrides, {\n    type: newType,\n    data: getDefaultBlockData(newType)\n  });\n  var newContentState = contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: 0,\n      focusOffset: 0\n    })\n  });\n  return _draftJs.EditorState.push(editorState, newContentState, 'change-block-type');\n};\n/*\nUpdate block-level metadata of the given `block` to the `newData`/\n*/\n\n\nvar updateDataOfBlock = exports.updateDataOfBlock = function updateDataOfBlock(editorState, block, newData) {\n  var contentState = editorState.getCurrentContent();\n  var newBlock = block.merge({\n    data: newData\n  });\n  var newContentState = contentState.merge({\n    blockMap: contentState.getBlockMap().set(block.getKey(), newBlock)\n  });\n  return _draftJs.EditorState.push(editorState, newContentState, 'change-block-data');\n}; // const BEFORE = -1;\n// const AFTER = 1;\n\n/*\nUsed from [react-rte](https://github.com/sstur/react-rte/blob/master/src/lib/insertBlockAfter.js)\nby [sstur](https://github.com/sstur)\n*/\n\n\nvar addNewBlockAt = exports.addNewBlockAt = function addNewBlockAt(editorState, pivotBlockKey) {\n  var newBlockType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.Block.UNSTYLED;\n  var initialData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var content = editorState.getCurrentContent();\n  var blockMap = content.getBlockMap();\n  var block = blockMap.get(pivotBlockKey);\n\n  if (!block) {\n    throw new Error('The pivot key - ' + pivotBlockKey + ' is not present in blockMap.');\n  }\n\n  var blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n    return v === block;\n  });\n  var blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n    return v === block;\n  }).rest();\n  var newBlockKey = (0, _draftJs.genKey)();\n  var newBlock = new _draftJs.ContentBlock({\n    key: newBlockKey,\n    type: newBlockType,\n    text: '',\n    characterList: (0, _immutable.List)(),\n    depth: 0,\n    data: (0, _immutable.Map)(getDefaultBlockData(newBlockType, initialData))\n  });\n  var newBlockMap = blocksBefore.concat([[pivotBlockKey, block], [newBlockKey, newBlock]], blocksAfter).toOrderedMap();\n  var selection = editorState.getSelection();\n  var newContent = content.merge({\n    blockMap: newBlockMap,\n    selectionBefore: selection,\n    selectionAfter: selection.merge({\n      anchorKey: newBlockKey,\n      anchorOffset: 0,\n      focusKey: newBlockKey,\n      focusOffset: 0,\n      isBackward: false\n    })\n  });\n  return _draftJs.EditorState.push(editorState, newContent, 'split-block');\n};\n/**\n * Check whether the cursor is between entity of type LINK\n */\n\n\nvar isCursorBetweenLink = exports.isCursorBetweenLink = function isCursorBetweenLink(editorState) {\n  var ret = null;\n  var selection = editorState.getSelection();\n  var content = editorState.getCurrentContent();\n  var currentBlock = getCurrentBlock(editorState);\n\n  if (!currentBlock) {\n    return ret;\n  }\n\n  var entityKey = null;\n  var blockKey = null;\n\n  if (currentBlock.getType() !== _constants.Block.ATOMIC && selection.isCollapsed()) {\n    if (currentBlock.getLength() > 0) {\n      if (selection.getAnchorOffset() > 0) {\n        entityKey = currentBlock.getEntityAt(selection.getAnchorOffset() - 1);\n        blockKey = currentBlock.getKey();\n\n        if (entityKey !== null) {\n          var entity = content.getEntity(entityKey);\n\n          if (entity.getType() === _constants.Entity.LINK) {\n            ret = {\n              entityKey: entityKey,\n              blockKey: blockKey,\n              url: entity.getData().url\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return ret;\n};","map":null,"metadata":{},"sourceType":"script"}