{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar DOMException = require(\"domexception\");\n\nvar Event = require(\"../generated/Event\");\n\nvar FileList = require(\"../generated/FileList\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree,\n    cloningSteps = _require2.cloningSteps;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    closest = _require3.closest;\n\nvar _require4 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nvar _require5 = require(\"../helpers/form-controls\"),\n    isDisabled = _require5.isDisabled,\n    isValidEmailAddress = _require5.isValidEmailAddress,\n    isValidAbsoluteURL = _require5.isValidAbsoluteURL,\n    sanitizeValueByType = _require5.sanitizeValueByType;\n\nvar _require6 = require(\"../helpers/strings\"),\n    parseFloatingPointNumber = _require6.parseFloatingPointNumber,\n    asciiCaseInsensitiveMatch = _require6.asciiCaseInsensitiveMatch,\n    splitOnCommas = _require6.splitOnCommas;\n\nvar _require7 = require(\"../helpers/dates-and-times\"),\n    parseDateString = _require7.parseDateString,\n    parseLocalDateAndTimeString = _require7.parseLocalDateAndTimeString,\n    parseMonthString = _require7.parseMonthString,\n    parseTimeString = _require7.parseTimeString,\n    parseWeekString = _require7.parseWeekString;\n\nvar filesSymbol = Symbol(\"files\");\nvar selectAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\", \"email\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"color\", \"file\", \"number\"]);\nvar variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\"]);\nvar maxMinStepTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"datetime\"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\n\nvar applicableTypesForAttribute = {\n  max: maxMinStepTypes,\n  min: maxMinStepTypes,\n  step: maxMinStepTypes,\n  pattern: new Set([\"text\", \"search\", \"tel\", \"url\", \"email\", \"password\"])\n};\n\nfunction allowSelect(type) {\n  return selectAllowedTypes.has(type.toLowerCase());\n}\n\nfunction allowVariableLengthSelection(type) {\n  return variableLengthSelectionAllowedTypes.has(type.toLowerCase());\n}\n\nvar valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nvar valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n\n  if (type === \"file\") {\n    return \"filename\";\n  }\n\n  return \"value\";\n} // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\n\n\nfunction getUTCMs(year) {\n  var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n\n  var d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nvar dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\nvar convertStringToNumberByTypeMap = new Map([[// https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n\"date\", function (input) {\n  var date = parseDateString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  return getUTCMs(date.year, date.month, date.day);\n}], [// https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n\"month\", function (input) {\n  var date = parseMonthString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  return (date.year - 1970) * 12 + (date.month - 1);\n}], [// https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n\"week\", function (input) {\n  var date = parseWeekString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  var dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n\n  var dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n  return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n}], [// https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n\"time\", function (input) {\n  var time = parseTimeString(input);\n\n  if (time === null) {\n    return NaN;\n  }\n\n  return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n}], [// https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n\"datetime-local\", function (input) {\n  var dateAndTime = parseLocalDateAndTimeString(input);\n\n  if (dateAndTime === null) {\n    return NaN;\n  }\n\n  var _dateAndTime$date = dateAndTime.date,\n      year = _dateAndTime$date.year,\n      month = _dateAndTime$date.month,\n      day = _dateAndTime$date.day,\n      _dateAndTime$time = dateAndTime.time,\n      hour = _dateAndTime$time.hour,\n      minute = _dateAndTime$time.minute,\n      second = _dateAndTime$time.second,\n      millisecond = _dateAndTime$time.millisecond; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n\n  return getUTCMs(year, month, day, hour, minute, second, millisecond);\n}], // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n[\"number\", parseFloatingPointNumber], // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n[\"range\", parseFloatingPointNumber]]);\n\nvar HTMLInputElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLInputElementImpl, _HTMLElementImpl);\n\n  function HTMLInputElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLInputElementImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLInputElementImpl).call(this, args, privateData));\n    _this._selectionStart = _this._selectionEnd = 0;\n    _this._selectionDirection = \"none\";\n    _this._value = null;\n    _this._dirtyValue = false;\n    _this._checkedness = false;\n    _this._dirtyCheckedness = false; // This is used to implement the canceled activation steps for radio inputs:\n    // \"The canceled activation steps consist of setting the checkedness and the element's indeterminate IDL\n    // attribute back to the values they had before the pre-click activation steps were run.\"\n\n    _this._preCheckedRadioState = null;\n    _this.indeterminate = false;\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n\n\n  _createClass(HTMLInputElementImpl, [{\n    key: \"_getValue\",\n    value: function _getValue() {\n      return this._value;\n    }\n  }, {\n    key: \"_preClickActivationSteps\",\n    value: function _preClickActivationSteps() {\n      if (this.type === \"checkbox\") {\n        this.checked = !this.checked;\n      } else if (this.type === \"radio\") {\n        this._preCheckedRadioState = this.checked;\n        this.checked = true;\n      }\n    }\n  }, {\n    key: \"_canceledActivationSteps\",\n    value: function _canceledActivationSteps() {\n      if (this.type === \"checkbox\") {\n        this.checked = !this.checked;\n      } else if (this.type === \"radio\") {\n        if (this._preCheckedRadioState !== null) {\n          this.checked = this._preCheckedRadioState;\n          this._preCheckedRadioState = null;\n        }\n      }\n    }\n  }, {\n    key: \"_activationBehavior\",\n    value: function _activationBehavior() {\n      if (isDisabled(this)) {\n        return;\n      }\n\n      if (this.type === \"checkbox\" || this.type === \"radio\" && !this._preCheckedRadioState) {\n        var inputEvent = Event.createImpl([\"input\", {\n          isTrusted: true,\n          bubbles: true,\n          cancelable: true\n        }], {});\n        this.dispatchEvent(inputEvent);\n        var changeEvent = Event.createImpl([\"change\", {\n          bubbles: true,\n          cancelable: true\n        }], {});\n        this.dispatchEvent(changeEvent);\n      } else if (this.type === \"submit\") {\n        var form = this.form;\n\n        if (form) {\n          form._doSubmit();\n        }\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name) {\n      var wrapper = idlUtils.wrapperForImpl(this);\n\n      if (!this._dirtyValue && name === \"value\") {\n        this._value = sanitizeValueByType(this, wrapper.defaultValue);\n      }\n\n      if (!this._dirtyCheckedness && name === \"checked\") {\n        this._checkedness = wrapper.defaultChecked;\n\n        if (this._checkedness) {\n          this._removeOtherRadioCheckedness();\n        }\n      }\n\n      if (name === \"name\" || name === \"type\") {\n        if (this._checkedness) {\n          this._removeOtherRadioCheckedness();\n        }\n      }\n\n      _get(_getPrototypeOf(HTMLInputElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_formReset\",\n    value: function _formReset() {\n      var wrapper = idlUtils.wrapperForImpl(this);\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n      this._dirtyValue = false;\n      this._checkedness = wrapper.defaultChecked;\n      this._dirtyCheckedness = false;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"_changedFormOwner\",\n    value: function _changedFormOwner() {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"_removeOtherRadioCheckedness\",\n    value: function _removeOtherRadioCheckedness() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._otherRadioGroupElements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var radioGroupElement = _step.value;\n          radioGroupElement._checkedness = false;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_isRadioGroupChecked\",\n    value: function _isRadioGroupChecked() {\n      if (this.checked) {\n        return true;\n      }\n\n      return this._otherRadioGroupElements.some(function (radioGroupElement) {\n        return radioGroupElement.checked;\n      });\n    }\n  }, {\n    key: \"_dispatchSelectEvent\",\n    value: function _dispatchSelectEvent() {\n      var event = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n      event.initEvent(\"select\", true, true);\n      this.dispatchEvent(event);\n    }\n  }, {\n    key: \"_getValueLength\",\n    value: function _getValueLength() {\n      return typeof this.value === \"string\" ? this.value.length : 0;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      if (!allowSelect(this.type)) {\n        return;\n      }\n\n      this._selectionStart = 0;\n      this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(start, end, dir) {\n      if (!allowVariableLengthSelection(this.type)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this._selectionEnd = Math.min(end, this._getValueLength());\n      this._selectionStart = Math.min(start, this._selectionEnd);\n      this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"setRangeText\",\n    value: function setRangeText(repl, start, end) {\n      var selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"preserve\";\n\n      if (!allowVariableLengthSelection(this.type)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (arguments.length < 2) {\n        start = this._selectionStart;\n        end = this._selectionEnd;\n      } else if (start > end) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      start = Math.min(start, this._getValueLength());\n      end = Math.min(end, this._getValueLength());\n      var val = this.value;\n      var selStart = this._selectionStart;\n      var selEnd = this._selectionEnd;\n      this.value = val.slice(0, start) + repl + val.slice(end);\n      var newEnd = start + this.value.length;\n\n      if (selectionMode === \"select\") {\n        this.setSelectionRange(start, newEnd);\n      } else if (selectionMode === \"start\") {\n        this.setSelectionRange(start, start);\n      } else if (selectionMode === \"end\") {\n        this.setSelectionRange(newEnd, newEnd);\n      } else {\n        // preserve\n        var delta = repl.length - (end - start);\n\n        if (selStart > end) {\n          selStart += delta;\n        } else if (selStart > start) {\n          selStart = start;\n        }\n\n        if (selEnd > end) {\n          selEnd += delta;\n        } else if (selEnd > start) {\n          selEnd = newEnd;\n        }\n\n        this.setSelectionRange(selStart, selEnd);\n      }\n    }\n  }, {\n    key: \"_attributeApplies\",\n    value: function _attributeApplies(attribute) {\n      return applicableTypesForAttribute[attribute].has(this.type);\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n      // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n      // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n      var willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n\n      var readOnly = this.hasAttribute(\"readonly\"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n\n      return willNotValidateTypes.has(this.type) || readOnly;\n    }\n  }, {\n    key: cloningSteps,\n    value: function value(copy, node) {\n      copy._value = node._value;\n      copy._checkedness = node._checkedness;\n      copy._dirtyValue = node._dirtyValue;\n      copy._dirtyCheckedness = node._dirtyCheckedness;\n    }\n  }, {\n    key: \"_convertStringToNumber\",\n    get: function get() {\n      return convertStringToNumberByTypeMap.get(this.type);\n    }\n  }, {\n    key: \"_otherRadioGroupElements\",\n    get: function get() {\n      var wrapper = idlUtils.wrapperForImpl(this);\n      var root = this._radioButtonGroupRoot;\n\n      if (!root) {\n        return [];\n      }\n\n      var result = [];\n      var name = wrapper.name.toLowerCase();\n      var descendants = domSymbolTree.treeIterator(root);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = descendants[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var candidate = _step2.value;\n\n          if (candidate._radioButtonGroupRoot !== root) {\n            continue;\n          }\n\n          var candidateWrapper = idlUtils.wrapperForImpl(candidate);\n\n          if (!candidateWrapper.name || candidateWrapper.name.toLowerCase() !== name) {\n            continue;\n          }\n\n          if (candidate !== this) {\n            result.push(candidate);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_radioButtonGroupRoot\",\n    get: function get() {\n      var wrapper = idlUtils.wrapperForImpl(this);\n\n      if (this.type !== \"radio\" || !wrapper.name) {\n        return null;\n      }\n\n      var e = domSymbolTree.parent(this);\n\n      while (e) {\n        // root node of this home sub tree\n        // or the form element we belong to\n        if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n          return e;\n        }\n\n        e = domSymbolTree.parent(e);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return closest(this, \"form\");\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checkedness;\n    },\n    set: function set(checked) {\n      this._checkedness = Boolean(checked);\n      this._dirtyCheckedness = true;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      switch (valueAttributeMode(this.type)) {\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n        case \"value\":\n          return this._value !== null ? this._value : \"\";\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n\n        case \"default\":\n          {\n            var attr = this.getAttribute(\"value\");\n            return attr !== null ? attr : \"\";\n          }\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n        case \"default/on\":\n          {\n            var _attr = this.getAttribute(\"value\");\n\n            return _attr !== null ? _attr : \"on\";\n          }\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n        case \"filename\":\n          return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n\n        default:\n          throw new Error(\"jsdom internal error: unknown value attribute mode\");\n      }\n    },\n    set: function set(val) {\n      switch (valueAttributeMode(this.type)) {\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n        case \"value\":\n          {\n            var oldValue = this._value;\n\n            if (val === null) {\n              this._value = null;\n            } else {\n              this._value = sanitizeValueByType(this, String(val));\n            }\n\n            this._dirtyValue = true;\n\n            if (oldValue !== this._value) {\n              this._selectionStart = 0;\n              this._selectionEnd = 0;\n              this._selectionDirection = \"none\";\n            }\n\n            break;\n          }\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n        case \"default\":\n        case \"default/on\":\n          this.setAttribute(\"value\", val);\n          break;\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n        case \"filename\":\n          if (val === \"\") {\n            this.files.length = 0;\n          } else {\n            throw new DOMException(\"This input element accepts a filename, which may only be programmatically set to \" + \"the empty string.\", \"InvalidStateError\");\n          }\n\n          break;\n\n        default:\n          throw new Error(\"jsdom internal error: unknown value attribute mode\");\n      }\n    }\n  }, {\n    key: \"files\",\n    get: function get() {\n      if (this.type === \"file\") {\n        this[filesSymbol] = this[filesSymbol] || FileList.createImpl();\n      } else {\n        this[filesSymbol] = null;\n      }\n\n      return this[filesSymbol];\n    },\n    set: function set(value) {\n      if (this.type === \"file\" && value !== null) {\n        this[filesSymbol] = value;\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      var type = this.getAttribute(\"type\");\n      return type ? type.toLowerCase() : \"text\";\n    },\n    set: function set(type) {\n      this.setAttribute(\"type\", type);\n    }\n  }, {\n    key: \"selectionStart\",\n    get: function get() {\n      if (!allowVariableLengthSelection(this.type)) {\n        return null;\n      }\n\n      return this._selectionStart;\n    },\n    set: function set(start) {\n      if (!allowVariableLengthSelection(this.type)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n    }\n  }, {\n    key: \"selectionEnd\",\n    get: function get() {\n      if (!allowVariableLengthSelection(this.type)) {\n        return null;\n      }\n\n      return this._selectionEnd;\n    },\n    set: function set(end) {\n      if (!allowVariableLengthSelection(this.type)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n    }\n  }, {\n    key: \"selectionDirection\",\n    get: function get() {\n      if (!allowVariableLengthSelection(this.type)) {\n        return null;\n      }\n\n      return this._selectionDirection;\n    },\n    set: function set(dir) {\n      if (!allowVariableLengthSelection(this.type)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n    }\n  }, {\n    key: \"maxLength\",\n    set: function set(value) {\n      if (value < 0) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      this.setAttribute(\"maxlength\", String(value));\n    },\n    get: function get() {\n      if (!this.hasAttribute(\"maxlength\")) {\n        return 524288; // stole this from chrome\n      }\n\n      return parseInt(this.getAttribute(\"maxlength\"));\n    }\n  }, {\n    key: \"minLength\",\n    set: function set(value) {\n      if (value < 0) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      this.setAttribute(\"minlength\", String(value));\n    },\n    get: function get() {\n      if (!this.hasAttribute(\"minlength\")) {\n        return 0;\n      }\n\n      return parseInt(this.getAttribute(\"minlength\"));\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (!this.hasAttribute(\"size\")) {\n        return 20;\n      }\n\n      return parseInt(this.getAttribute(\"size\"));\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      this.setAttribute(\"size\", String(value));\n    }\n  }, {\n    key: \"src\",\n    get: function get() {\n      return conversions.USVString(this.getAttribute(\"src\"));\n    },\n    set: function set(value) {\n      this.setAttribute(\"src\", value);\n    } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n\n  }, {\n    key: \"_minimum\",\n    get: function get() {\n      var min = this._defaultMinimum;\n      var attr = this.getAttribute(\"min\");\n      var convertStringToNumber = this._convertStringToNumber;\n\n      if (attr !== null && convertStringToNumber !== undefined) {\n        var parsed = convertStringToNumber(attr);\n\n        if (!isNaN(parsed)) {\n          min = parsed;\n        }\n      }\n\n      return min;\n    }\n  }, {\n    key: \"_maximum\",\n    get: function get() {\n      var max = this._defaultMaximum;\n      var attr = this.getAttribute(\"max\");\n      var convertStringToNumber = this._convertStringToNumber;\n\n      if (attr !== null && convertStringToNumber !== undefined) {\n        var parsed = convertStringToNumber(attr);\n\n        if (!isNaN(parsed)) {\n          max = parsed;\n        }\n      }\n\n      return max;\n    }\n  }, {\n    key: \"_defaultMinimum\",\n    get: function get() {\n      if (this.type === \"range\") {\n        return 0;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_defaultMaximum\",\n    get: function get() {\n      if (this.type === \"range\") {\n        return 100;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_parsedValue\",\n    get: function get() {\n      var converter = this._convertStringToNumber;\n\n      if (converter !== undefined) {\n        return converter(this.value);\n      }\n\n      return this.value;\n    } // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n\n  }, {\n    key: \"_step\",\n    get: function get() {\n      var step = this._defaultStep;\n\n      if (this.hasAttribute(\"step\") && !asciiCaseInsensitiveMatch(this.getAttribute(\"step\"), \"any\")) {\n        var parsedStep = parseFloatingPointNumber(this.getAttribute(\"step\"));\n\n        if (!isNaN(parsedStep) && parsedStep > 0) {\n          step = parsedStep;\n        }\n      }\n\n      return step;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n\n  }, {\n    key: \"_stepScaleFactor\",\n    get: function get() {\n      var dayInMilliseconds = 24 * 60 * 60 * 1000;\n\n      switch (this.type) {\n        case \"week\":\n          return 7 * dayInMilliseconds;\n\n        case \"date\":\n          return dayInMilliseconds;\n\n        case \"datetime-local\":\n        case \"datetime\":\n        case \"time\":\n          return 1000;\n      }\n\n      return 1;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n\n  }, {\n    key: \"_defaultStep\",\n    get: function get() {\n      if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n        return 60;\n      }\n\n      return 1;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n\n  }, {\n    key: \"_stepBase\",\n    get: function get() {\n      var _this2 = this;\n\n      var parseAttribute = function parseAttribute(attributeName) {\n        return parseFloatingPointNumber(_this2.getAttribute(attributeName));\n      };\n\n      if (this.hasAttribute(\"min\")) {\n        var min = parseAttribute(\"min\");\n\n        if (!isNaN(min)) {\n          return min;\n        }\n      }\n\n      if (this.hasAttribute(\"value\")) {\n        var value = parseAttribute(\"value\");\n\n        if (!isNaN(value)) {\n          return value;\n        }\n      }\n\n      return this._defaultStepBase;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n\n  }, {\n    key: \"_defaultStepBase\",\n    get: function get() {\n      if (this.type === \"week\") {\n        // The start of week 1970-W01\n        return 259200000;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this._validity) {\n        this._validity = ValidityState.createImpl(this, {\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n          valueMissing: function valueMissing() {\n            if (!_this3.hasAttribute(\"required\")) {\n              return false;\n            }\n\n            if (_this3.type === \"checkbox\") {\n              // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n              // Constraint validation: If the element is required and its checkedness is\n              // false, then the element is suffering from being missing.\n              return !_this3.checked;\n            } else if (_this3.type === \"radio\") {\n              // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n              // Constraint validation: If an element in the radio button group is required,\n              // and all of the input elements in the radio button group have a checkedness\n              // that is false, then the element is suffering from being missing.\n              return !_this3._isRadioGroupChecked();\n            }\n\n            return _this3.value === \"\";\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n          // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n          // to be set to false.\n          tooLong: function tooLong() {\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n          tooShort: function tooShort() {\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n          // https://html.spec.whatwg.org/multipage/input.html#attr-input-max\n          rangeOverflow: function rangeOverflow() {\n            return _this3._attributeApplies(\"max\") && _this3._maximum !== null && _this3._parsedValue > _this3._maximum;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n          // https://html.spec.whatwg.org/multipage/input.html#attr-input-min\n          rangeUnderflow: function rangeUnderflow() {\n            return _this3._attributeApplies(\"min\") && _this3._minimum !== null && _this3._parsedValue < _this3._minimum;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n          patternMismatch: function patternMismatch() {\n            if (!_this3.hasAttribute(\"pattern\") || !_this3._attributeApplies(\"pattern\") || _this3.value === \"\") {\n              return false;\n            }\n\n            var regExp;\n\n            try {\n              regExp = new RegExp(_this3.getAttribute(\"pattern\"), \"u\");\n            } catch (e) {\n              return false;\n            }\n\n            if (_this3.type === \"email\" && _this3.hasAttribute(\"multiple\")) {\n              return splitOnCommas(_this3.value).every(function (value) {\n                return regExp.test(value);\n              });\n            }\n\n            return !regExp.test(_this3.value);\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n          // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n          stepMismatch: function stepMismatch() {\n            // Constraint validation: When the element has an allowed value step, and the result of applying\n            // the algorithm to convert a string to a number to the string given by the element's value is a\n            // number, and that number subtracted from the step base is not an integral multiple of the\n            // allowed value step, the element is suffering from a step mismatch.\n            if (!_this3._attributeApplies(\"step\")) {\n              return false;\n            }\n\n            var step = parseFloatingPointNumber(_this3.getAttribute(\"step\"));\n\n            if (isNaN(step) || step <= 0) {\n              return false;\n            }\n\n            var number = _this3._parsedValue;\n\n            if (isNaN(number) || _this3.value === \"\") {\n              return false;\n            }\n\n            if (_this3._type === \"month\") {\n              number = parseMonthString(_this3.value).month - 1;\n            }\n\n            return number % (_this3._stepBase - _this3._step * _this3._stepScaleFactor) !== 0;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n          typeMismatch: function typeMismatch() {\n            if (_this3.value === \"\") {\n              return false;\n            }\n\n            if (_this3.type === \"email\") {\n              // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n              // Constraint validation [multiple=false]: While the value of the element is neither the empty\n              // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n              // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n              // the element is suffering from a type mismatch.\n              return !isValidEmailAddress(_this3.value, _this3.hasAttribute(\"multiple\"));\n            } else if (_this3.type === \"url\") {\n              // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n              // Constraint validation: While the value of the element is neither the empty string\n              // nor a valid absolute URL, the element is suffering from a type mismatch.\n              return !isValidAbsoluteURL(_this3.value);\n            }\n\n            return false;\n          }\n        });\n      }\n\n      return this._validity;\n    }\n  }]);\n\n  return HTMLInputElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}