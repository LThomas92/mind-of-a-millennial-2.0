{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar _require = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function HTMLHyperlinkElementUtilsImpl() {\n    _classCallCheck(this, HTMLHyperlinkElementUtilsImpl);\n  }\n\n  _createClass(HTMLHyperlinkElementUtilsImpl, [{\n    key: \"_htmlHyperlinkElementUtilsSetup\",\n    value: function _htmlHyperlinkElementUtilsSetup() {\n      this.url = null;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.href;\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        var href = this.getAttribute(\"href\");\n        return href === null ? \"\" : href;\n      }\n\n      return whatwgURL.serializeURL(url);\n    },\n    set: function set(v) {\n      this.setAttribute(\"href\", v);\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeURLOrigin(this.url);\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \":\";\n      }\n\n      return this.url.scheme + \":\";\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v + \":\", {\n        url: this.url,\n        stateOverride: \"scheme start\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \"\";\n      }\n\n      return this.url.username;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.setTheUsername(url, v);\n      updateHref(this);\n    }\n  }, {\n    key: \"password\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return \"\";\n      }\n\n      return url.password;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.setThePassword(url, v);\n      updateHref(this);\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null) {\n        return \"\";\n      }\n\n      if (url.port === null) {\n        return whatwgURL.serializeHost(url.host);\n      }\n\n      return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"host\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeHost(url.host);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"hostname\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.port === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      if (v === \"\") {\n        url.port = null;\n      } else {\n        whatwgURL.basicURLParse(v, {\n          url: url,\n          stateOverride: \"port\"\n        });\n      }\n\n      updateHref(this);\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return \"\";\n      }\n\n      if (url.cannotBeABaseURL) {\n        return url.path[0];\n      }\n\n      return \"/\" + url.path.join(\"/\");\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      url.path = [];\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"path start\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.query === null || url.query === \"\") {\n        return \"\";\n      }\n\n      return \"?\" + url.query;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return;\n      }\n\n      if (v === \"\") {\n        url.query = null;\n      } else {\n        var input = v[0] === \"?\" ? v.substring(1) : v;\n        url.query = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: url,\n          stateOverride: \"query\",\n          encodingOverride: this._ownerDocument.charset\n        });\n      }\n\n      updateHref(this);\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.fragment === null || url.fragment === \"\") {\n        return \"\";\n      }\n\n      return \"#\" + url.fragment;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return;\n      }\n\n      if (v === \"\") {\n        url.fragment = null;\n      } else {\n        var input = v[0] === \"#\" ? v.substring(1) : v;\n        url.fragment = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: url,\n          stateOverride: \"fragment\"\n        });\n      }\n\n      updateHref(this);\n    }\n  }]);\n\n  return HTMLHyperlinkElementUtilsImpl;\n}();\n\nfunction reinitializeURL(hheu) {\n  if (hheu.url !== null && hheu.url.scheme === \"blob\" && hheu.url.cannotBeABaseURL) {\n    return;\n  }\n\n  setTheURL(hheu);\n}\n\nfunction setTheURL(hheu) {\n  var href = hheu.getAttribute(\"href\");\n\n  if (href === null) {\n    hheu.url = null;\n    return;\n  }\n\n  var parsed = parseURLToResultingURLRecord(href, hheu._ownerDocument);\n  hheu.url = parsed === null ? null : parsed;\n}\n\nfunction updateHref(hheu) {\n  hheu.setAttribute(\"href\", whatwgURL.serializeURL(hheu.url));\n}","map":null,"metadata":{},"sourceType":"script"}