{"ast":null,"code":"/*********************************************************************\n * This is a fork from the CSS Style Declaration part of\n * https://github.com/NV/CSSOM\n ********************************************************************/\n'use strict';\n\nvar CSSOM = require('cssom');\n\nvar allProperties = require('./allProperties');\n\nvar allExtraProperties = require('./allExtraProperties');\n\nvar implementedProperties = require('./implementedProperties');\n\nvar _require = require('./parsers'),\n    dashedToCamelCase = _require.dashedToCamelCase;\n\nvar getBasicPropertyDescriptor = require('./utils/getBasicPropertyDescriptor');\n/**\n * @constructor\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration\n */\n\n\nvar CSSStyleDeclaration = function CSSStyleDeclaration(onChangeCallback) {\n  this._values = {};\n  this._importants = {};\n  this._length = 0;\n\n  this._onChange = onChangeCallback || function () {\n    return;\n  };\n};\n\nCSSStyleDeclaration.prototype = {\n  constructor: CSSStyleDeclaration,\n\n  /**\n   *\n   * @param {string} name\n   * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue\n   * @return {string} the value of the property if it has been explicitly set for this declaration block.\n   * Returns the empty string if the property has not been set.\n   */\n  getPropertyValue: function getPropertyValue(name) {\n    if (!this._values.hasOwnProperty(name)) {\n      return '';\n    }\n\n    return this._values[name].toString();\n  },\n\n  /**\n   *\n   * @param {string} name\n   * @param {string} value\n   * @param {string} [priority=null] \"important\" or null\n   * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty\n   */\n  setProperty: function setProperty(name, value, priority) {\n    if (value === undefined) {\n      return;\n    }\n\n    if (value === null || value === '') {\n      this.removeProperty(name);\n      return;\n    }\n\n    var lowercaseName = name.toLowerCase();\n\n    if (!allProperties.has(lowercaseName) && !allExtraProperties.has(lowercaseName)) {\n      return;\n    }\n\n    this[lowercaseName] = value;\n    this._importants[lowercaseName] = priority;\n  },\n  _setProperty: function _setProperty(name, value, priority) {\n    if (value === undefined) {\n      return;\n    }\n\n    if (value === null || value === '') {\n      this.removeProperty(name);\n      return;\n    }\n\n    if (this._values[name]) {\n      // Property already exist. Overwrite it.\n      var index = Array.prototype.indexOf.call(this, name);\n\n      if (index < 0) {\n        this[this._length] = name;\n        this._length++;\n      }\n    } else {\n      // New property.\n      this[this._length] = name;\n      this._length++;\n    }\n\n    this._values[name] = value;\n    this._importants[name] = priority;\n\n    this._onChange(this.cssText);\n  },\n\n  /**\n   *\n   * @param {string} name\n   * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty\n   * @return {string} the value of the property if it has been explicitly set for this declaration block.\n   * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.\n   */\n  removeProperty: function removeProperty(name) {\n    if (!this._values.hasOwnProperty(name)) {\n      return '';\n    }\n\n    var prevValue = this._values[name];\n    delete this._values[name];\n    delete this._importants[name];\n    var index = Array.prototype.indexOf.call(this, name);\n\n    if (index < 0) {\n      return prevValue;\n    } // That's what WebKit and Opera do\n\n\n    Array.prototype.splice.call(this, index, 1); // That's what Firefox does\n    //this[index] = \"\"\n\n    this._onChange(this.cssText);\n\n    return prevValue;\n  },\n\n  /**\n   *\n   * @param {String} name\n   */\n  getPropertyPriority: function getPropertyPriority(name) {\n    return this._importants[name] || '';\n  },\n  getPropertyCSSValue: function getPropertyCSSValue() {\n    //FIXME\n    return;\n  },\n\n  /**\n   *   element.style.overflow = \"auto\"\n   *   element.style.getPropertyShorthand(\"overflow-x\")\n   *   -> \"overflow\"\n   */\n  getPropertyShorthand: function getPropertyShorthand() {\n    //FIXME\n    return;\n  },\n  isPropertyImplicit: function isPropertyImplicit() {\n    //FIXME\n    return;\n  },\n\n  /**\n   *   http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-item\n   */\n  item: function item(index) {\n    index = parseInt(index, 10);\n\n    if (index < 0 || index >= this._length) {\n      return '';\n    }\n\n    return this[index];\n  }\n};\nObject.defineProperties(CSSStyleDeclaration.prototype, {\n  cssText: {\n    get: function get() {\n      var properties = [];\n      var i;\n      var name;\n      var value;\n      var priority;\n\n      for (i = 0; i < this._length; i++) {\n        name = this[i];\n        value = this.getPropertyValue(name);\n        priority = this.getPropertyPriority(name);\n\n        if (priority !== '') {\n          priority = ' !' + priority;\n        }\n\n        properties.push([name, ': ', value, priority, ';'].join(''));\n      }\n\n      return properties.join(' ');\n    },\n    set: function set(value) {\n      var i;\n      this._values = {};\n      Array.prototype.splice.call(this, 0, this._length);\n      this._importants = {};\n      var dummyRule;\n\n      try {\n        dummyRule = CSSOM.parse('#bogus{' + value + '}').cssRules[0].style;\n      } catch (err) {\n        // malformed css, just return\n        return;\n      }\n\n      var rule_length = dummyRule.length;\n      var name;\n\n      for (i = 0; i < rule_length; ++i) {\n        name = dummyRule[i];\n        this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));\n      }\n\n      this._onChange(this.cssText);\n    },\n    enumerable: true,\n    configurable: true\n  },\n  parentRule: {\n    get: function get() {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  },\n  length: {\n    get: function get() {\n      return this._length;\n    },\n\n    /**\n     * This deletes indices if the new length is less then the current\n     * length. If the new length is more, it does nothing, the new indices\n     * will be undefined until set.\n     **/\n    set: function set(value) {\n      var i;\n\n      for (i = value; i < this._length; i++) {\n        delete this[i];\n      }\n\n      this._length = value;\n    },\n    enumerable: true,\n    configurable: true\n  }\n});\n\nrequire('./properties')(CSSStyleDeclaration.prototype);\n\nallProperties.forEach(function (property) {\n  if (!implementedProperties.has(property)) {\n    var declaration = getBasicPropertyDescriptor(property);\n    Object.defineProperty(CSSStyleDeclaration.prototype, property, declaration);\n    Object.defineProperty(CSSStyleDeclaration.prototype, dashedToCamelCase(property), declaration);\n  }\n});\nallExtraProperties.forEach(function (property) {\n  if (!implementedProperties.has(property)) {\n    var declaration = getBasicPropertyDescriptor(property);\n    Object.defineProperty(CSSStyleDeclaration.prototype, property, declaration);\n    Object.defineProperty(CSSStyleDeclaration.prototype, dashedToCamelCase(property), declaration);\n  }\n});\nexports.CSSStyleDeclaration = CSSStyleDeclaration;","map":null,"metadata":{},"sourceType":"script"}