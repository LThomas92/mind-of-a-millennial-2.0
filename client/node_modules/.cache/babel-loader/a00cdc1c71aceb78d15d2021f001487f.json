{"ast":null,"code":"\"use strict\";\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar arrayEqual = require(\"array-equal\");\n\nvar notImplemented = require(\"../../browser/not-implemented.js\");\n\nvar reportException = require(\"../helpers/runtime-script-errors.js\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nexports.evaluateJavaScriptURL = function (window, urlRecord) {\n  var urlString = whatwgURL.serializeURL(urlRecord);\n  var scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\n\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n\n  return undefined;\n}; // https://html.spec.whatwg.org/#navigating-across-documents\n\n\nexports.navigate = function (window, newURL, flags) {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n  var document = idlUtils.implForWrapper(window._document);\n  var currentURL = document._URL;\n\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, {\n    excludeFragments: true\n  })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n\n    return;\n  } // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n  // NOT IMPLEMENTED: if resource is a response...\n\n\n  if (newURL.scheme === \"javascript\") {\n    window.setTimeout(function () {\n      var result = exports.evaluateJavaScriptURL(window, newURL);\n\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n\n  navigateFetch(window);\n}; // https://html.spec.whatwg.org/#scroll-to-fragid\n\n\nfunction navigateToFragment(window, newURL, flags) {\n  var document = idlUtils.implForWrapper(window._document);\n\n  window._sessionHistory.clearHistoryTraversalTasks();\n\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n\n  var newEntry = {\n    document: document,\n    url: newURL\n  };\n\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n\n  window._sessionHistory.traverseHistory(newEntry, {\n    nonBlockingEvents: true,\n    replacement: flags.replacement\n  });\n} // https://html.spec.whatwg.org/#process-a-navigate-fetch\n\n\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\n\nfunction urlEquals(a, b, flags) {\n  if (a.scheme !== b.scheme || a.username !== b.username || a.password !== b.password || a.host !== b.host || a.port !== b.port || !arrayEqual(a.path, b.path) || a.query !== b.query || // Omitted per spec: url.fragment !== this._url.fragment ||\n  a.cannotBeABaseURL !== b.cannotBeABaseURL) {\n    return false;\n  }\n\n  return flags.excludeFragments || a.fragment === b.fragment;\n}","map":null,"metadata":{},"sourceType":"script"}