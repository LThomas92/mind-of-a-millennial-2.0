{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertMessageEventInit = require(\"./MessageEventInit.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar Event = require(\"./Event.js\");\n\nfunction MessageEvent(type) {\n  if ((this instanceof MessageEvent ? this.constructor : void 0) === undefined) {\n    throw new TypeError(\"Failed to construct 'MessageEvent'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'MessageEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to construct 'MessageEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg = arguments[1];\n    _curArg = convertMessageEventInit(_curArg, {\n      context: \"Failed to construct 'MessageEvent': parameter 2\"\n    });\n    args.push(_curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(MessageEvent.prototype, Event.interface.prototype);\nObject.setPrototypeOf(MessageEvent, Event.interface);\nObject.defineProperty(MessageEvent, \"prototype\", {\n  value: MessageEvent.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nMessageEvent.prototype.initMessageEvent = function initMessageEvent(type) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'initMessageEvent' on 'MessageEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg2 = arguments[1];\n\n    if (_curArg2 !== undefined) {\n      _curArg2 = conversions[\"boolean\"](_curArg2, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 2\"\n      });\n    } else {\n      _curArg2 = false;\n    }\n\n    args.push(_curArg2);\n  }\n  {\n    var _curArg3 = arguments[2];\n\n    if (_curArg3 !== undefined) {\n      _curArg3 = conversions[\"boolean\"](_curArg3, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 3\"\n      });\n    } else {\n      _curArg3 = false;\n    }\n\n    args.push(_curArg3);\n  }\n  {\n    var _curArg4 = arguments[3];\n\n    if (_curArg4 !== undefined) {\n      _curArg4 = conversions[\"any\"](_curArg4, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 4\"\n      });\n    } else {\n      _curArg4 = null;\n    }\n\n    args.push(_curArg4);\n  }\n  {\n    var _curArg5 = arguments[4];\n\n    if (_curArg5 !== undefined) {\n      _curArg5 = conversions[\"USVString\"](_curArg5, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 5\"\n      });\n    } else {\n      _curArg5 = \"\";\n    }\n\n    args.push(_curArg5);\n  }\n  {\n    var _curArg6 = arguments[5];\n\n    if (_curArg6 !== undefined) {\n      _curArg6 = conversions[\"DOMString\"](_curArg6, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 6\"\n      });\n    } else {\n      _curArg6 = \"\";\n    }\n\n    args.push(_curArg6);\n  }\n  {\n    var _curArg7 = arguments[6];\n\n    if (_curArg7 !== undefined) {\n      if (_curArg7 === null || _curArg7 === undefined) {\n        _curArg7 = null;\n      } else {\n        _curArg7 = utils.tryImplForWrapper(_curArg7);\n      }\n    } else {\n      _curArg7 = null;\n    }\n\n    args.push(_curArg7);\n  }\n  {\n    var _curArg8 = arguments[7];\n\n    if (_curArg8 !== undefined) {\n      if (!utils.isObject(_curArg8)) {\n        throw new TypeError(\"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 8\" + \" is not an iterable object.\");\n      } else {\n        var V = [];\n        var tmp = _curArg8;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var nextItem = _step.value;\n            nextItem = utils.tryImplForWrapper(nextItem);\n            V.push(nextItem);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        _curArg8 = V;\n      }\n    } else {\n      _curArg8 = [];\n    }\n\n    args.push(_curArg8);\n  }\n  return (_this$impl = this[impl]).initMessageEvent.apply(_this$impl, args);\n};\n\nObject.defineProperty(MessageEvent.prototype, \"data\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"data\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"origin\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"origin\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"lastEventId\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"lastEventId\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"source\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"source\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"ports\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ports\"]);\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, Symbol.toStringTag, {\n  value: \"MessageEvent\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var isMixedInto = _step3.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'MessageEvent'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(MessageEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(MessageEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Event._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: MessageEvent,\n  expose: {\n    Window: {\n      MessageEvent: MessageEvent\n    },\n    Worker: {\n      MessageEvent: MessageEvent\n    },\n    AudioWorklet: {\n      MessageEvent: MessageEvent\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../events/MessageEvent-impl.js\");","map":null,"metadata":{},"sourceType":"script"}