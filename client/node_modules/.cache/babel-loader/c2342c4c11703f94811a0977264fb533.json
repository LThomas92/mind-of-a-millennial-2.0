{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/strings\"),\n    asciiLowercase = _require.asciiLowercase;\n\nvar _require2 = require(\"../helpers/traversal\"),\n    closest = _require2.closest;\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max) {\n  var defaultValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (attrValue === null) {\n    return defaultValue;\n  } // We don't allow hexadecimal numbers here.\n  // eslint-disable-next-line radix\n\n\n  var parsed = parseInt(attrValue, 10);\n\n  if (isNaN(parsed) || parsed < 0) {\n    return defaultValue;\n  }\n\n  if (parsed < min) {\n    return min;\n  }\n\n  if (parsed > max) {\n    return max;\n  }\n\n  return parsed;\n}\n\nvar HTMLTableCellElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLTableCellElementImpl, _HTMLElementImpl);\n\n  function HTMLTableCellElementImpl() {\n    _classCallCheck(this, HTMLTableCellElementImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLTableCellElementImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLTableCellElementImpl, [{\n    key: \"colSpan\",\n    get: function get() {\n      return reflectedAttributeClampedToRange(this.getAttribute(\"colspan\"), 1, 1000, 1);\n    },\n    set: function set(V) {\n      this.setAttribute(\"colspan\", String(V));\n    }\n  }, {\n    key: \"rowSpan\",\n    get: function get() {\n      return reflectedAttributeClampedToRange(this.getAttribute(\"rowspan\"), 0, 65534, 1);\n    },\n    set: function set(V) {\n      this.setAttribute(\"rowspan\", String(V));\n    }\n  }, {\n    key: \"cellIndex\",\n    get: function get() {\n      var tr = closest(this, \"tr\");\n\n      if (tr === null) {\n        return -1;\n      }\n\n      return tr.cells.indexOf(this);\n    }\n  }, {\n    key: \"scope\",\n    get: function get() {\n      var value = this.getAttribute(\"scope\");\n\n      if (value === null) {\n        return \"\";\n      } // Enumerated attribute is matched ASCII-case-insensitively.\n\n\n      value = asciiLowercase(value);\n\n      if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n        return value;\n      }\n\n      return \"\";\n    },\n    set: function set(V) {\n      this.setAttribute(\"scope\", V);\n    }\n  }]);\n\n  return HTMLTableCellElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}