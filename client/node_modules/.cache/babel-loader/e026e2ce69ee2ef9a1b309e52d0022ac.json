{"ast":null,"code":"\"use strict\";\n\nvar parse5 = require(\"parse5\");\n\nvar treeAdapter = require(\"./parse5-adapter-serialization\");\n\nvar NODE_TYPE = require(\"../living/node-type\");\n\nexports.domToHtml = function (iterable) {\n  var ret = \"\";\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var node = _step.value;\n\n      if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n        ret += parse5.serialize(node, {\n          treeAdapter: treeAdapter\n        });\n      } else {\n        // TODO: maybe parse5 can give us a hook where it serializes the node itself too:\n        // https://github.com/inikulin/parse5/issues/230\n        ret += parse5.serialize({\n          childNodesForSerializing: [node]\n        }, {\n          treeAdapter: treeAdapter\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n};","map":null,"metadata":{},"sourceType":"script"}