{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/strings\"),\n    stripAndCollapseASCIIWhitespace = _require.stripAndCollapseASCIIWhitespace;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    closest = _require3.closest;\n\nvar HTMLOptionElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLOptionElementImpl, _HTMLElementImpl);\n\n  function HTMLOptionElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLOptionElementImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLOptionElementImpl).call(this, args, privateData)); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    _this._selectedness = false;\n    _this._dirtyness = false;\n    return _this;\n  }\n\n  _createClass(HTMLOptionElementImpl, [{\n    key: \"_removeOtherSelectedness\",\n    value: function _removeOtherSelectedness() {\n      // Remove the selectedness flag from all other options in this select\n      var select = this._selectNode;\n\n      if (select && !select.hasAttribute(\"multiple\")) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = select.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var option = _step.value;\n\n            if (option !== this) {\n              option._selectedness = false;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_askForAReset\",\n    value: function _askForAReset() {\n      var select = this._selectNode;\n\n      if (select) {\n        select._askedForAReset();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name) {\n      if (!this._dirtyness && name === \"selected\") {\n        this._selectedness = this.hasAttribute(\"selected\");\n\n        if (this._selectedness) {\n          this._removeOtherSelectedness();\n        }\n\n        this._askForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLOptionElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_selectNode\",\n    get: function get() {\n      var select = domSymbolTree.parent(this);\n\n      if (!select) {\n        return null;\n      }\n\n      if (select.nodeName.toUpperCase() !== \"SELECT\") {\n        select = domSymbolTree.parent(select);\n\n        if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n          return null;\n        }\n      }\n\n      return select;\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return closest(this, \"form\");\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      // TODO is not correctly excluding script and SVG script descendants\n      return stripAndCollapseASCIIWhitespace(this.textContent);\n    },\n    set: function set(V) {\n      this.textContent = V;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.hasAttribute(\"value\") ? this.getAttribute(\"value\") : this.text;\n    },\n    set: function set(val) {\n      this.setAttribute(\"value\", val);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      var select = closest(this, \"select\");\n\n      if (select === null) {\n        return 0;\n      }\n\n      return select.options.indexOf(this);\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selectedness;\n    },\n    set: function set(s) {\n      this._dirtyness = true;\n      this._selectedness = Boolean(s);\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n    } // TODO this is quite wrong\n\n  }, {\n    key: \"label\",\n    get: function get() {\n      if (this.hasAttribute(\"label\")) {\n        return this.getAttribute(\"label\");\n      }\n\n      var select = this._selectNode;\n\n      if (select) {\n        return select.getAttribute(\"label\");\n      }\n\n      return null;\n    },\n    set: function set(V) {\n      var select = this._selectNode;\n\n      if (select) {\n        select.setAttribute(\"label\", V);\n      }\n    }\n  }]);\n\n  return HTMLOptionElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}