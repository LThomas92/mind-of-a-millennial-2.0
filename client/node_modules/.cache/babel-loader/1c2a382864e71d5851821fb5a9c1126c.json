{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nfunction HTMLHyperlinkElementUtils() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(HTMLHyperlinkElementUtils, \"prototype\", {\n  value: HTMLHyperlinkElementUtils.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"href\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"href\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'href' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"href\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nHTMLHyperlinkElementUtils.prototype.toString = function toString() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl][\"href\"];\n};\n\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"origin\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"origin\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"protocol\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"protocol\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'protocol' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"protocol\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"username\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"username\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'username' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"username\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"password\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"password\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'password' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"password\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"host\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"host\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'host' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"host\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"hostname\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"hostname\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'hostname' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"hostname\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"port\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"port\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'port' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"port\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"pathname\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"pathname\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'pathname' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"pathname\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"search\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"search\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'search' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"search\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, \"hash\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"hash\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'hash' property on 'HTMLHyperlinkElementUtils': The provided value\"\n    });\n    this[impl][\"hash\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLHyperlinkElementUtils.prototype, Symbol.toStringTag, {\n  value: \"HTMLHyperlinkElementUtils\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLHyperlinkElementUtils'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLHyperlinkElementUtils.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLHyperlinkElementUtils.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLHyperlinkElementUtils,\n  expose: {}\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/HTMLHyperlinkElementUtils-impl.js\");","map":null,"metadata":{},"sourceType":"script"}