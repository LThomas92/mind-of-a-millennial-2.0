{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function HTMLCollectionImpl(args, privateData) {\n    _classCallCheck(this, HTMLCollectionImpl);\n\n    this._list = [];\n    this._version = -1;\n    this._element = privateData.element;\n    this._query = privateData.query;\n\n    this._update();\n  }\n\n  _createClass(HTMLCollectionImpl, [{\n    key: \"item\",\n    value: function item(index) {\n      this._update();\n\n      return this._list[index] || null;\n    }\n  }, {\n    key: \"namedItem\",\n    value: function namedItem(key) {\n      if (key === \"\") {\n        return null;\n      }\n\n      this._update();\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var element = _step.value;\n\n          if (element.getAttribute(\"id\") === key) {\n            return element;\n          }\n\n          if (element._namespaceURI === HTML_NS) {\n            var name = element.getAttribute(\"name\");\n\n            if (name === key) {\n              return element;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      if (this._version < this._element._version) {\n        var snapshot = this._query();\n\n        for (var i = 0; i < snapshot.length; i++) {\n          this._list[i] = snapshot[i];\n        }\n\n        this._list.length = snapshot.length;\n        this._version = this._element._version;\n      }\n    }\n  }, {\n    key: Symbol.iterator,\n    // Inherit some useful functions from Array.\n    value: function value() {\n      this._update();\n\n      return this._list[Symbol.iterator]();\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      this._update();\n\n      return this._list.entries();\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      var _this$_list;\n\n      this._update();\n\n      return (_this$_list = this._list).filter.apply(_this$_list, arguments);\n    }\n  }, {\n    key: \"map\",\n    value: function map() {\n      var _this$_list2;\n\n      this._update();\n\n      return (_this$_list2 = this._list).map.apply(_this$_list2, arguments);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf() {\n      var _this$_list3;\n\n      this._update();\n\n      return (_this$_list3 = this._list).indexOf.apply(_this$_list3, arguments);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._update();\n\n      return this._list.length;\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      this._update();\n\n      return this._list.keys();\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      this._update();\n\n      var result = new Set();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var element = _step2.value;\n          var id = element.getAttribute(\"id\");\n\n          if (id) {\n            result.add(id);\n          }\n\n          if (element._namespaceURI === HTML_NS) {\n            var name = element.getAttribute(\"name\");\n\n            if (name) {\n              result.add(name);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return HTMLCollectionImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}