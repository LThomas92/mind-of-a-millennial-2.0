{"ast":null,"code":"\"use strict\"; // Returns \"Type(value) is Object\" in ES terminology.\n\nfunction isObject(value) {\n  return typeof value === \"object\" && value !== null || typeof value === \"function\";\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar getOwnPropertyDescriptors = typeof Object.getOwnPropertyDescriptors === \"function\" ? Object.getOwnPropertyDescriptors : // Polyfill exists until we require Node.js v8.x\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\nfunction (obj) {\n  if (obj === undefined || obj === null) {\n    throw new TypeError(\"Cannot convert undefined or null to object\");\n  }\n\n  obj = Object(obj);\n  var ownKeys = Reflect.ownKeys(obj);\n  var descriptors = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = ownKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      var descriptor = Reflect.getOwnPropertyDescriptor(obj, key);\n\n      if (descriptor !== undefined) {\n        Reflect.defineProperty(descriptors, key, {\n          value: descriptor,\n          writable: true,\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return descriptors;\n};\nvar wrapperSymbol = Symbol(\"wrapper\");\nvar implSymbol = Symbol(\"impl\");\nvar sameObjectCaches = Symbol(\"SameObject caches\");\n\nfunction getSameObject(wrapper, prop, creator) {\n  if (!wrapper[sameObjectCaches]) {\n    wrapper[sameObjectCaches] = Object.create(null);\n  }\n\n  if (prop in wrapper[sameObjectCaches]) {\n    return wrapper[sameObjectCaches][prop];\n  }\n\n  wrapper[sameObjectCaches][prop] = creator();\n  return wrapper[sameObjectCaches][prop];\n}\n\nfunction wrapperForImpl(impl) {\n  return impl ? impl[wrapperSymbol] : null;\n}\n\nfunction implForWrapper(wrapper) {\n  return wrapper ? wrapper[implSymbol] : null;\n}\n\nfunction tryWrapperForImpl(impl) {\n  var wrapper = wrapperForImpl(impl);\n  return wrapper ? wrapper : impl;\n}\n\nfunction tryImplForWrapper(wrapper) {\n  var impl = implForWrapper(wrapper);\n  return impl ? impl : wrapper;\n}\n\nvar iterInternalSymbol = Symbol(\"internal\");\nvar IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\n\nfunction isArrayIndexPropName(P) {\n  if (typeof P !== \"string\") {\n    return false;\n  }\n\n  var i = P >>> 0;\n\n  if (i === Math.pow(2, 32) - 1) {\n    return false;\n  }\n\n  var s = \"\".concat(i);\n\n  if (P !== s) {\n    return false;\n  }\n\n  return true;\n}\n\nvar supportsPropertyIndex = Symbol(\"supports property index\");\nvar supportedPropertyIndices = Symbol(\"supported property indices\");\nvar supportsPropertyName = Symbol(\"supports property name\");\nvar supportedPropertyNames = Symbol(\"supported property names\");\nvar indexedGet = Symbol(\"indexed property get\");\nvar indexedSetNew = Symbol(\"indexed property set new\");\nvar indexedSetExisting = Symbol(\"indexed property set existing\");\nvar namedGet = Symbol(\"named property get\");\nvar namedSetNew = Symbol(\"named property set new\");\nvar namedSetExisting = Symbol(\"named property set existing\");\nvar namedDelete = Symbol(\"named property delete\");\nmodule.exports = exports = {\n  isObject: isObject,\n  hasOwn: hasOwn,\n  getOwnPropertyDescriptors: getOwnPropertyDescriptors,\n  wrapperSymbol: wrapperSymbol,\n  implSymbol: implSymbol,\n  getSameObject: getSameObject,\n  wrapperForImpl: wrapperForImpl,\n  implForWrapper: implForWrapper,\n  tryWrapperForImpl: tryWrapperForImpl,\n  tryImplForWrapper: tryImplForWrapper,\n  iterInternalSymbol: iterInternalSymbol,\n  IteratorPrototype: IteratorPrototype,\n  isArrayIndexPropName: isArrayIndexPropName,\n  supportsPropertyIndex: supportsPropertyIndex,\n  supportedPropertyIndices: supportedPropertyIndices,\n  supportsPropertyName: supportsPropertyName,\n  supportedPropertyNames: supportedPropertyNames,\n  indexedGet: indexedGet,\n  indexedSetNew: indexedSetNew,\n  indexedSetExisting: indexedSetExisting,\n  namedGet: namedGet,\n  namedSetNew: namedSetNew,\n  namedSetExisting: namedSetExisting,\n  namedDelete: namedDelete\n};","map":null,"metadata":{},"sourceType":"script"}