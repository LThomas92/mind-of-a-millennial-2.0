{"ast":null,"code":"//.CommonJS\nvar CSSOM = {}; ///CommonJS\n\n/**\n * @constructor\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration\n */\n\nCSSOM.CSSStyleDeclaration = function CSSStyleDeclaration() {\n  this.length = 0;\n  this.parentRule = null; // NON-STANDARD\n\n  this._importants = {};\n};\n\nCSSOM.CSSStyleDeclaration.prototype = {\n  constructor: CSSOM.CSSStyleDeclaration,\n\n  /**\n   *\n   * @param {string} name\n   * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue\n   * @return {string} the value of the property if it has been explicitly set for this declaration block.\n   * Returns the empty string if the property has not been set.\n   */\n  getPropertyValue: function getPropertyValue(name) {\n    return this[name] || \"\";\n  },\n\n  /**\n   *\n   * @param {string} name\n   * @param {string} value\n   * @param {string} [priority=null] \"important\" or null\n   * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty\n   */\n  setProperty: function setProperty(name, value, priority) {\n    if (this[name]) {\n      // Property already exist. Overwrite it.\n      var index = Array.prototype.indexOf.call(this, name);\n\n      if (index < 0) {\n        this[this.length] = name;\n        this.length++;\n      }\n    } else {\n      // New property.\n      this[this.length] = name;\n      this.length++;\n    }\n\n    this[name] = value + \"\";\n    this._importants[name] = priority;\n  },\n\n  /**\n   *\n   * @param {string} name\n   * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty\n   * @return {string} the value of the property if it has been explicitly set for this declaration block.\n   * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.\n   */\n  removeProperty: function removeProperty(name) {\n    if (!(name in this)) {\n      return \"\";\n    }\n\n    var index = Array.prototype.indexOf.call(this, name);\n\n    if (index < 0) {\n      return \"\";\n    }\n\n    var prevValue = this[name];\n    this[name] = \"\"; // That's what WebKit and Opera do\n\n    Array.prototype.splice.call(this, index, 1); // That's what Firefox does\n    //this[index] = \"\"\n\n    return prevValue;\n  },\n  getPropertyCSSValue: function getPropertyCSSValue() {//FIXME\n  },\n\n  /**\n   *\n   * @param {String} name\n   */\n  getPropertyPriority: function getPropertyPriority(name) {\n    return this._importants[name] || \"\";\n  },\n\n  /**\n   *   element.style.overflow = \"auto\"\n   *   element.style.getPropertyShorthand(\"overflow-x\")\n   *   -> \"overflow\"\n   */\n  getPropertyShorthand: function getPropertyShorthand() {//FIXME\n  },\n  isPropertyImplicit: function isPropertyImplicit() {//FIXME\n  },\n\n  // Doesn't work in IE < 9\n  get cssText() {\n    var properties = [];\n\n    for (var i = 0, length = this.length; i < length; ++i) {\n      var name = this[i];\n      var value = this.getPropertyValue(name);\n      var priority = this.getPropertyPriority(name);\n\n      if (priority) {\n        priority = \" !\" + priority;\n      }\n\n      properties[i] = name + \": \" + value + priority + \";\";\n    }\n\n    return properties.join(\" \");\n  },\n\n  set cssText(text) {\n    var i, name;\n\n    for (i = this.length; i--;) {\n      name = this[i];\n      this[name] = \"\";\n    }\n\n    Array.prototype.splice.call(this, 0, this.length);\n    this._importants = {};\n    var dummyRule = CSSOM.parse('#bogus{' + text + '}').cssRules[0].style;\n    var length = dummyRule.length;\n\n    for (i = 0; i < length; ++i) {\n      name = dummyRule[i];\n      this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));\n    }\n  }\n\n}; //.CommonJS\n\nexports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;\nCSSOM.parse = require('./parse').parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js\n///CommonJS","map":null,"metadata":{},"sourceType":"script"}