{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar EventInit = require(\"./EventInit.js\");\n\nmodule.exports = {\n  convertInherit: function convertInherit(obj, ret) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    EventInit.convertInherit(obj, ret, {\n      context: context\n    });\n    {\n      var key = \"data\";\n      var value = obj === undefined || obj === null ? undefined : obj[key];\n\n      if (value !== undefined) {\n        value = conversions[\"any\"](value, {\n          context: context + \" has member data that\"\n        });\n        ret[key] = value;\n      } else {\n        ret[key] = null;\n      }\n    }\n    {\n      var _key = \"lastEventId\";\n\n      var _value = obj === undefined || obj === null ? undefined : obj[_key];\n\n      if (_value !== undefined) {\n        _value = conversions[\"DOMString\"](_value, {\n          context: context + \" has member lastEventId that\"\n        });\n        ret[_key] = _value;\n      } else {\n        ret[_key] = \"\";\n      }\n    }\n    {\n      var _key2 = \"origin\";\n\n      var _value2 = obj === undefined || obj === null ? undefined : obj[_key2];\n\n      if (_value2 !== undefined) {\n        _value2 = conversions[\"USVString\"](_value2, {\n          context: context + \" has member origin that\"\n        });\n        ret[_key2] = _value2;\n      } else {\n        ret[_key2] = \"\";\n      }\n    }\n    {\n      var _key3 = \"ports\";\n\n      var _value3 = obj === undefined || obj === null ? undefined : obj[_key3];\n\n      if (_value3 !== undefined) {\n        if (!utils.isObject(_value3)) {\n          throw new TypeError(context + \" has member ports that\" + \" is not an iterable object.\");\n        } else {\n          var V = [];\n          var tmp = _value3;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var nextItem = _step.value;\n              nextItem = utils.tryImplForWrapper(nextItem);\n              V.push(nextItem);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          _value3 = V;\n        }\n\n        ret[_key3] = _value3;\n      } else {\n        ret[_key3] = [];\n      }\n    }\n    {\n      var _key4 = \"source\";\n\n      var _value4 = obj === undefined || obj === null ? undefined : obj[_key4];\n\n      if (_value4 !== undefined) {\n        if (_value4 === null || _value4 === undefined) {\n          _value4 = null;\n        } else {\n          _value4 = utils.tryImplForWrapper(_value4);\n        }\n\n        ret[_key4] = _value4;\n      } else {\n        ret[_key4] = null;\n      }\n    }\n  },\n  convert: function convert(obj) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$context = _ref2.context,\n        context = _ref2$context === void 0 ? \"The provided value\" : _ref2$context;\n\n    if (obj !== undefined && typeof obj !== \"object\" && typeof obj !== \"function\") {\n      throw new TypeError(\"\".concat(context, \" is not an object.\"));\n    }\n\n    var ret = Object.create(null);\n    module.exports.convertInherit(obj, ret, {\n      context: context\n    });\n    return ret;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}