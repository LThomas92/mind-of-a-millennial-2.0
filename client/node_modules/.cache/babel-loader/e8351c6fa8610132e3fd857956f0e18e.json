{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar _require = require(\"./helpers\"),\n    filter = _require.filter,\n    FILTER_ACCEPT = _require.FILTER_ACCEPT,\n    FILTER_REJECT = _require.FILTER_REJECT,\n    FILTER_SKIP = _require.FILTER_SKIP;\n\nvar FIRST = false;\nvar LAST = true;\nvar NEXT = false;\nvar PREVIOUS = true;\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function TreeWalkerImpl(args, privateData) {\n    _classCallCheck(this, TreeWalkerImpl);\n\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this.currentNode = this.root;\n  }\n\n  _createClass(TreeWalkerImpl, [{\n    key: \"parentNode\",\n    value: function parentNode() {\n      var node = this._currentNode;\n\n      while (node !== null && node !== this.root) {\n        node = node.parentNode;\n\n        if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"firstChild\",\n    value: function firstChild() {\n      return this._traverseChildren(FIRST);\n    }\n  }, {\n    key: \"lastChild\",\n    value: function lastChild() {\n      return this._traverseChildren(LAST);\n    }\n  }, {\n    key: \"previousSibling\",\n    value: function previousSibling() {\n      return this._traverseSiblings(PREVIOUS);\n    }\n  }, {\n    key: \"nextSibling\",\n    value: function nextSibling() {\n      return this._traverseSiblings(NEXT);\n    }\n  }, {\n    key: \"previousNode\",\n    value: function previousNode() {\n      var node = this._currentNode;\n\n      while (node !== this.root) {\n        var sibling = node.previousSibling;\n\n        while (sibling !== null) {\n          node = sibling;\n          var result = filter(this, node);\n\n          while (result !== FILTER_REJECT && node.hasChildNodes()) {\n            node = node.lastChild;\n            result = filter(this, node);\n          }\n\n          if (result === FILTER_ACCEPT) {\n            return this._currentNode = node;\n          }\n\n          sibling = node.previousSibling;\n        }\n\n        if (node === this.root || node.parentNode === null) {\n          return null;\n        }\n\n        node = node.parentNode;\n\n        if (filter(this, node) === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"nextNode\",\n    value: function nextNode() {\n      var node = this._currentNode;\n      var result = FILTER_ACCEPT;\n\n      for (;;) {\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.firstChild;\n          result = filter(this, node);\n\n          if (result === FILTER_ACCEPT) {\n            return this._currentNode = node;\n          }\n        }\n\n        do {\n          if (node === this.root) {\n            return null;\n          }\n\n          var sibling = node.nextSibling;\n\n          if (sibling !== null) {\n            node = sibling;\n            break;\n          }\n\n          node = node.parentNode;\n        } while (node !== null);\n\n        if (node === null) {\n          return null;\n        }\n\n        result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n    }\n  }, {\n    key: \"_traverseChildren\",\n    value: function _traverseChildren(type) {\n      var node = this._currentNode;\n      node = type === FIRST ? node.firstChild : node.lastChild;\n\n      if (node === null) {\n        return null;\n      }\n\n      main: for (;;) {\n        var result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n\n        if (result === FILTER_SKIP) {\n          var child = type === FIRST ? node.firstChild : node.lastChild;\n\n          if (child !== null) {\n            node = child;\n            continue;\n          }\n        }\n\n        for (;;) {\n          var sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n\n          if (sibling !== null) {\n            node = sibling;\n            continue main;\n          }\n\n          var parent = node.parentNode;\n\n          if (parent === null || parent === this.root || parent === this._currentNode) {\n            return null;\n          }\n\n          node = parent;\n        }\n      }\n    }\n  }, {\n    key: \"_traverseSiblings\",\n    value: function _traverseSiblings(type) {\n      var node = this._currentNode;\n\n      if (node === this.root) {\n        return null;\n      }\n\n      for (;;) {\n        var sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n\n        while (sibling !== null) {\n          node = sibling;\n          var result = filter(this, node);\n\n          if (result === FILTER_ACCEPT) {\n            return this._currentNode = node;\n          }\n\n          sibling = type === NEXT ? node.firstChild : node.lastChild;\n\n          if (result === FILTER_REJECT || sibling === null) {\n            sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n          }\n        }\n\n        node = node.parentNode;\n\n        if (node === null || node === this.root) {\n          return null;\n        }\n\n        if (filter(this, node) === FILTER_ACCEPT) {\n          return null;\n        }\n      }\n    }\n  }, {\n    key: \"currentNode\",\n    get: function get() {\n      return this._currentNode;\n    },\n    set: function set(node) {\n      if (node === null) {\n        throw new DOMException(\"Cannot set currentNode to null\", \"NotSupportedError\");\n      }\n\n      this._currentNode = node;\n    }\n  }]);\n\n  return TreeWalkerImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}