{"ast":null,"code":"\"use strict\"; // TODO: use String.prototype.padStart instead when Node.js v8+ is required.\n\nvar leftPad = require(\"left-pad\");\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#number-of-days-in-month-month-of-year-year\n\n\nvar daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction numberOfDaysInMonthOfYear(month, year) {\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n\n  return daysInMonth[month - 1];\n}\n\nvar monthRe = /^([0-9]{4,})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-month-string\n\nfunction parseMonthString(str) {\n  var matches = monthRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  var year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  var month = Number(matches[2]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  return {\n    year: year,\n    month: month\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-month-string\n\n\nfunction isValidMonthString(str) {\n  return parseMonthString(str) !== null;\n}\n\nfunction serializeMonth(_ref) {\n  var year = _ref.year,\n      month = _ref.month;\n  var yearStr = leftPad(\"\".concat(year), 4, \"0\");\n  var monthStr = leftPad(\"\".concat(month), 2, \"0\");\n  return \"\".concat(yearStr, \"-\").concat(monthStr);\n}\n\nvar dateRe = /^([0-9]{4,})-([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-date-string\n\nfunction parseDateString(str) {\n  var matches = dateRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  var year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  var month = Number(matches[2]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  var day = Number(matches[3]);\n\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, year)) {\n    return null;\n  }\n\n  return {\n    year: year,\n    month: month,\n    day: day\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-date-string\n\n\nfunction isValidDateString(str) {\n  return parseDateString(str) !== null;\n}\n\nfunction serializeDate(date) {\n  var dayStr = leftPad(\"\".concat(date.day), 2, \"0\");\n  return \"\".concat(serializeMonth(date), \"-\").concat(dayStr);\n}\n\nvar yearlessDateRe = /^(?:--)?([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-yearless-date-string\n\nfunction parseYearlessDateString(str) {\n  var matches = yearlessDateRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  var month = Number(matches[1]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  var day = Number(matches[2]);\n\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, 4)) {\n    return null;\n  }\n\n  return {\n    month: month,\n    day: day\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-yearless-date-string\n\n\nfunction isValidYearlessDateString(str) {\n  return parseYearlessDateString(str) !== null;\n}\n\nfunction serializeYearlessDate(_ref2) {\n  var month = _ref2.month,\n      day = _ref2.day;\n  var monthStr = leftPad(\"\".concat(month), 2, \"0\");\n  var dayStr = leftPad(\"\".concat(day), 2, \"0\");\n  return \"\".concat(monthStr, \"-\").concat(dayStr);\n}\n\nvar timeRe = /^([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:\\.([0-9]{1,3}))?))?$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-time-string\n\nfunction parseTimeString(str) {\n  var matches = timeRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  var hour = Number(matches[1]);\n\n  if (hour < 0 || hour > 23) {\n    return null;\n  }\n\n  var minute = Number(matches[2]);\n\n  if (minute < 0 || minute > 59) {\n    return null;\n  }\n\n  var second = matches[3] !== undefined ? Math.trunc(Number(matches[3])) : 0;\n\n  if (second < 0 || second >= 60) {\n    return null;\n  }\n\n  var millisecond = matches[4] !== undefined ? Number(matches[4]) : 0;\n  return {\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-time-string\n\n\nfunction isValidTimeString(str) {\n  return parseTimeString(str) !== null;\n}\n\nfunction serializeTime(_ref3) {\n  var hour = _ref3.hour,\n      minute = _ref3.minute,\n      second = _ref3.second,\n      millisecond = _ref3.millisecond;\n  var hourStr = leftPad(\"\".concat(hour), 2, \"0\");\n  var minuteStr = leftPad(\"\".concat(minute), 2, \"0\");\n\n  if (millisecond === 0) {\n    return \"\".concat(hourStr, \":\").concat(minuteStr);\n  }\n\n  var secondStr = leftPad(second, 2, \"0\");\n  var millisecondStr = leftPad(millisecond, 3, \"0\");\n  return \"\".concat(hourStr, \":\").concat(minuteStr, \":\").concat(secondStr, \".\").concat(millisecondStr);\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-local-date-and-time-string\n\n\nfunction parseLocalDateAndTimeString(str) {\n  var normalized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var separatorIdx = str.indexOf(\"T\");\n\n  if (separatorIdx < 0 && !normalized) {\n    separatorIdx = str.indexOf(\" \");\n  }\n\n  if (separatorIdx < 0) {\n    return null;\n  }\n\n  var date = parseDateString(str.slice(0, separatorIdx));\n\n  if (date === null) {\n    return null;\n  }\n\n  var time = parseTimeString(str.slice(separatorIdx + 1));\n\n  if (time === null) {\n    return null;\n  }\n\n  return {\n    date: date,\n    time: time\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-local-date-and-time-string\n\n\nfunction isValidLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str) !== null;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-normalised-local-date-and-time-string\n\n\nfunction isValidNormalizedLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str, true) !== null;\n}\n\nfunction serializeNormalizedDateAndTime(_ref4) {\n  var date = _ref4.date,\n      time = _ref4.time;\n  return \"\".concat(serializeDate(date), \"T\").concat(serializeTime(time));\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#week-number-of-the-last-day\n// https://stackoverflow.com/a/18538272/1937836\n\n\nfunction weekNumberOfLastDay(year) {\n  var jan1 = new Date(year, 0);\n  return jan1.getDay() === 4 || isLeapYear(year) && jan1.getDay() === 3 ? 53 : 52;\n}\n\nvar weekRe = /^([0-9]{4,5})-W([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-week-string\n\nfunction parseWeekString(str) {\n  var matches = weekRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  var year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  var week = Number(matches[2]);\n\n  if (week < 1 || week > weekNumberOfLastDay(year)) {\n    return null;\n  }\n\n  return {\n    year: year,\n    week: week\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-week-string\n\n\nfunction isValidWeekString(str) {\n  return parseWeekString(str) !== null;\n}\n\nfunction serializeWeek(_ref5) {\n  var year = _ref5.year,\n      week = _ref5.week;\n  var yearStr = leftPad(\"\".concat(year), 4, \"0\");\n  var weekStr = leftPad(\"\".concat(week), 2, \"0\");\n  return \"\".concat(yearStr, \"-W\").concat(weekStr);\n}\n\nmodule.exports = {\n  numberOfDaysInMonthOfYear: numberOfDaysInMonthOfYear,\n  parseMonthString: parseMonthString,\n  isValidMonthString: isValidMonthString,\n  serializeMonth: serializeMonth,\n  parseDateString: parseDateString,\n  isValidDateString: isValidDateString,\n  serializeDate: serializeDate,\n  parseYearlessDateString: parseYearlessDateString,\n  isValidYearlessDateString: isValidYearlessDateString,\n  serializeYearlessDate: serializeYearlessDate,\n  parseTimeString: parseTimeString,\n  isValidTimeString: isValidTimeString,\n  serializeTime: serializeTime,\n  parseLocalDateAndTimeString: parseLocalDateAndTimeString,\n  isValidLocalDateAndTimeString: isValidLocalDateAndTimeString,\n  isValidNormalizedLocalDateAndTimeString: isValidNormalizedLocalDateAndTimeString,\n  serializeNormalizedDateAndTime: serializeNormalizedDateAndTime,\n  weekNumberOfLastDay: weekNumberOfLastDay,\n  parseWeekString: parseWeekString,\n  isValidWeekString: isValidWeekString,\n  serializeWeek: serializeWeek\n};","map":null,"metadata":{},"sourceType":"script"}