{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar UIEventInit = require(\"../generated/UIEventInit\");\n\nvar EventImpl = require(\"./Event-impl\").implementation; // Until webidl2js gains support for checking for Window, this would have to do.\n\n\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n\n  var wrapper = idlUtils.wrapperForImpl(val);\n\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  } // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n\n\n  return isWindow(idlUtils.implForWrapper(val));\n}\n\nvar UIEventImpl =\n/*#__PURE__*/\nfunction (_EventImpl) {\n  _inherits(UIEventImpl, _EventImpl);\n\n  function UIEventImpl(args, privateData) {\n    _classCallCheck(this, UIEventImpl);\n\n    var eventInitDict = args[1]; // undefined check included so that we can omit the property in internal usage.\n\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(\"Failed to construct '\".concat((this instanceof UIEventImpl ? this.constructor : void 0).name.replace(/Impl$/, \"\"), \"': member view is not of \") + \"type Window.\");\n      }\n    }\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UIEventImpl).call(this, args, privateData));\n  }\n\n  _createClass(UIEventImpl, [{\n    key: \"initUIEvent\",\n    value: function initUIEvent(type, bubbles, cancelable, view, detail) {\n      if (view !== null) {\n        if (!isWindow(view)) {\n          throw new TypeError(\"Failed to execute 'initUIEvent' on '\".concat(this.constructor.name.replace(/Impl$/, \"\"), \"': \") + \"parameter 4 is not of type 'Window'.\");\n        }\n      }\n\n      if (this._dispatchFlag) {\n        return;\n      }\n\n      this.initEvent(type, bubbles, cancelable);\n      this.view = view;\n      this.detail = detail;\n    }\n  }]);\n\n  return UIEventImpl;\n}(EventImpl);\n\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\nmodule.exports = {\n  implementation: UIEventImpl\n};","map":null,"metadata":{},"sourceType":"script"}