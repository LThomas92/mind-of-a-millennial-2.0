{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _draftJs = require('draft-js');\n\nvar _isSoftNewlineEvent = require('draft-js/lib/isSoftNewlineEvent');\n\nvar _isSoftNewlineEvent2 = _interopRequireDefault(_isSoftNewlineEvent);\n\nvar _immutable = require('immutable');\n\nvar _addbutton = require('./components/addbutton');\n\nvar _addbutton2 = _interopRequireDefault(_addbutton);\n\nvar _toolbar = require('./components/toolbar');\n\nvar _toolbar2 = _interopRequireDefault(_toolbar);\n\nvar _LinkEditComponent = require('./components/LinkEditComponent');\n\nvar _LinkEditComponent2 = _interopRequireDefault(_LinkEditComponent);\n\nvar _customrenderer = require('./components/customrenderer');\n\nvar _customrenderer2 = _interopRequireDefault(_customrenderer);\n\nvar _customstylemap = require('./util/customstylemap');\n\nvar _customstylemap2 = _interopRequireDefault(_customstylemap);\n\nvar _rendermap = require('./util/rendermap');\n\nvar _rendermap2 = _interopRequireDefault(_rendermap);\n\nvar _keybinding = require('./util/keybinding');\n\nvar _keybinding2 = _interopRequireDefault(_keybinding);\n\nvar _constants = require('./util/constants');\n\nvar _beforeinput = require('./util/beforeinput');\n\nvar _beforeinput2 = _interopRequireDefault(_beforeinput);\n\nvar _blockStyleFn = require('./util/blockStyleFn');\n\nvar _blockStyleFn2 = _interopRequireDefault(_blockStyleFn);\n\nvar _model = require('./model');\n\nvar _image = require('./components/sides/image');\n\nvar _image2 = _interopRequireDefault(_image);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\nA wrapper over `draft-js`'s default **Editor** component which provides\nsome built-in customisations like custom blocks (todo, caption, etc) and\nsome key handling for ease of use so that users' mouse usage is minimum.\n*/\n\n\nvar MediumDraftEditor = function (_React$Component) {\n  _inherits(MediumDraftEditor, _React$Component);\n\n  function MediumDraftEditor(props) {\n    _classCallCheck(this, MediumDraftEditor);\n\n    var _this = _possibleConstructorReturn(this, (MediumDraftEditor.__proto__ || Object.getPrototypeOf(MediumDraftEditor)).call(this, props));\n\n    _this.onUpArrow = function (e) {\n      var editorState = _this.props.editorState;\n      var content = editorState.getCurrentContent();\n      var selection = editorState.getSelection();\n      var key = selection.getAnchorKey();\n      var currentBlock = content.getBlockForKey(key);\n      var firstBlock = content.getFirstBlock();\n\n      if (firstBlock.getKey() === key) {\n        if (firstBlock.getType().indexOf(_constants.Block.ATOMIC) === 0) {\n          e.preventDefault();\n          var newBlock = new _draftJs.ContentBlock({\n            type: _constants.Block.UNSTYLED,\n            key: (0, _draftJs.genKey)()\n          });\n          var newBlockMap = (0, _immutable.OrderedMap)([[newBlock.getKey(), newBlock]]).concat(content.getBlockMap());\n          var newContent = content.merge({\n            blockMap: newBlockMap,\n            selectionAfter: selection.merge({\n              anchorKey: newBlock.getKey(),\n              focusKey: newBlock.getKey(),\n              anchorOffset: 0,\n              focusOffset: 0,\n              isBackward: false\n            })\n          });\n\n          _this.onChange(_draftJs.EditorState.push(editorState, newContent, 'insert-characters'));\n        }\n      } else if (currentBlock.getType().indexOf(_constants.Block.ATOMIC) === 0) {\n        var blockBefore = content.getBlockBefore(key);\n\n        if (!blockBefore) {\n          return;\n        }\n\n        e.preventDefault();\n        var newSelection = selection.merge({\n          anchorKey: blockBefore.getKey(),\n          focusKey: blockBefore.getKey(),\n          anchorOffset: blockBefore.getLength(),\n          focusOffset: blockBefore.getLength(),\n          isBackward: false\n        });\n\n        _this.onChange(_draftJs.EditorState.forceSelection(editorState, newSelection));\n      }\n    };\n\n    _this.removeLink = function (blockKey, entityKey) {\n      var editorState = _this.props.editorState;\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(blockKey);\n      var oldSelection = editorState.getSelection();\n      block.findEntityRanges(function (character) {\n        var eKey = character.getEntity();\n        return eKey === entityKey;\n      }, function (start, end) {\n        var selection = new _draftJs.SelectionState({\n          anchorKey: blockKey,\n          focusKey: blockKey,\n          anchorOffset: start,\n          focusOffset: end\n        });\n\n        var newEditorState = _draftJs.EditorState.forceSelection(_draftJs.RichUtils.toggleLink(editorState, selection, null), oldSelection);\n\n        _this.onChange(newEditorState, _this.focus);\n      });\n    };\n\n    _this.editLinkAfterSelection = function (blockKey) {\n      var entityKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (entityKey === null) {\n        return;\n      }\n\n      var editorState = _this.props.editorState;\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(blockKey);\n      block.findEntityRanges(function (character) {\n        var eKey = character.getEntity();\n        return eKey === entityKey;\n      }, function (start, end) {\n        var selection = new _draftJs.SelectionState({\n          anchorKey: blockKey,\n          focusKey: blockKey,\n          anchorOffset: start,\n          focusOffset: end\n        });\n\n        var newEditorState = _draftJs.EditorState.forceSelection(editorState, selection);\n\n        _this.onChange(newEditorState);\n\n        setTimeout(function () {\n          if (_this.toolbar) {\n            _this.toolbar.handleLinkInput(null, true);\n          }\n        }, 100);\n      });\n    };\n\n    _this.handlePastedText = function (text, html, es) {\n      var currentBlock = (0, _model.getCurrentBlock)(_this.props.editorState);\n\n      if (currentBlock.getType() === _constants.Block.IMAGE) {\n        var editorState = _this.props.editorState;\n        var content = editorState.getCurrentContent();\n\n        _this.onChange(_draftJs.EditorState.push(editorState, _draftJs.Modifier.insertText(content, editorState.getSelection(), text)));\n\n        return _constants.HANDLED;\n      }\n\n      if (_this.props.handlePastedText && _this.props.handlePastedText(text, html, es) === _constants.HANDLED) {\n        return _constants.HANDLED;\n      }\n\n      return _constants.NOT_HANDLED;\n    };\n\n    _this.focus = function () {\n      return _this._editorNode.focus();\n    };\n\n    _this.onChange = function (editorState, cb) {\n      _this.props.onChange(editorState, cb);\n    };\n\n    _this.getEditorState = function () {\n      return _this.props.editorState;\n    };\n\n    _this.onTab = _this.onTab.bind(_this);\n    _this.handleKeyCommand = _this.handleKeyCommand.bind(_this);\n    _this.handleBeforeInput = _this.handleBeforeInput.bind(_this);\n    _this.handleReturn = _this.handleReturn.bind(_this);\n    _this.toggleBlockType = _this._toggleBlockType.bind(_this);\n    _this.toggleInlineStyle = _this._toggleInlineStyle.bind(_this);\n    _this.setLink = _this.setLink.bind(_this);\n    _this.blockRendererFn = _this.props.rendererFn(_this.onChange, _this.getEditorState, _this.props);\n    return _this;\n  }\n  /**\n   * Implemented to provide nesting of upto 2 levels in ULs or OLs.\n   */\n\n\n  _createClass(MediumDraftEditor, [{\n    key: 'onTab',\n    value: function onTab(e) {\n      if (this.props.onTab) {\n        this.props.onTab(e);\n        return;\n      }\n\n      var editorState = this.props.editorState;\n\n      var newEditorState = _draftJs.RichUtils.onTab(e, editorState, 2);\n\n      if (newEditorState !== editorState) {\n        this.onChange(newEditorState);\n      }\n    }\n  }, {\n    key: 'setLink',\n\n    /*\n    Adds a hyperlink on the selected text with some basic checks.\n    */\n    value: function setLink(url) {\n      var editorState = this.props.editorState;\n      var selection = editorState.getSelection();\n      var content = editorState.getCurrentContent();\n      var entityKey = null;\n      var newUrl = url;\n\n      if (this.props.processURL) {\n        newUrl = this.props.processURL(url);\n      } else if (url.indexOf('http') !== 0 && url.indexOf('mailto:') !== 0) {\n        if (url.indexOf('@') >= 0) {\n          newUrl = 'mailto:' + newUrl;\n        } else {\n          newUrl = 'http://' + newUrl;\n        }\n      }\n\n      if (newUrl !== '') {\n        var contentWithEntity = content.createEntity(_constants.Entity.LINK, 'MUTABLE', {\n          url: newUrl\n        });\n        editorState = _draftJs.EditorState.push(editorState, contentWithEntity, 'create-entity');\n        entityKey = contentWithEntity.getLastCreatedEntityKey();\n      }\n\n      this.onChange(_draftJs.RichUtils.toggleLink(editorState, selection, entityKey), this.focus);\n    }\n    /**\n     * Override which text modifications are available according BLOCK_BUTTONS style property.\n     * Defaults all of them if no toolbarConfig.block passed:\n     *   block: ['ordered-list-item', 'unordered-list-item', 'blockquote', 'header-three', 'todo'],\n     * Example parameter: toolbarConfig = {\n     *   block: ['ordered-list-item', 'unordered-list-item'],\n     *   inline: ['BOLD', 'ITALIC', 'UNDERLINE', 'hyperlink'],\n     * };\n     */\n\n  }, {\n    key: 'configureToolbarBlockOptions',\n    value: function configureToolbarBlockOptions(toolbarConfig) {\n      var blockButtons = this.props.blockButtons;\n      return toolbarConfig && toolbarConfig.block ? toolbarConfig.block.map(function (type) {\n        return blockButtons.find(function (button) {\n          return button.style === type;\n        });\n      }).filter(function (button) {\n        return button !== undefined;\n      }) : blockButtons;\n    }\n    /**\n     * Override which text modifications are available according INLINE_BUTTONS style property.\n     * CASE SENSITIVE. Would be good clean up to lowercase inline styles consistently.\n     * Defaults all of them if no toolbarConfig.inline passed:\n     *   inline: ['BOLD', 'ITALIC', 'UNDERLINE', 'hyperlink', 'HIGHLIGHT'],\n     * Example parameter: toolbarConfig = {\n     *   block: ['ordered-list-item', 'unordered-list-item'],\n     *   inline: ['BOLD', 'ITALIC', 'UNDERLINE', 'hyperlink'],\n     * };\n     */\n\n  }, {\n    key: 'configureToolbarInlineOptions',\n    value: function configureToolbarInlineOptions(toolbarConfig) {\n      var inlineButtons = this.props.inlineButtons;\n      return toolbarConfig && toolbarConfig.inline ? toolbarConfig.inline.map(function (type) {\n        return inlineButtons.find(function (button) {\n          return button.style === type;\n        });\n      }).filter(function (button) {\n        return button !== undefined;\n      }) : inlineButtons;\n    }\n    /*\n    Handles custom commands based on various key combinations. First checks\n    for some built-in commands. If found, that command's function is apllied and returns.\n    If not found, it checks whether parent component handles that command or not.\n    Some of the internal commands are:\n     - showlinkinput -> Opens up the link input tooltip if some text is selected.\n    - add-new-block -> Adds a new block at the current cursor position.\n    - changetype:block-type -> If the command starts with `changetype:` and\n      then succeeded by the block type, the current block will be converted to that particular type.\n    - toggleinline:inline-type -> If the command starts with `toggleinline:` and\n      then succeeded by the inline type, the current selection's inline type will be\n      togglled.\n    */\n\n  }, {\n    key: 'handleKeyCommand',\n    value: function handleKeyCommand(command) {\n      // console.log(command);\n      var editorState = this.props.editorState;\n\n      if (this.props.handleKeyCommand) {\n        var behaviour = this.props.handleKeyCommand(command);\n\n        if (behaviour === _constants.HANDLED || behaviour === true) {\n          return _constants.HANDLED;\n        }\n      }\n\n      if (command === _constants.KEY_COMMANDS.showLinkInput()) {\n        if (!this.props.disableToolbar && this.toolbar) {\n          // For some reason, scroll is jumping sometimes for the below code.\n          // Debug and fix it later.\n          var isCursorLink = (0, _model.isCursorBetweenLink)(editorState);\n\n          if (isCursorLink) {\n            this.editLinkAfterSelection(isCursorLink.blockKey, isCursorLink.entityKey);\n            return _constants.HANDLED;\n          }\n\n          this.toolbar.handleLinkInput(null, true);\n          return _constants.HANDLED;\n        }\n\n        return _constants.NOT_HANDLED;\n      } else if (command === _constants.KEY_COMMANDS.unlink()) {\n        var _isCursorLink = (0, _model.isCursorBetweenLink)(editorState);\n\n        if (_isCursorLink) {\n          this.removeLink(_isCursorLink.blockKey, _isCursorLink.entityKey);\n          return _constants.HANDLED;\n        }\n      }\n      /* else if (command === KEY_COMMANDS.addNewBlock()) {\n        const { editorState } = this.props;\n        this.onChange(addNewBlock(editorState, Block.BLOCKQUOTE));\n        return HANDLED;\n      } */\n\n\n      var block = (0, _model.getCurrentBlock)(editorState);\n      var currentBlockType = block.getType(); // if (command === KEY_COMMANDS.deleteBlock()) {\n      //   if (currentBlockType.indexOf(Block.ATOMIC) === 0 && block.getText().length === 0) {\n      //     this.onChange(resetBlockWithType(editorState, Block.UNSTYLED, { text: '' }));\n      //     return HANDLED;\n      //   }\n      //   return NOT_HANDLED;\n      // }\n\n      if (command.indexOf('' + _constants.KEY_COMMANDS.changeType()) === 0) {\n        var newBlockType = command.split(':')[1]; // const currentBlockType = block.getType();\n\n        if (currentBlockType === _constants.Block.ATOMIC) {\n          return _constants.HANDLED;\n        }\n\n        if (currentBlockType === _constants.Block.BLOCKQUOTE && newBlockType === _constants.Block.CAPTION) {\n          newBlockType = _constants.Block.BLOCKQUOTE_CAPTION;\n        } else if (currentBlockType === _constants.Block.BLOCKQUOTE_CAPTION && newBlockType === _constants.Block.CAPTION) {\n          newBlockType = _constants.Block.BLOCKQUOTE;\n        }\n\n        this.onChange(_draftJs.RichUtils.toggleBlockType(editorState, newBlockType));\n        return _constants.HANDLED;\n      } else if (command.indexOf('' + _constants.KEY_COMMANDS.toggleInline()) === 0) {\n        var inline = command.split(':')[1];\n\n        this._toggleInlineStyle(inline);\n\n        return _constants.HANDLED;\n      }\n\n      var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return _constants.HANDLED;\n      }\n\n      return _constants.NOT_HANDLED;\n    }\n    /*\n    This function is responsible for emitting various commands based on various key combos.\n    */\n\n  }, {\n    key: 'handleBeforeInput',\n    value: function handleBeforeInput(str) {\n      return this.props.beforeInput(this.props.editorState, str, this.onChange, this.props.stringToTypeMap);\n    }\n    /*\n    By default, it handles return key for inserting soft breaks (BRs in HTML) and\n    also instead of inserting a new empty block after current empty block, it first check\n    whether the current block is of a type other than `unstyled`. If yes, current block is\n    simply converted to an unstyled empty block. If RETURN is pressed on an unstyled block\n    default behavior is executed.\n    */\n\n  }, {\n    key: 'handleReturn',\n    value: function handleReturn(e) {\n      if (this.props.handleReturn) {\n        var behavior = this.props.handleReturn(e);\n\n        if (behavior === _constants.HANDLED || behavior === true) {\n          return _constants.HANDLED;\n        }\n      }\n\n      var editorState = this.props.editorState;\n\n      if ((0, _isSoftNewlineEvent2.default)(e)) {\n        this.onChange(_draftJs.RichUtils.insertSoftNewline(editorState));\n        return _constants.HANDLED;\n      }\n\n      if (!e.altKey && !e.metaKey && !e.ctrlKey) {\n        var currentBlock = (0, _model.getCurrentBlock)(editorState);\n        var blockType = currentBlock.getType();\n\n        if (blockType.indexOf(_constants.Block.ATOMIC) === 0) {\n          this.onChange((0, _model.addNewBlockAt)(editorState, currentBlock.getKey()));\n          return _constants.HANDLED;\n        }\n\n        if (currentBlock.getLength() === 0) {\n          switch (blockType) {\n            case _constants.Block.UL:\n            case _constants.Block.OL:\n            case _constants.Block.BLOCKQUOTE:\n            case _constants.Block.BLOCKQUOTE_CAPTION:\n            case _constants.Block.CAPTION:\n            case _constants.Block.TODO:\n            case _constants.Block.H2:\n            case _constants.Block.H3:\n            case _constants.Block.H1:\n              this.onChange((0, _model.resetBlockWithType)(editorState, _constants.Block.UNSTYLED));\n              return _constants.HANDLED;\n\n            default:\n              return _constants.NOT_HANDLED;\n          }\n        }\n\n        var selection = editorState.getSelection();\n\n        if (selection.isCollapsed() && currentBlock.getLength() === selection.getStartOffset()) {\n          if (this.props.continuousBlocks.indexOf(blockType) < 0) {\n            this.onChange((0, _model.addNewBlockAt)(editorState, currentBlock.getKey()));\n            return _constants.HANDLED;\n          }\n\n          return _constants.NOT_HANDLED;\n        }\n\n        return _constants.NOT_HANDLED;\n      }\n\n      return _constants.NOT_HANDLED;\n    }\n    /*\n    The function documented in `draft-js` to be used to toggle block types (mainly\n    for some key combinations handled by default inside draft-js).\n    */\n\n  }, {\n    key: '_toggleBlockType',\n    value: function _toggleBlockType(blockType) {\n      var type = _draftJs.RichUtils.getCurrentBlockType(this.props.editorState);\n\n      if (type.indexOf(_constants.Block.ATOMIC + ':') === 0) {\n        return;\n      }\n\n      this.onChange(_draftJs.RichUtils.toggleBlockType(this.props.editorState, blockType));\n    }\n    /*\n    The function documented in `draft-js` to be used to toggle inline styles of selection (mainly\n    for some key combinations handled by default inside draft-js).\n    */\n\n  }, {\n    key: '_toggleInlineStyle',\n    value: function _toggleInlineStyle(inlineStyle) {\n      this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.props.editorState, inlineStyle));\n    }\n    /**\n     * Handle pasting when cursor is in an image block. Paste the text as the\n     * caption. Otherwise, let Draft do its thing.\n     */\n\n  }, {\n    key: 'render',\n\n    /*\n    Renders the `Editor`, `Toolbar` and the side `AddButton`.\n    */\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          editorState = _props.editorState,\n          editorEnabled = _props.editorEnabled,\n          disableToolbar = _props.disableToolbar,\n          showLinkEditToolbar = _props.showLinkEditToolbar,\n          toolbarConfig = _props.toolbarConfig;\n      var showAddButton = editorEnabled;\n      var editorClass = 'md-RichEditor-editor' + (!editorEnabled ? ' md-RichEditor-readonly' : '');\n      var isCursorLink = false;\n\n      if (editorEnabled && showLinkEditToolbar) {\n        isCursorLink = (0, _model.isCursorBetweenLink)(editorState);\n      }\n\n      var blockButtons = this.configureToolbarBlockOptions(toolbarConfig);\n      var inlineButtons = this.configureToolbarInlineOptions(toolbarConfig);\n      return _react2.default.createElement('div', {\n        className: 'md-RichEditor-root'\n      }, _react2.default.createElement('div', {\n        className: editorClass\n      }, _react2.default.createElement(_draftJs.Editor, _extends({\n        ref: function ref(node) {\n          _this2._editorNode = node;\n        }\n      }, this.props, {\n        editorState: editorState,\n        blockRendererFn: this.blockRendererFn,\n        blockStyleFn: this.props.blockStyleFn,\n        onChange: this.onChange,\n        onTab: this.onTab,\n        onUpArrow: this.onUpArrow,\n        blockRenderMap: this.props.blockRenderMap,\n        handleKeyCommand: this.handleKeyCommand,\n        handleBeforeInput: this.handleBeforeInput,\n        handleReturn: this.handleReturn,\n        handlePastedText: this.handlePastedText,\n        customStyleMap: this.props.customStyleMap,\n        readOnly: !editorEnabled,\n        keyBindingFn: this.props.keyBindingFn,\n        placeholder: this.props.placeholder,\n        spellCheck: editorEnabled && this.props.spellCheck\n      })), this.props.sideButtons.length > 0 && showAddButton && _react2.default.createElement(_addbutton2.default, {\n        editorState: editorState,\n        getEditorState: this.getEditorState,\n        setEditorState: this.onChange,\n        focus: this.focus,\n        sideButtons: this.props.sideButtons\n      }), !disableToolbar && _react2.default.createElement(_toolbar2.default, {\n        ref: function ref(c) {\n          _this2.toolbar = c;\n        },\n        editorNode: this._editorNode,\n        editorState: editorState,\n        toggleBlockType: this.toggleBlockType,\n        toggleInlineStyle: this.toggleInlineStyle,\n        editorEnabled: editorEnabled,\n        setLink: this.setLink,\n        focus: this.focus,\n        blockButtons: blockButtons,\n        inlineButtons: inlineButtons\n      }), isCursorLink && _react2.default.createElement(_LinkEditComponent2.default, _extends({}, isCursorLink, {\n        editorState: editorState,\n        removeLink: this.removeLink,\n        editLink: this.editLinkAfterSelection\n      }))));\n    }\n  }]);\n\n  return MediumDraftEditor;\n}(_react2.default.Component);\n\nMediumDraftEditor.propTypes = {\n  beforeInput: _propTypes2.default.func,\n  keyBindingFn: _propTypes2.default.func,\n  customStyleMap: _propTypes2.default.object,\n  blockStyleFn: _propTypes2.default.func,\n  rendererFn: _propTypes2.default.func,\n  editorEnabled: _propTypes2.default.bool,\n  spellCheck: _propTypes2.default.bool,\n  stringToTypeMap: _propTypes2.default.object,\n  blockRenderMap: _propTypes2.default.object,\n  blockButtons: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element, _propTypes2.default.object]),\n    style: _propTypes2.default.string.isRequired,\n    icon: _propTypes2.default.string,\n    description: _propTypes2.default.string,\n    onClick: _propTypes2.default.func\n  })),\n  inlineButtons: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element, _propTypes2.default.object]),\n    style: _propTypes2.default.string.isRequired,\n    icon: _propTypes2.default.string,\n    description: _propTypes2.default.string,\n    onClick: _propTypes2.default.func\n  })),\n  placeholder: _propTypes2.default.string,\n  imageCaptionPlaceholder: _propTypes2.default.string,\n  continuousBlocks: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  sideButtons: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    title: _propTypes2.default.string.isRequired,\n    component: _propTypes2.default.func\n  })),\n  editorState: _propTypes2.default.object.isRequired,\n  onChange: _propTypes2.default.func.isRequired,\n  onTab: _propTypes2.default.func,\n  handleKeyCommand: _propTypes2.default.func,\n  handleReturn: _propTypes2.default.func,\n  handlePastedText: _propTypes2.default.func,\n  disableToolbar: _propTypes2.default.bool,\n  showLinkEditToolbar: _propTypes2.default.bool,\n  toolbarConfig: _propTypes2.default.object,\n  processURL: _propTypes2.default.func\n};\nMediumDraftEditor.defaultProps = {\n  beforeInput: _beforeinput2.default,\n  keyBindingFn: _keybinding2.default,\n  customStyleMap: _customstylemap2.default,\n  blockStyleFn: _blockStyleFn2.default,\n  rendererFn: _customrenderer2.default,\n  editorEnabled: true,\n  spellCheck: true,\n  stringToTypeMap: _beforeinput.StringToTypeMap,\n  blockRenderMap: _rendermap2.default,\n  blockButtons: _toolbar.BLOCK_BUTTONS,\n  inlineButtons: _toolbar.INLINE_BUTTONS,\n  placeholder: 'Write your story...',\n  imageCaptionPlaceholder: 'Add image caption...',\n  continuousBlocks: [_constants.Block.UNSTYLED, _constants.Block.BLOCKQUOTE, _constants.Block.OL, _constants.Block.UL, _constants.Block.CODE, _constants.Block.TODO],\n  sideButtons: [{\n    title: 'Image',\n    component: _image2.default\n  }],\n  disableToolbar: false,\n  showLinkEditToolbar: true,\n  toolbarConfig: {}\n};\nexports.default = MediumDraftEditor;","map":null,"metadata":{},"sourceType":"script"}