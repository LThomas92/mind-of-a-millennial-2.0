{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar validateNames = require(\"../helpers/validate-names\");\n\nvar DocumentType = require(\"../generated/DocumentType\");\n\nvar Document = require(\"../generated/Document\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS,\n    SVG_NS = _require.SVG_NS;\n\nvar DOMImplementationImpl =\n/*#__PURE__*/\nfunction () {\n  function DOMImplementationImpl(args, privateData) {\n    _classCallCheck(this, DOMImplementationImpl);\n\n    this._ownerDocument = privateData.ownerDocument;\n    this._features = Object.create(null);\n  }\n\n  _createClass(DOMImplementationImpl, [{\n    key: \"hasFeature\",\n    value: function hasFeature() {\n      return true;\n    }\n  }, {\n    key: \"createDocumentType\",\n    value: function createDocumentType(qualifiedName, publicId, systemId) {\n      validateNames.qname(qualifiedName);\n      return DocumentType.createImpl([], {\n        ownerDocument: this._ownerDocument,\n        name: qualifiedName,\n        publicId: publicId,\n        systemId: systemId\n      });\n    }\n  }, {\n    key: \"createDocument\",\n    value: function createDocument(namespace, qualifiedName, doctype) {\n      var contentType = \"application/xml\";\n\n      if (namespace === HTML_NS) {\n        contentType = \"application/xhtml+xml\";\n      } else if (namespace === SVG_NS) {\n        contentType = \"image/svg+xml\";\n      }\n\n      var document = Document.createImpl([], {\n        options: {\n          contentType: contentType,\n          parsingMode: \"xml\",\n          encoding: \"UTF-8\"\n        }\n      });\n      var element = null;\n\n      if (qualifiedName !== \"\") {\n        element = document.createElementNS(namespace, qualifiedName);\n      }\n\n      if (doctype !== null) {\n        document.appendChild(doctype);\n      }\n\n      if (element !== null) {\n        document.appendChild(element);\n      }\n\n      document.origin = this._ownerDocument.origin;\n      return document;\n    }\n  }, {\n    key: \"createHTMLDocument\",\n    value: function createHTMLDocument(title) {\n      // Let doc be a new document that is an HTML document.\n      // Set doc's content type to \"text/html\".\n      var document = Document.createImpl([], {\n        options: {\n          parsingMode: \"html\",\n          encoding: \"UTF-8\"\n        }\n      }); // Create a doctype, with \"html\" as its name and with its node document set\n      // to doc. Append the newly created node to doc.\n\n      var doctype = DocumentType.createImpl([], {\n        ownerDocument: this,\n        name: \"html\",\n        publicId: \"\",\n        systemId: \"\"\n      });\n      document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.\n\n      var htmlElement = document.createElementNS(HTML_NS, \"html\");\n      document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html\n      // element created in the previous step.\n\n      var headElement = document.createElement(\"head\");\n      htmlElement.appendChild(headElement); // If the title argument is not omitted:\n\n      if (title !== undefined) {\n        // Create a title element in the HTML namespace, and append it to the head\n        // element created in the previous step.\n        var titleElement = document.createElement(\"title\");\n        headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty\n        // string), and append it to the title element created in the previous step.\n\n        titleElement.appendChild(document.createTextNode(title));\n      } // Create a body element in the HTML namespace, and append it to the html\n      // element created in the earlier step.\n\n\n      htmlElement.appendChild(document.createElement(\"body\")); // doc's origin is an alias to the origin of the context object's associated\n      // document, and doc's effective script origin is an alias to the effective\n      // script origin of the context object's associated document.\n\n      return document;\n    }\n  }, {\n    key: \"_removeFeature\",\n    value: function _removeFeature(feature, version) {\n      feature = feature.toLowerCase();\n\n      if (this._features[feature]) {\n        if (version) {\n          var versions = this._features[feature];\n\n          for (var j = 0; j < versions.length; j++) {\n            if (versions[j] === version) {\n              versions.splice(j, 1);\n              return;\n            }\n          }\n        } else {\n          delete this._features[feature];\n        }\n      }\n    }\n  }, {\n    key: \"_addFeature\",\n    value: function _addFeature(feature, version) {\n      feature = feature.toLowerCase();\n\n      if (version) {\n        if (!this._features[feature]) {\n          this._features[feature] = [];\n        }\n\n        if (version instanceof Array) {\n          Array.prototype.push.apply(this._features[feature], version);\n        } else {\n          this._features[feature].push(version);\n        }\n      } else {\n        this._features[feature] = [];\n      }\n    }\n  }, {\n    key: \"_hasFeature\",\n    value: function _hasFeature(feature, version) {\n      feature = feature ? feature.toLowerCase() : \"\";\n      var versions = this._features[feature] || false;\n\n      if (!version && versions.length && versions.length > 0) {\n        return true;\n      } else if (typeof versions === \"string\") {\n        return versions === version;\n      } else if (versions.indexOf && versions.length > 0) {\n        for (var i = 0; i < versions.length; i++) {\n          var found = versions[i] instanceof RegExp ? versions[i].test(version) : versions[i] === version;\n\n          if (found) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return false;\n    }\n  }]);\n\n  return DOMImplementationImpl;\n}();\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};","map":null,"metadata":{},"sourceType":"script"}