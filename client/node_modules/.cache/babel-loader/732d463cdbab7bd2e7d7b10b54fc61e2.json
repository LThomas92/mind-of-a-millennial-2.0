{"ast":null,"code":"\"use strict\";\n\nvar DOMException = require(\"domexception\");\n\nvar attrGenerated = require(\"./generated/Attr\");\n\nvar _require = require(\"./helpers/strings\"),\n    asciiLowercase = _require.asciiLowercase;\n\nvar _require2 = require(\"./helpers/namespaces\"),\n    HTML_NS = _require2.HTML_NS; // The following three are for https://dom.spec.whatwg.org/#concept-element-attribute-has. We don't just have a\n// predicate tester since removing that kind of flexibility gives us the potential for better future optimizations.\n\n\nexports.hasAttribute = function (element, A) {\n  return element._attributeList.includes(A);\n};\n\nexports.hasAttributeByName = function (element, name) {\n  return element._attributesByNameMap.has(name);\n};\n\nexports.hasAttributeByNameNS = function (element, namespace, localName) {\n  return element._attributeList.some(function (attribute) {\n    return attribute._localName === localName && attribute._namespace === namespace;\n  });\n};\n\nexports.changeAttribute = function (element, attribute, value) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-change\n  var oldValue = attribute._value;\n  attribute._value = value; // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is changed.\"\n\n  element._attrModified(attribute._qualifiedName, value, oldValue);\n};\n\nexports.appendAttribute = function (element, attribute) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-append\n  var attributeList = element._attributeList; // TODO mutation observer stuff\n\n  attributeList.push(attribute);\n  attribute._element = element; // Sync name cache\n\n  var name = attribute._qualifiedName;\n  var cache = element._attributesByNameMap;\n  var entry = cache.get(name);\n\n  if (!entry) {\n    entry = [];\n    cache.set(name, entry);\n  }\n\n  entry.push(attribute); // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is added.\"\n\n  element._attrModified(name, attribute._value, null);\n};\n\nexports.removeAttribute = function (element, attribute) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove\n  var attributeList = element._attributeList; // TODO mutation observer stuff\n\n  for (var i = 0; i < attributeList.length; ++i) {\n    if (attributeList[i] === attribute) {\n      attributeList.splice(i, 1);\n      attribute._element = null; // Sync name cache\n\n      var name = attribute._qualifiedName;\n      var cache = element._attributesByNameMap;\n      var entry = cache.get(name);\n      entry.splice(entry.indexOf(attribute), 1);\n\n      if (entry.length === 0) {\n        cache.delete(name);\n      } // Run jsdom hooks; roughly correspond to spec's \"An attribute is removed.\"\n\n\n      element._attrModified(name, null, attribute._value);\n\n      return;\n    }\n  }\n};\n\nexports.replaceAttribute = function (element, oldAttr, newAttr) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-replace\n  var attributeList = element._attributeList; // TODO mutation observer stuff\n\n  for (var i = 0; i < attributeList.length; ++i) {\n    if (attributeList[i] === oldAttr) {\n      attributeList.splice(i, 1, newAttr);\n      oldAttr._element = null;\n      newAttr._element = element; // Sync name cache\n\n      var name = newAttr._qualifiedName;\n      var cache = element._attributesByNameMap;\n      var entry = cache.get(name);\n\n      if (!entry) {\n        entry = [];\n        cache.set(name, entry);\n      }\n\n      entry.splice(entry.indexOf(oldAttr), 1, newAttr); // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is changed.\"\n\n      element._attrModified(name, newAttr._value, oldAttr._value);\n\n      return;\n    }\n  }\n};\n\nexports.getAttributeByName = function (element, name) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name\n  if (element._namespaceURI === HTML_NS && element._ownerDocument._parsingMode === \"html\") {\n    name = asciiLowercase(name);\n  }\n\n  var cache = element._attributesByNameMap;\n  var entry = cache.get(name);\n\n  if (!entry) {\n    return null;\n  }\n\n  return entry[0];\n};\n\nexports.getAttributeByNameNS = function (element, namespace, localName) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  var attributeList = element._attributeList;\n\n  for (var i = 0; i < attributeList.length; ++i) {\n    var attr = attributeList[i];\n\n    if (attr._namespace === namespace && attr._localName === localName) {\n      return attr;\n    }\n  }\n\n  return null;\n}; // Both of the following functions implement https://dom.spec.whatwg.org/#concept-element-attributes-get-value.\n// Separated them into two to keep symmetry with other functions.\n\n\nexports.getAttributeValue = function (element, localName) {\n  var attr = exports.getAttributeByNameNS(element, null, localName);\n\n  if (!attr) {\n    return \"\";\n  }\n\n  return attr._value;\n};\n\nexports.getAttributeValueNS = function (element, namespace, localName) {\n  var attr = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (!attr) {\n    return \"\";\n  }\n\n  return attr._value;\n};\n\nexports.setAttribute = function (element, attr) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-set\n  if (attr._element !== null && attr._element !== element) {\n    throw new DOMException(\"The attribute is in use.\", \"InUseAttributeError\");\n  }\n\n  var oldAttr = exports.getAttributeByNameNS(element, attr._namespace, attr._localName);\n\n  if (oldAttr === attr) {\n    return attr;\n  }\n\n  if (oldAttr !== null) {\n    exports.replaceAttribute(element, oldAttr, attr);\n  } else {\n    exports.appendAttribute(element, attr);\n  }\n\n  return oldAttr;\n};\n\nexports.setAttributeValue = function (element, localName, value, prefix, namespace) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-set-value\n  if (prefix === undefined) {\n    prefix = null;\n  }\n\n  if (namespace === undefined) {\n    namespace = null;\n  }\n\n  var attribute = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (attribute === null) {\n    var newAttribute = attrGenerated.createImpl([], {\n      namespace: namespace,\n      namespacePrefix: prefix,\n      localName: localName,\n      value: value\n    });\n    exports.appendAttribute(element, newAttribute);\n    return;\n  }\n\n  exports.changeAttribute(element, attribute, value);\n};\n\nexports.setAnExistingAttributeValue = function (attribute, value) {\n  if (attribute._element === null) {\n    attribute._value = value;\n  }\n\n  exports.changeAttribute(attribute._element, attribute, value);\n};\n\nexports.removeAttributeByName = function (element, name) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-name\n  var attr = exports.getAttributeByName(element, name);\n\n  if (attr !== null) {\n    exports.removeAttribute(element, attr);\n  }\n\n  return attr;\n};\n\nexports.removeAttributeByNameNS = function (element, namespace, localName) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace\n  var attr = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (attr !== null) {\n    exports.removeAttribute(element, attr);\n  }\n\n  return attr;\n};\n\nexports.copyAttributeList = function (sourceElement, destElement) {\n  // Needed by https://dom.spec.whatwg.org/#concept-node-clone\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sourceElement._attributeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var sourceAttr = _step.value;\n      var destAttr = attrGenerated.createImpl([], {\n        namespace: sourceAttr._namespace,\n        namespacePrefix: sourceAttr._namespacePrefix,\n        localName: sourceAttr._localName,\n        value: sourceAttr._value\n      });\n      exports.appendAttribute(destElement, destAttr);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nexports.attributeListsEqual = function (elementA, elementB) {\n  // Needed by https://dom.spec.whatwg.org/#concept-node-equals\n  var listA = elementA._attributeList;\n  var listB = elementB._attributeList;\n\n  if (listA.length !== listB.length) {\n    return false;\n  }\n\n  var _loop = function _loop(i) {\n    var attrA = listA[i];\n\n    if (!listB.some(function (attrB) {\n      return equalsA(attrB);\n    })) {\n      return {\n        v: false\n      };\n    }\n\n    function equalsA(attrB) {\n      return attrA._namespace === attrB._namespace && attrA._localName === attrB._localName && attrA._value === attrB._value;\n    }\n  };\n\n  for (var i = 0; i < listA.length; ++i) {\n    var _ret = _loop(i);\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return true;\n};\n\nexports.attributeNames = function (element) {\n  // Needed by https://dom.spec.whatwg.org/#dom-element-getattributenames\n  return element._attributeList.map(function (a) {\n    return a._qualifiedName;\n  });\n};\n\nexports.hasAttributes = function (element) {\n  // Needed by https://dom.spec.whatwg.org/#dom-element-hasattributes\n  return element._attributeList.length > 0;\n};","map":null,"metadata":{},"sourceType":"script"}