{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar querystring = require(\"querystring\");\n\nvar DOMException = require(\"domexception\");\n\nvar EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nvar ProgressEvent = require(\"../generated/ProgressEvent\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;\n\nvar READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nvar events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nvar FileReaderImpl =\n/*#__PURE__*/\nfunction (_EventTargetImpl) {\n  _inherits(FileReaderImpl, _EventTargetImpl);\n\n  function FileReaderImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, FileReaderImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileReaderImpl).call(this, [], privateData));\n    _this.error = null;\n    _this.readyState = READY_STATES.EMPTY;\n    _this.result = null;\n    _this._ownerDocument = privateData.window.document;\n    _this._terminated = false;\n    return _this;\n  }\n\n  _createClass(FileReaderImpl, [{\n    key: \"readAsArrayBuffer\",\n    value: function readAsArrayBuffer(file) {\n      this._readFile(file, \"buffer\");\n    }\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(file) {\n      this._readFile(file, \"binaryString\");\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(file) {\n      this._readFile(file, \"dataURL\");\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(file, encoding) {\n      this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n        this.result = null;\n        return;\n      }\n\n      if (this.readyState === READY_STATES.LOADING) {\n        this.readyState = READY_STATES.DONE;\n        this.result = null;\n      }\n\n      this._terminated = true;\n\n      this._fireProgressEvent(\"abort\");\n\n      this._fireProgressEvent(\"loadend\");\n    }\n  }, {\n    key: \"_fireProgressEvent\",\n    value: function _fireProgressEvent(name, props) {\n      var event = ProgressEvent.createImpl([name, Object.assign({\n        bubbles: false,\n        cancelable: false\n      }, props)], {});\n      this.dispatchEvent(event);\n    }\n  }, {\n    key: \"_readFile\",\n    value: function _readFile(file, format, encoding) {\n      var _this2 = this;\n\n      if (this.readyState === READY_STATES.LOADING) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this.readyState = READY_STATES.LOADING;\n      setImmediate(function () {\n        if (_this2._terminated) {\n          _this2._terminated = false;\n          return;\n        }\n\n        _this2._fireProgressEvent(\"loadstart\");\n\n        var data = file._buffer;\n\n        if (!data) {\n          data = Buffer.alloc(0);\n        }\n\n        _this2._fireProgressEvent(\"progress\", {\n          lengthComputable: !isNaN(file.size),\n          total: file.size,\n          loaded: data.length\n        });\n\n        setImmediate(function () {\n          if (_this2._terminated) {\n            _this2._terminated = false;\n            return;\n          }\n\n          switch (format) {\n            default:\n            case \"buffer\":\n              {\n                _this2.result = new Uint8Array(data).buffer;\n                break;\n              }\n\n            case \"binaryString\":\n              {\n                _this2.result = data.toString(\"binary\");\n                break;\n              }\n\n            case \"dataURL\":\n              {\n                // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n                var dataUrl = \"data:\";\n                var contentType = MIMEType.parse(file.type);\n\n                if (contentType && contentType.type === \"text\") {\n                  var fallbackEncoding = whatwgEncoding.getBOMEncoding(data) || whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n                  var decoded = whatwgEncoding.decode(data, fallbackEncoding);\n                  contentType.parameters.set(\"charset\", encoding);\n                  dataUrl += contentType.toString();\n                  dataUrl += \",\";\n                  dataUrl += querystring.escape(decoded);\n                } else {\n                  if (contentType) {\n                    dataUrl += contentType.toString();\n                  }\n\n                  dataUrl += \";base64,\";\n                  dataUrl += data.toString(\"base64\");\n                }\n\n                _this2.result = dataUrl;\n                break;\n              }\n\n            case \"text\":\n              {\n                _this2.result = whatwgEncoding.decode(data, encoding);\n                break;\n              }\n          }\n\n          _this2.readyState = READY_STATES.DONE;\n\n          _this2._fireProgressEvent(\"load\");\n\n          _this2._fireProgressEvent(\"loadend\");\n        });\n      });\n    }\n  }]);\n\n  return FileReaderImpl;\n}(EventTargetImpl);\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":null,"metadata":{},"sourceType":"script"}