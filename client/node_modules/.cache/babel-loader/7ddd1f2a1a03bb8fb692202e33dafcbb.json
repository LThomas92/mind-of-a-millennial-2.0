{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar isBlob = require(\"./Blob.js\").is;\n\nvar convertFilePropertyBag = require(\"./FilePropertyBag.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar Blob = require(\"./Blob.js\");\n\nfunction File(fileBits, fileName) {\n  if ((this instanceof File ? this.constructor : void 0) === undefined) {\n    throw new TypeError(\"Failed to construct 'File'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to construct 'File': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (!utils.isObject(curArg)) {\n      throw new TypeError(\"Failed to construct 'File': parameter 1\" + \" is not an iterable object.\");\n    } else {\n      var V = [];\n      var tmp = curArg;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var nextItem = _step.value;\n\n          if (isBlob(nextItem)) {\n            nextItem = utils.implForWrapper(nextItem);\n          } else if (nextItem instanceof ArrayBuffer) {} else if (ArrayBuffer.isView(nextItem)) {} else {\n            nextItem = conversions[\"USVString\"](nextItem, {\n              context: \"Failed to construct 'File': parameter 1\" + \"'s element\"\n            });\n          }\n\n          V.push(nextItem);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      curArg = V;\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg = arguments[1];\n    _curArg = conversions[\"USVString\"](_curArg, {\n      context: \"Failed to construct 'File': parameter 2\"\n    });\n    args.push(_curArg);\n  }\n  {\n    var _curArg2 = arguments[2];\n    _curArg2 = convertFilePropertyBag(_curArg2, {\n      context: \"Failed to construct 'File': parameter 3\"\n    });\n    args.push(_curArg2);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(File.prototype, Blob.interface.prototype);\nObject.setPrototypeOf(File, Blob.interface);\nObject.defineProperty(File, \"prototype\", {\n  value: File.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(File.prototype, \"name\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"name\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(File.prototype, \"lastModified\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"lastModified\"];\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(File.prototype, Symbol.toStringTag, {\n  value: \"File\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var isMixedInto = _step3.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'File'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(File.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(File.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Blob._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: File,\n  expose: {\n    Window: {\n      File: File\n    },\n    Worker: {\n      File: File\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../file-api/File-impl.js\");","map":null,"metadata":{},"sourceType":"script"}