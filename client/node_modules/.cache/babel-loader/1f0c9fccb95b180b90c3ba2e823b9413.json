{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  StyleSheet: require(\"./StyleSheet\").StyleSheet,\n  CSSStyleRule: require(\"./CSSStyleRule\").CSSStyleRule\n}; ///CommonJS\n\n/**\n * @constructor\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet\n */\n\nCSSOM.CSSStyleSheet = function CSSStyleSheet() {\n  CSSOM.StyleSheet.call(this);\n  this.cssRules = [];\n};\n\nCSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet();\nCSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;\n/**\n * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.\n *\n *   sheet = new Sheet(\"body {margin: 0}\")\n *   sheet.toString()\n *   -> \"body{margin:0;}\"\n *   sheet.insertRule(\"img {border: none}\", 0)\n *   -> 0\n *   sheet.toString()\n *   -> \"img{border:none;}body{margin:0;}\"\n *\n * @param {string} rule\n * @param {number} index\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule\n * @return {number} The index within the style sheet's rule collection of the newly inserted rule.\n */\n\nCSSOM.CSSStyleSheet.prototype.insertRule = function (rule, index) {\n  if (index < 0 || index > this.cssRules.length) {\n    throw new RangeError(\"INDEX_SIZE_ERR\");\n  }\n\n  var cssRule = CSSOM.parse(rule).cssRules[0];\n  cssRule.parentStyleSheet = this;\n  this.cssRules.splice(index, 0, cssRule);\n  return index;\n};\n/**\n * Used to delete a rule from the style sheet.\n *\n *   sheet = new Sheet(\"img{border:none} body{margin:0}\")\n *   sheet.toString()\n *   -> \"img{border:none;}body{margin:0;}\"\n *   sheet.deleteRule(0)\n *   sheet.toString()\n *   -> \"body{margin:0;}\"\n *\n * @param {number} index within the style sheet's rule list of the rule to remove.\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule\n */\n\n\nCSSOM.CSSStyleSheet.prototype.deleteRule = function (index) {\n  if (index < 0 || index >= this.cssRules.length) {\n    throw new RangeError(\"INDEX_SIZE_ERR\");\n  }\n\n  this.cssRules.splice(index, 1);\n};\n/**\n * NON-STANDARD\n * @return {string} serialize stylesheet\n */\n\n\nCSSOM.CSSStyleSheet.prototype.toString = function () {\n  var result = \"\";\n  var rules = this.cssRules;\n\n  for (var i = 0; i < rules.length; i++) {\n    result += rules[i].cssText + \"\\n\";\n  }\n\n  return result;\n}; //.CommonJS\n\n\nexports.CSSStyleSheet = CSSOM.CSSStyleSheet;\nCSSOM.parse = require('./parse').parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js\n///CommonJS","map":null,"metadata":{},"sourceType":"script"}