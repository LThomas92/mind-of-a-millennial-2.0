{"ast":null,"code":"/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { eventPropTypes } from './components/EditorPropTypes';\n\nvar isValidKey = function isValidKey(keys) {\n  return function (key) {\n    return keys.indexOf(key) !== -1;\n  };\n}; // tslint:disable-next-line:ban-types\n\n\nexport var isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\nexport var bindHandlers = function bindHandlers(props, editor, initEvent) {\n  Object.keys(props).filter(isValidKey(Object.keys(eventPropTypes))).forEach(function (key) {\n    var handler = props[key];\n\n    if (isFunction(handler)) {\n      if (key === 'onInit') {\n        handler(initEvent, editor);\n      } else {\n        editor.on(key.substring(2), function (e) {\n          return handler(e, editor);\n        });\n      }\n    }\n  });\n};\nvar unique = 0;\nexport var uuid = function uuid(prefix) {\n  var date = new Date();\n  var time = date.getTime();\n  var random = Math.floor(Math.random() * 1000000000);\n  unique++;\n  return prefix + '_' + random + unique + String(time);\n};\nexport var isTextarea = function isTextarea(element) {\n  return element !== null && element.tagName.toLowerCase() === 'textarea';\n};\n\nvar normalizePluginArray = function normalizePluginArray(plugins) {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nexport var mergePlugins = function mergePlugins(initPlugins, inputPlugins) {\n  return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n};","map":null,"metadata":{},"sourceType":"module"}