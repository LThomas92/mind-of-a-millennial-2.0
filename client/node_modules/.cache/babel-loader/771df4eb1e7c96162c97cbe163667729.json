{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar NodeList = require(\"../generated/NodeList\");\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar _require = require(\"../helpers/selectors\"),\n    addNwsapi = _require.addNwsapi;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require3 = require(\"../../utils\"),\n    memoizeQuery = _require3.memoizeQuery;\n\nvar _require4 = require(\"../node\"),\n    convertNodesIntoNode = _require4.convertNodesIntoNode;\n\nvar ParentNodeImpl =\n/*#__PURE__*/\nfunction () {\n  function ParentNodeImpl() {\n    _classCallCheck(this, ParentNodeImpl);\n  }\n\n  _createClass(ParentNodeImpl, [{\n    key: \"append\",\n    value: function append() {\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      this.appendChild(convertNodesIntoNode(this._ownerDocument, nodes));\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n\n      this.insertBefore(convertNodesIntoNode(this._ownerDocument, nodes), this.firstChild);\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var _this = this;\n\n      if (!this._childrenList) {\n        this._childrenList = HTMLCollection.createImpl([], {\n          element: this,\n          query: function query() {\n            return domSymbolTree.childrenToArray(_this, {\n              filter: function filter(node) {\n                return node.nodeType === NODE_TYPE.ELEMENT_NODE;\n              }\n            });\n          }\n        });\n      } else {\n        this._childrenList._update();\n      }\n\n      return this._childrenList;\n    }\n  }, {\n    key: \"firstElementChild\",\n    get: function get() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n\n          if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n            return child;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"lastElementChild\",\n    get: function get() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = domSymbolTree.childrenIterator(this, {\n          reverse: true\n        })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var child = _step2.value;\n\n          if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n            return child;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"childElementCount\",\n    get: function get() {\n      return this.children.length;\n    }\n  }]);\n\n  return ParentNodeImpl;\n}();\n\nParentNodeImpl.prototype.querySelector = memoizeQuery(function (selectors) {\n  if (shouldAlwaysSelectNothing(this)) {\n    return null;\n  }\n\n  var matcher = addNwsapi(this);\n  return idlUtils.implForWrapper(matcher.first(selectors, idlUtils.wrapperForImpl(this)));\n}); // WARNING: this returns a NodeList containing IDL wrappers instead of impls\n\nParentNodeImpl.prototype.querySelectorAll = memoizeQuery(function (selectors) {\n  if (shouldAlwaysSelectNothing(this)) {\n    return NodeList.create([], {\n      nodes: []\n    });\n  }\n\n  var matcher = addNwsapi(this);\n  var list = matcher.select(selectors, idlUtils.wrapperForImpl(this));\n  return NodeList.create([], {\n    nodes: list.map(function (n) {\n      return idlUtils.tryImplForWrapper(n);\n    })\n  });\n});\n\nfunction shouldAlwaysSelectNothing(elImpl) {\n  // The latter clause is true during initialization.\n  return !domSymbolTree.hasChildren(elImpl) || elImpl === elImpl._ownerDocument && !elImpl.documentElement;\n}\n\nmodule.exports = {\n  implementation: ParentNodeImpl\n};","map":null,"metadata":{},"sourceType":"script"}