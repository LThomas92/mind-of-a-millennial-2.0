{"ast":null,"code":"/** Here is yet another implementation of XPath 1.0 in Javascript.\n *\n * My goal was to make it relatively compact, but as I fixed all the axis bugs\n * the axes became more and more complicated. :-(.\n *\n * I have not implemented namespaces or case-sensitive axes for XML yet.\n *\n * How to test it in Chrome: You can make a Chrome extension that replaces\n * the WebKit XPath parser with this one. But it takes a bit of effort to\n * get around isolated world and same-origin restrictions:\n * manifest.json:\n    {\n      \"name\": \"XPathTest\",\n      \"version\": \"0.1\",\n      \"content_scripts\": [{\n        \"matches\": [\"http://localhost/*\"],  // or wildcard host\n        \"js\": [\"xpath.js\", \"injection.js\"],\n        \"all_frames\": true, \"run_at\": \"document_start\"\n      }]\n    }\n * injection.js:\n    // goal: give my xpath object to the website's JS context.\n    var script = document.createElement('script');\n    script.textContent =\n        \"document.addEventListener('xpathextend', function(e) {\\n\" +\n        \"  console.log('extending document with xpath...');\\n\" +\n        \"  e.detail(window);\" +\n        \"});\";\n    document.documentElement.appendChild(script);\n    document.documentElement.removeChild(script);\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent('xpathextend', true, true, this.xpath.extend);\n    document.dispatchEvent(evt);\n */\nmodule.exports = function (core) {\n  var xpath = {}; // Helper function to deal with the migration of Attr to no longer have a nodeName property despite this codebase\n  // assuming it does.\n\n  function getNodeName(nodeOrAttr) {\n    return nodeOrAttr.constructor.name === 'Attr' ? nodeOrAttr.name : nodeOrAttr.nodeName;\n  }\n  /***************************************************************************\n   *                            Tokenization                                 *\n   ***************************************************************************/\n\n  /**\n   * The XPath lexer is basically a single regular expression, along with\n   * some helper functions to pop different types.\n   */\n\n\n  var Stream = xpath.Stream = function Stream(str) {\n    this.original = this.str = str;\n    this.peeked = null; // TODO: not really needed, but supposedly tokenizer also disambiguates\n    // a * b vs. node test *\n\n    this.prev = null; // for debugging\n\n    this.prevprev = null;\n  };\n\n  Stream.prototype = {\n    peek: function peek() {\n      if (this.peeked) return this.peeked;\n      var m = this.re.exec(this.str);\n      if (!m) return null;\n      this.str = this.str.substr(m[0].length);\n      return this.peeked = m[1];\n    },\n\n    /** Peek 2 tokens ahead. */\n    peek2: function peek2() {\n      this.peek(); // make sure this.peeked is set\n\n      var m = this.re.exec(this.str);\n      if (!m) return null;\n      return m[1];\n    },\n    pop: function pop() {\n      var r = this.peek();\n      this.peeked = null;\n      this.prevprev = this.prev;\n      this.prev = r;\n      return r;\n    },\n    trypop: function trypop(tokens) {\n      var tok = this.peek();\n      if (tok === tokens) return this.pop();\n\n      if (Array.isArray(tokens)) {\n        for (var i = 0; i < tokens.length; ++i) {\n          var t = tokens[i];\n          if (t == tok) return this.pop();\n          ;\n        }\n      }\n    },\n    trypopfuncname: function trypopfuncname() {\n      var tok = this.peek();\n      if (!this.isQnameRe.test(tok)) return null;\n\n      switch (tok) {\n        case 'comment':\n        case 'text':\n        case 'processing-instruction':\n        case 'node':\n          return null;\n      }\n\n      if ('(' != this.peek2()) return null;\n      return this.pop();\n    },\n    trypopaxisname: function trypopaxisname() {\n      var tok = this.peek();\n\n      switch (tok) {\n        case 'ancestor':\n        case 'ancestor-or-self':\n        case 'attribute':\n        case 'child':\n        case 'descendant':\n        case 'descendant-or-self':\n        case 'following':\n        case 'following-sibling':\n        case 'namespace':\n        case 'parent':\n        case 'preceding':\n        case 'preceding-sibling':\n        case 'self':\n          if ('::' == this.peek2()) return this.pop();\n      }\n\n      return null;\n    },\n    trypopnametest: function trypopnametest() {\n      var tok = this.peek();\n      if ('*' === tok || this.startsWithNcNameRe.test(tok)) return this.pop();\n      return null;\n    },\n    trypopliteral: function trypopliteral() {\n      var tok = this.peek();\n      if (null == tok) return null;\n      var first = tok.charAt(0);\n      var last = tok.charAt(tok.length - 1);\n\n      if ('\"' === first && '\"' === last || \"'\" === first && \"'\" === last) {\n        this.pop();\n        return tok.substr(1, tok.length - 2);\n      }\n    },\n    trypopnumber: function trypopnumber() {\n      var tok = this.peek();\n      if (this.isNumberRe.test(tok)) return parseFloat(this.pop());else return null;\n    },\n    trypopvarref: function trypopvarref() {\n      var tok = this.peek();\n      if (null == tok) return null;\n      if ('$' === tok.charAt(0)) return this.pop().substr(1);else return null;\n    },\n    position: function position() {\n      return this.original.length - this.str.length;\n    }\n  };\n\n  (function () {\n    // http://www.w3.org/TR/REC-xml-names/#NT-NCName\n    var nameStartCharsExceptColon = \"A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\" + \"\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\" + \"\\uFDF0-\\uFFFD\"; // JS doesn't support [#x10000-#xEFFFF]\n\n    var nameCharExceptColon = nameStartCharsExceptColon + \"\\\\-\\\\.0-9\\xB7\\u0300-\\u036F\\u203F-\\u2040\";\n    var ncNameChars = '[' + nameStartCharsExceptColon + '][' + nameCharExceptColon + ']*'; // http://www.w3.org/TR/REC-xml-names/#NT-QName\n\n    var qNameChars = ncNameChars + '(?::' + ncNameChars + ')?';\n    var otherChars = '\\\\.\\\\.|[\\\\(\\\\)\\\\[\\\\].@,]|::'; // .. must come before [.]\n\n    var operatorChars = 'and|or|mod|div|' + '//|!=|<=|>=|[*/|+\\\\-=<>]'; // //, !=, <=, >= before individual ones.\n\n    var literal = '\"[^\"]*\"|' + \"'[^']*'\";\n    var numberChars = '[0-9]+(?:\\\\.[0-9]*)?|\\\\.[0-9]+';\n    var variableReference = '\\\\$' + qNameChars;\n    var nameTestChars = '\\\\*|' + ncNameChars + ':\\\\*|' + qNameChars;\n    var optionalSpace = '[ \\t\\r\\n]*'; // stricter than regexp \\s.\n\n    var nodeType = 'comment|text|processing-instruction|node';\n    var re = new RegExp( // numberChars before otherChars so that leading-decimal doesn't become .\n    '^' + optionalSpace + '(' + numberChars + '|' + otherChars + '|' + nameTestChars + '|' + operatorChars + '|' + literal + '|' + variableReference + ')' // operatorName | nodeType | functionName | axisName are lumped into\n    // qName for now; we'll check them on pop.\n    );\n    Stream.prototype.re = re;\n    Stream.prototype.startsWithNcNameRe = new RegExp('^' + ncNameChars);\n    Stream.prototype.isQnameRe = new RegExp('^' + qNameChars + '$');\n    Stream.prototype.isNumberRe = new RegExp('^' + numberChars + '$');\n  })();\n  /***************************************************************************\n   *                               Parsing                                   *\n   ***************************************************************************/\n\n\n  var parse = xpath.parse = function parse(stream, a) {\n    var r = orExpr(stream, a);\n    var x,\n        unparsed = [];\n\n    while (x = stream.pop()) {\n      unparsed.push(x);\n    }\n\n    if (unparsed.length) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Unparsed tokens: ' + unparsed.join(' '));\n    return r;\n  };\n  /**\n   * binaryL  ::= subExpr\n   *            | binaryL op subExpr\n   * so a op b op c becomes ((a op b) op c)\n   */\n\n\n  function binaryL(subExpr, stream, a, ops) {\n    var lhs = subExpr(stream, a);\n    if (lhs == null) return null;\n    var op;\n\n    while (op = stream.trypop(ops)) {\n      var rhs = subExpr(stream, a);\n      if (rhs == null) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected something after ' + op);\n      lhs = a.node(op, lhs, rhs);\n    }\n\n    return lhs;\n  }\n  /**\n   * Too bad this is never used. If they made a ** operator (raise to power),\n   ( we would use it.\n   * binaryR  ::= subExpr\n   *            | subExpr op binaryR\n   * so a op b op c becomes (a op (b op c))\n   */\n\n\n  function binaryR(subExpr, stream, a, ops) {\n    var lhs = subExpr(stream, a);\n    if (lhs == null) return null;\n    var op = stream.trypop(ops);\n\n    if (op) {\n      var rhs = binaryR(stream, a);\n      if (rhs == null) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected something after ' + op);\n      return a.node(op, lhs, rhs);\n    } else {\n      return lhs; // TODO\n    }\n  }\n  /** [1] LocationPath::= RelativeLocationPath | AbsoluteLocationPath\n   * e.g. a, a/b, //a/b\n   */\n\n\n  function locationPath(stream, a) {\n    return absoluteLocationPath(stream, a) || relativeLocationPath(null, stream, a);\n  }\n  /** [2] AbsoluteLocationPath::= '/' RelativeLocationPath? | AbbreviatedAbsoluteLocationPath\n   *  [10] AbbreviatedAbsoluteLocationPath::= '//' RelativeLocationPath\n   */\n\n\n  function absoluteLocationPath(stream, a) {\n    var op = stream.peek();\n\n    if ('/' === op || '//' === op) {\n      var lhs = a.node('Root');\n      return relativeLocationPath(lhs, stream, a, true);\n    } else {\n      return null;\n    }\n  }\n  /** [3] RelativeLocationPath::= Step | RelativeLocationPath '/' Step |\n   *                            | AbbreviatedRelativeLocationPath\n   *  [11] AbbreviatedRelativeLocationPath::= RelativeLocationPath '//' Step\n   * e.g. p/a, etc.\n   */\n\n\n  function relativeLocationPath(lhs, stream, a, isOnlyRootOk) {\n    if (null == lhs) {\n      lhs = step(stream, a);\n      if (null == lhs) return lhs;\n    }\n\n    var op;\n\n    while (op = stream.trypop(['/', '//'])) {\n      if ('//' === op) {\n        lhs = a.node('/', lhs, a.node('Axis', 'descendant-or-self', 'node', undefined));\n      }\n\n      var rhs = step(stream, a);\n      if (null == rhs && '/' === op && isOnlyRootOk) return lhs;else isOnlyRootOk = false;\n      if (null == rhs) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected step after ' + op);\n      lhs = a.node('/', lhs, rhs);\n    }\n\n    return lhs;\n  }\n  /** [4] Step::= AxisSpecifier NodeTest Predicate* | AbbreviatedStep\n   *  [12] AbbreviatedStep::= '.' | '..'\n   * e.g. @href, self::p, p, a[@href], ., ..\n   */\n\n\n  function step(stream, a) {\n    var abbrStep = stream.trypop(['.', '..']);\n    if ('.' === abbrStep) // A location step of . is short for self::node().\n      return a.node('Axis', 'self', 'node');\n    if ('..' === abbrStep) // A location step of .. is short for parent::node()\n      return a.node('Axis', 'parent', 'node');\n    var axis = axisSpecifier(stream, a);\n    var nodeType = nodeTypeTest(stream, a);\n    var nodeName;\n    if (null == nodeType) nodeName = nodeNameTest(stream, a);\n    if (null == axis && null == nodeType && null == nodeName) return null;\n    if (null == nodeType && null == nodeName) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected nodeTest after axisSpecifier ' + axis);\n    if (null == axis) axis = 'child';\n\n    if (null == nodeType) {\n      // When there's only a node name, then the node type is forced to be the\n      // principal node type of the axis.\n      // see http://www.w3.org/TR/xpath/#dt-principal-node-type\n      if ('attribute' === axis) nodeType = 'attribute';else if ('namespace' === axis) nodeType = 'namespace';else nodeType = 'element';\n    }\n\n    var lhs = a.node('Axis', axis, nodeType, nodeName);\n    var pred;\n\n    while (null != (pred = predicate(lhs, stream, a))) {\n      lhs = pred;\n    }\n\n    return lhs;\n  }\n  /** [5] AxisSpecifier::= AxisName '::' | AbbreviatedAxisSpecifier\n   *  [6] AxisName::= 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child'\n   *                | 'descendant' | 'descendant-or-self' | 'following'\n   *                | 'following-sibling' | 'namespace' | 'parent' |\n   *                | 'preceding' | 'preceding-sibling' | 'self'\n   *  [13] AbbreviatedAxisSpecifier::= '@'?\n   */\n\n\n  function axisSpecifier(stream, a) {\n    var attr = stream.trypop('@');\n    if (null != attr) return 'attribute';\n    var axisName = stream.trypopaxisname();\n\n    if (null != axisName) {\n      var coloncolon = stream.trypop('::');\n      if (null == coloncolon) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Should not happen. Should be ::.');\n      return axisName;\n    }\n  }\n  /** [7] NodeTest::= NameTest | NodeType '(' ')' | 'processing-instruction' '(' Literal ')'\n   *  [38] NodeType::= 'comment' | 'text' | 'processing-instruction' | 'node'\n   * I've split nodeTypeTest from nodeNameTest for convenience.\n   */\n\n\n  function nodeTypeTest(stream, a) {\n    if ('(' !== stream.peek2()) {\n      return null;\n    }\n\n    var type = stream.trypop(['comment', 'text', 'processing-instruction', 'node']);\n\n    if (null != type) {\n      if (null == stream.trypop('(')) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Should not happen.');\n      var param = undefined;\n\n      if (type == 'processing-instruction') {\n        param = stream.trypopliteral();\n      }\n\n      if (null == stream.trypop(')')) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected close parens.');\n      return type;\n    }\n  }\n\n  function nodeNameTest(stream, a) {\n    var name = stream.trypopnametest();\n    if (name != null) return name;else return null;\n  }\n  /** [8] Predicate::= '[' PredicateExpr ']'\n   *  [9] PredicateExpr::= Expr\n   */\n\n\n  function predicate(lhs, stream, a) {\n    if (null == stream.trypop('[')) return null;\n    var expr = orExpr(stream, a);\n    if (null == expr) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected expression after [');\n    if (null == stream.trypop(']')) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected ] after expression.');\n    return a.node('Predicate', lhs, expr);\n  }\n  /** [14] Expr::= OrExpr\n   */\n\n  /** [15] PrimaryExpr::= VariableReference | '(' Expr ')' | Literal | Number | FunctionCall\n   * e.g. $x,  (3+4),  \"hi\",  32,  f(x)\n   */\n\n\n  function primaryExpr(stream, a) {\n    var x = stream.trypopliteral();\n    if (null == x) x = stream.trypopnumber();\n\n    if (null != x) {\n      return x;\n    }\n\n    var varRef = stream.trypopvarref();\n    if (null != varRef) return a.node('VariableReference', varRef);\n    var funCall = functionCall(stream, a);\n\n    if (null != funCall) {\n      return funCall;\n    }\n\n    if (stream.trypop('(')) {\n      var e = orExpr(stream, a);\n      if (null == e) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected expression after (.');\n      if (null == stream.trypop(')')) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected ) after expression.');\n      return e;\n    }\n\n    return null;\n  }\n  /** [16] FunctionCall::= FunctionName '(' ( Argument ( ',' Argument )* )? ')'\n   *  [17] Argument::= Expr\n   */\n\n\n  function functionCall(stream, a) {\n    var name = stream.trypopfuncname(stream, a);\n    if (null == name) return null;\n    if (null == stream.trypop('(')) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected ( ) after function name.');\n    var params = [];\n    var first = true;\n\n    while (null == stream.trypop(')')) {\n      if (!first && null == stream.trypop(',')) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected , between arguments of the function.');\n      first = false;\n      var param = orExpr(stream, a);\n      if (param == null) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected expression as argument of function.');\n      params.push(param);\n    }\n\n    return a.node('FunctionCall', name, params);\n  }\n  /** [18] UnionExpr::= PathExpr | UnionExpr '|' PathExpr\n   */\n\n\n  function unionExpr(stream, a) {\n    return binaryL(pathExpr, stream, a, '|');\n  }\n  /** [19] PathExpr ::= LocationPath\n   *                  | FilterExpr\n   *                  | FilterExpr '/' RelativeLocationPath\n   *                  | FilterExpr '//' RelativeLocationPath\n   * Unlike most other nodes, this one always generates a node because\n   * at this point all reverse nodesets must turn into a forward nodeset\n   */\n\n\n  function pathExpr(stream, a) {\n    // We have to do FilterExpr before LocationPath because otherwise\n    // LocationPath will eat up the name from a function call.\n    var filter = filterExpr(stream, a);\n\n    if (null == filter) {\n      var loc = locationPath(stream, a);\n\n      if (null == loc) {\n        throw new Error();\n        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': The expression shouldn\\'t be empty...');\n      }\n\n      return a.node('PathExpr', loc);\n    }\n\n    var rel = relativeLocationPath(filter, stream, a, false);\n    if (filter === rel) return rel;else return a.node('PathExpr', rel);\n  }\n  /** [20] FilterExpr::= PrimaryExpr | FilterExpr Predicate\n   * aka. FilterExpr ::= PrimaryExpr Predicate*\n   */\n\n\n  function filterExpr(stream, a) {\n    var primary = primaryExpr(stream, a);\n    if (primary == null) return null;\n    var pred,\n        lhs = primary;\n\n    while (null != (pred = predicate(lhs, stream, a))) {\n      lhs = pred;\n    }\n\n    return lhs;\n  }\n  /** [21] OrExpr::= AndExpr | OrExpr 'or' AndExpr\n   */\n\n\n  function orExpr(stream, a) {\n    var orig = (stream.peeked || '') + stream.str;\n    var r = binaryL(andExpr, stream, a, 'or');\n    var now = (stream.peeked || '') + stream.str;\n    return r;\n  }\n  /** [22] AndExpr::= EqualityExpr | AndExpr 'and' EqualityExpr\n   */\n\n\n  function andExpr(stream, a) {\n    return binaryL(equalityExpr, stream, a, 'and');\n  }\n  /** [23] EqualityExpr::= RelationalExpr | EqualityExpr '=' RelationalExpr\n   *                     | EqualityExpr '!=' RelationalExpr\n   */\n\n\n  function equalityExpr(stream, a) {\n    return binaryL(relationalExpr, stream, a, ['=', '!=']);\n  }\n  /** [24] RelationalExpr::= AdditiveExpr | RelationalExpr '<' AdditiveExpr\n   *                       | RelationalExpr '>' AdditiveExpr\n   *                       | RelationalExpr '<=' AdditiveExpr\n   *                       | RelationalExpr '>=' AdditiveExpr\n   */\n\n\n  function relationalExpr(stream, a) {\n    return binaryL(additiveExpr, stream, a, ['<', '>', '<=', '>=']);\n  }\n  /** [25] AdditiveExpr::= MultiplicativeExpr\n   *                     | AdditiveExpr '+' MultiplicativeExpr\n   *                     | AdditiveExpr '-' MultiplicativeExpr\n   */\n\n\n  function additiveExpr(stream, a) {\n    return binaryL(multiplicativeExpr, stream, a, ['+', '-']);\n  }\n  /** [26] MultiplicativeExpr::= UnaryExpr\n   *                           | MultiplicativeExpr MultiplyOperator UnaryExpr\n   *                           | MultiplicativeExpr 'div' UnaryExpr\n   *                           | MultiplicativeExpr 'mod' UnaryExpr\n   */\n\n\n  function multiplicativeExpr(stream, a) {\n    return binaryL(unaryExpr, stream, a, ['*', 'div', 'mod']);\n  }\n  /** [27] UnaryExpr::= UnionExpr | '-' UnaryExpr\n   */\n\n\n  function unaryExpr(stream, a) {\n    if (stream.trypop('-')) {\n      var e = unaryExpr(stream, a);\n      if (null == e) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Expected unary expression after -');\n      return a.node('UnaryMinus', e);\n    } else return unionExpr(stream, a);\n  }\n\n  var astFactory = {\n    node: function node() {\n      return Array.prototype.slice.call(arguments);\n    }\n  };\n  /***************************************************************************\n   *                            Optimizations (TODO)                         *\n   ***************************************************************************/\n\n  /**\n   * Some things I've been considering:\n   * 1) a//b becomes a/descendant::b if there's no predicate that uses\n   *    position() or last()\n   * 2) axis[pred]: when pred doesn't use position, evaluate it just once per\n   *    node in the node-set rather than once per (node, position, last).\n   * For more optimizations, look up Gecko's optimizer:\n   * http://mxr.mozilla.org/mozilla-central/source/content/xslt/src/xpath/txXPathOptimizer.cpp\n   */\n  // TODO\n\n  function optimize(ast) {}\n  /***************************************************************************\n   *                           Evaluation: axes                              *\n   ***************************************************************************/\n\n  /**\n   * Data types: For string, number, boolean, we just use Javascript types.\n   * Node-sets have the form\n   *    {nodes: [node, ...]}\n   * or {nodes: [node, ...], pos: [[1], [2], ...], lasts: [[1], [2], ...]}\n   *\n   * Most of the time, only the node is used and the position information is\n   * discarded. But if you use a predicate, we need to try every value of\n   * position and last in case the predicate calls position() or last().\n   */\n\n  /**\n   * The NodeMultiSet is a helper class to help generate\n   * {nodes:[], pos:[], lasts:[]} structures. It is useful for the\n   * descendant, descendant-or-self, following-sibling, and\n   * preceding-sibling axes for which we can use a stack to organize things.\n   */\n\n\n  function NodeMultiSet(isReverseAxis) {\n    this.nodes = [];\n    this.pos = [];\n    this.lasts = [];\n    this.nextPos = [];\n    this.seriesIndexes = []; // index within nodes that each series begins.\n\n    this.isReverseAxis = isReverseAxis;\n    this._pushToNodes = isReverseAxis ? Array.prototype.unshift : Array.prototype.push;\n  }\n\n  NodeMultiSet.prototype = {\n    pushSeries: function pushSeries() {\n      this.nextPos.push(1);\n      this.seriesIndexes.push(this.nodes.length);\n    },\n    popSeries: function popSeries() {\n      console.assert(0 < this.nextPos.length, this.nextPos);\n      var last = this.nextPos.pop() - 1,\n          indexInPos = this.nextPos.length,\n          seriesBeginIndex = this.seriesIndexes.pop(),\n          seriesEndIndex = this.nodes.length;\n\n      for (var i = seriesBeginIndex; i < seriesEndIndex; ++i) {\n        console.assert(indexInPos < this.lasts[i].length);\n        console.assert(undefined === this.lasts[i][indexInPos]);\n        this.lasts[i][indexInPos] = last;\n      }\n    },\n    finalize: function finalize() {\n      if (null == this.nextPos) return this;\n      console.assert(0 === this.nextPos.length);\n      var lastsJSON = JSON.stringify(this.lasts);\n\n      for (var i = 0; i < this.lasts.length; ++i) {\n        for (var j = 0; j < this.lasts[i].length; ++j) {\n          console.assert(null != this.lasts[i][j], i + ',' + j + ':' + lastsJSON);\n        }\n      }\n\n      this.pushSeries = this.popSeries = this.addNode = function () {\n        throw new Error('Already finalized.');\n      };\n\n      return this;\n    },\n    addNode: function addNode(node) {\n      console.assert(node);\n\n      this._pushToNodes.call(this.nodes, node);\n\n      this._pushToNodes.call(this.pos, this.nextPos.slice());\n\n      this._pushToNodes.call(this.lasts, new Array(this.nextPos.length));\n\n      for (var i = 0; i < this.nextPos.length; ++i) {\n        this.nextPos[i]++;\n      }\n    },\n    simplify: function simplify() {\n      this.finalize();\n      return {\n        nodes: this.nodes,\n        pos: this.pos,\n        lasts: this.lasts\n      };\n    }\n  };\n\n  function eachContext(nodeMultiSet) {\n    var r = [];\n\n    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {\n      var node = nodeMultiSet.nodes[i];\n\n      if (!nodeMultiSet.pos) {\n        r.push({\n          nodes: [node],\n          pos: [[i + 1]],\n          lasts: [[nodeMultiSet.nodes.length]]\n        });\n      } else {\n        for (var j = 0; j < nodeMultiSet.pos[i].length; ++j) {\n          r.push({\n            nodes: [node],\n            pos: [[nodeMultiSet.pos[i][j]]],\n            lasts: [[nodeMultiSet.lasts[i][j]]]\n          });\n        }\n      }\n    }\n\n    return r;\n  }\n  /** Matcher used in the axes.\n   */\n\n\n  function NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase) {\n    this.nodeTypeNum = nodeTypeNum;\n    this.nodeName = nodeName;\n    this.shouldLowerCase = shouldLowerCase;\n    this.nodeNameTest = null == nodeName ? this._alwaysTrue : shouldLowerCase ? this._nodeNameLowerCaseEquals : this._nodeNameEquals;\n  }\n\n  NodeMatcher.prototype = {\n    matches: function matches(node) {\n      if (0 === this.nodeTypeNum || this._nodeTypeMatches(node)) {\n        return this.nodeNameTest(getNodeName(node));\n      }\n\n      return false;\n    },\n    _nodeTypeMatches: function _nodeTypeMatches(nodeOrAttr) {\n      if (nodeOrAttr.constructor.name === 'Attr' && this.nodeTypeNum === 2) {\n        return true;\n      }\n\n      return nodeOrAttr.nodeType === this.nodeTypeNum;\n    },\n    _alwaysTrue: function _alwaysTrue(name) {\n      return true;\n    },\n    _nodeNameEquals: function _nodeNameEquals(name) {\n      return this.nodeName === name;\n    },\n    _nodeNameLowerCaseEquals: function _nodeNameLowerCaseEquals(name) {\n      return this.nodeName === name.toLowerCase();\n    }\n  };\n\n  function followingSiblingHelper(nodeList\n  /*destructive!*/\n  , nodeTypeNum, nodeName, shouldLowerCase, shift, peek, followingNode, andSelf, isReverseAxis) {\n    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n    var nodeMultiSet = new NodeMultiSet(isReverseAxis);\n\n    while (0 < nodeList.length) {\n      // can be if for following, preceding\n      var node = shift.call(nodeList);\n      console.assert(node != null);\n      node = followingNode(node);\n      nodeMultiSet.pushSeries();\n      var numPushed = 1;\n\n      while (null != node) {\n        if (!andSelf && matcher.matches(node)) nodeMultiSet.addNode(node);\n\n        if (node === peek.call(nodeList)) {\n          shift.call(nodeList);\n          nodeMultiSet.pushSeries();\n          numPushed++;\n        }\n\n        if (andSelf && matcher.matches(node)) nodeMultiSet.addNode(node);\n        node = followingNode(node);\n      }\n\n      while (0 < numPushed--) {\n        nodeMultiSet.popSeries();\n      }\n    }\n\n    return nodeMultiSet;\n  }\n  /** Returns the next non-descendant node in document order.\n   * This is the first node in following::node(), if node is the context.\n   */\n\n\n  function followingNonDescendantNode(node) {\n    if (node.ownerElement) {\n      if (node.ownerElement.firstChild) return node.ownerElement.firstChild;\n      node = node.ownerElement;\n    }\n\n    do {\n      if (node.nextSibling) return node.nextSibling;\n    } while (node = node.parentNode);\n\n    return null;\n  }\n  /** Returns the next node in a document-order depth-first search.\n   * See the definition of document order[1]:\n   *   1) element\n   *   2) namespace nodes\n   *   3) attributes\n   *   4) children\n   *   [1]: http://www.w3.org/TR/xpath/#dt-document-order\n   */\n\n\n  function followingNode(node) {\n    if (node.ownerElement) // attributes: following node of element.\n      node = node.ownerElement;\n    if (null != node.firstChild) return node.firstChild;\n\n    do {\n      if (null != node.nextSibling) {\n        return node.nextSibling;\n      }\n\n      node = node.parentNode;\n    } while (node);\n\n    return null;\n  }\n  /** Returns the previous node in document order (excluding attributes\n   * and namespace nodes).\n   */\n\n\n  function precedingNode(node) {\n    if (node.ownerElement) return node.ownerElement;\n\n    if (null != node.previousSibling) {\n      node = node.previousSibling;\n\n      while (null != node.lastChild) {\n        node = node.lastChild;\n      }\n\n      return node;\n    }\n\n    if (null != node.parentNode) {\n      return node.parentNode;\n    }\n\n    return null;\n  }\n  /** This axis is inefficient if there are many nodes in the nodeList.\n   * But I think it's a pretty useless axis so it's ok. */\n\n\n  function followingHelper(nodeList\n  /*destructive!*/\n  , nodeTypeNum, nodeName, shouldLowerCase) {\n    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n    var nodeMultiSet = new NodeMultiSet(false);\n    var cursor = nodeList[0];\n    var unorderedFollowingStarts = [];\n\n    for (var i = 0; i < nodeList.length; i++) {\n      var node = nodeList[i];\n      var start = followingNonDescendantNode(node);\n      if (start) unorderedFollowingStarts.push(start);\n    }\n\n    if (0 === unorderedFollowingStarts.length) return {\n      nodes: []\n    };\n    var pos = [],\n        nextPos = [];\n    var started = 0;\n\n    while (cursor = followingNode(cursor)) {\n      for (var i = unorderedFollowingStarts.length - 1; i >= 0; i--) {\n        if (cursor === unorderedFollowingStarts[i]) {\n          nodeMultiSet.pushSeries();\n          unorderedFollowingStarts.splice(i, i + 1);\n          started++;\n        }\n      }\n\n      if (started && matcher.matches(cursor)) {\n        nodeMultiSet.addNode(cursor);\n      }\n    }\n\n    console.assert(0 === unorderedFollowingStarts.length);\n\n    for (var i = 0; i < started; i++) {\n      nodeMultiSet.popSeries();\n    }\n\n    return nodeMultiSet.finalize();\n  }\n\n  function precedingHelper(nodeList\n  /*destructive!*/\n  , nodeTypeNum, nodeName, shouldLowerCase) {\n    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n    var cursor = nodeList.pop();\n    if (null == cursor) return {\n      nodes: {}\n    };\n    var r = {\n      nodes: [],\n      pos: [],\n      lasts: []\n    };\n    var nextParents = [cursor.parentNode || cursor.ownerElement],\n        nextPos = [1];\n\n    while (cursor = precedingNode(cursor)) {\n      if (cursor === nodeList[nodeList.length - 1]) {\n        nextParents.push(nodeList.pop());\n        nextPos.push(1);\n      }\n\n      var matches = matcher.matches(cursor);\n      var pos,\n          someoneUsed = false;\n      if (matches) pos = nextPos.slice();\n\n      for (var i = 0; i < nextParents.length; ++i) {\n        if (cursor === nextParents[i]) {\n          nextParents[i] = cursor.parentNode || cursor.ownerElement;\n\n          if (matches) {\n            pos[i] = null;\n          }\n        } else {\n          if (matches) {\n            pos[i] = nextPos[i]++;\n            someoneUsed = true;\n          }\n        }\n      }\n\n      if (someoneUsed) {\n        r.nodes.unshift(cursor);\n        r.pos.unshift(pos);\n      }\n    }\n\n    for (var i = 0; i < r.pos.length; ++i) {\n      var lasts = [];\n      r.lasts.push(lasts);\n\n      for (var j = r.pos[i].length - 1; j >= 0; j--) {\n        if (null == r.pos[i][j]) {\n          r.pos[i].splice(j, j + 1);\n        } else {\n          lasts.unshift(nextPos[j] - 1);\n        }\n      }\n    }\n\n    return r;\n  }\n  /** node-set, axis -> node-set */\n\n\n  function descendantDfs(nodeMultiSet, node, remaining, matcher, andSelf, attrIndices, attrNodes) {\n    while (0 < remaining.length && null != remaining[0].ownerElement) {\n      var attr = remaining.shift();\n\n      if (andSelf && matcher.matches(attr)) {\n        attrNodes.push(attr);\n        attrIndices.push(nodeMultiSet.nodes.length);\n      }\n    }\n\n    if (null != node && !andSelf) {\n      if (matcher.matches(node)) nodeMultiSet.addNode(node);\n    }\n\n    var pushed = false;\n\n    if (null == node) {\n      if (0 === remaining.length) return;\n      node = remaining.shift();\n      nodeMultiSet.pushSeries();\n      pushed = true;\n    } else if (0 < remaining.length && node === remaining[0]) {\n      nodeMultiSet.pushSeries();\n      pushed = true;\n      remaining.shift();\n    }\n\n    if (andSelf) {\n      if (matcher.matches(node)) nodeMultiSet.addNode(node);\n    } // TODO: use optimization. Also try element.getElementsByTagName\n    // var nodeList = 1 === nodeTypeNum && null != node.children ? node.children : node.childNodes;\n\n\n    var nodeList = node.childNodes;\n\n    for (var j = 0; j < nodeList.length; ++j) {\n      var child = nodeList[j];\n      descendantDfs(nodeMultiSet, child, remaining, matcher, andSelf, attrIndices, attrNodes);\n    }\n\n    if (pushed) {\n      nodeMultiSet.popSeries();\n    }\n  }\n\n  function descenantHelper(nodeList\n  /*destructive!*/\n  , nodeTypeNum, nodeName, shouldLowerCase, andSelf) {\n    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n    var nodeMultiSet = new NodeMultiSet(false);\n    var attrIndices = [],\n        attrNodes = [];\n\n    while (0 < nodeList.length) {\n      // var node = nodeList.shift();\n      descendantDfs(nodeMultiSet, null, nodeList, matcher, andSelf, attrIndices, attrNodes);\n    }\n\n    nodeMultiSet.finalize();\n\n    for (var i = attrNodes.length - 1; i >= 0; --i) {\n      nodeMultiSet.nodes.splice(attrIndices[i], attrIndices[i], attrNodes[i]);\n      nodeMultiSet.pos.splice(attrIndices[i], attrIndices[i], [1]);\n      nodeMultiSet.lasts.splice(attrIndices[i], attrIndices[i], [1]);\n    }\n\n    return nodeMultiSet;\n  }\n  /**\n   */\n\n\n  function ancestorHelper(nodeList\n  /*destructive!*/\n  , nodeTypeNum, nodeName, shouldLowerCase, andSelf) {\n    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n    var ancestors = []; // array of non-empty arrays of matching ancestors\n\n    for (var i = 0; i < nodeList.length; ++i) {\n      var node = nodeList[i];\n      var isFirst = true;\n      var a = [];\n\n      while (null != node) {\n        if (!isFirst || andSelf) {\n          if (matcher.matches(node)) a.push(node);\n        }\n\n        isFirst = false;\n        node = node.parentNode || node.ownerElement;\n      }\n\n      if (0 < a.length) ancestors.push(a);\n    }\n\n    var lasts = [];\n\n    for (var i = 0; i < ancestors.length; ++i) {\n      lasts.push(ancestors[i].length);\n    }\n\n    var nodeMultiSet = new NodeMultiSet(true);\n    var newCtx = {\n      nodes: [],\n      pos: [],\n      lasts: []\n    };\n\n    while (0 < ancestors.length) {\n      var pos = [ancestors[0].length];\n      var last = [lasts[0]];\n      var node = ancestors[0].pop();\n\n      for (var i = ancestors.length - 1; i > 0; --i) {\n        if (node === ancestors[i][ancestors[i].length - 1]) {\n          pos.push(ancestors[i].length);\n          last.push(lasts[i]);\n          ancestors[i].pop();\n\n          if (0 === ancestors[i].length) {\n            ancestors.splice(i, i + 1);\n            lasts.splice(i, i + 1);\n          }\n        }\n      }\n\n      if (0 === ancestors[0].length) {\n        ancestors.shift();\n        lasts.shift();\n      }\n\n      newCtx.nodes.push(node);\n      newCtx.pos.push(pos);\n      newCtx.lasts.push(last);\n    }\n\n    return newCtx;\n  }\n  /** Helper function for sortDocumentOrder. Returns a list of indices, from the\n   * node to the root, of positions within parent.\n   * For convenience, the node is the first element of the array.\n   */\n\n\n  function addressVector(node) {\n    var r = [node];\n\n    if (null != node.ownerElement) {\n      node = node.ownerElement;\n      r.push(-1);\n    }\n\n    while (null != node) {\n      var i = 0;\n\n      while (null != node.previousSibling) {\n        node = node.previousSibling;\n        i++;\n      }\n\n      r.push(i);\n      node = node.parentNode;\n    }\n\n    return r;\n  }\n\n  function addressComparator(a, b) {\n    var minlen = Math.min(a.length - 1, b.length - 1),\n        // not including [0]=node\n    alen = a.length,\n        blen = b.length;\n    if (a[0] === b[0]) return 0;\n    var c;\n\n    for (var i = 0; i < minlen; ++i) {\n      c = a[alen - i - 1] - b[blen - i - 1];\n      if (0 !== c) break;\n    }\n\n    if (null == c || 0 === c) {\n      // All equal until one of the nodes. The longer one is the descendant.\n      c = alen - blen;\n    }\n\n    if (0 === c) c = getNodeName(a) - getNodeName(b);\n    if (0 === c) c = 1;\n    return c;\n  }\n\n  var sortUniqDocumentOrder = xpath.sortUniqDocumentOrder = function (nodes) {\n    var a = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var v = addressVector(node);\n      a.push(v);\n    }\n\n    a.sort(addressComparator);\n    var b = [];\n\n    for (var i = 0; i < a.length; i++) {\n      if (0 < i && a[i][0] === a[i - 1][0]) continue;\n      b.push(a[i][0]);\n    }\n\n    return b;\n  };\n  /** Sort node multiset. Does not do any de-duping. */\n\n\n  function sortNodeMultiSet(nodeMultiSet) {\n    var a = [];\n\n    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {\n      var v = addressVector(nodeMultiSet.nodes[i]);\n      a.push({\n        v: v,\n        n: nodeMultiSet.nodes[i],\n        p: nodeMultiSet.pos[i],\n        l: nodeMultiSet.lasts[i]\n      });\n    }\n\n    a.sort(compare);\n    var r = {\n      nodes: [],\n      pos: [],\n      lasts: []\n    };\n\n    for (var i = 0; i < a.length; ++i) {\n      r.nodes.push(a[i].n);\n      r.pos.push(a[i].p);\n      r.lasts.push(a[i].l);\n    }\n\n    function compare(x, y) {\n      return addressComparator(x.v, y.v);\n    }\n\n    return r;\n  }\n  /** Returns an array containing all the ancestors down to a node.\n   * The array starts with document.\n   */\n\n\n  function nodeAndAncestors(node) {\n    var ancestors = [node];\n    var p = node;\n\n    while (p = p.parentNode || p.ownerElement) {\n      ancestors.unshift(p);\n    }\n\n    return ancestors;\n  }\n\n  function compareSiblings(a, b) {\n    if (a === b) return 0;\n    var c = a;\n\n    while (c = c.previousSibling) {\n      if (c === b) return 1; // b < a\n    }\n\n    c = b;\n\n    while (c = c.previousSibling) {\n      if (c === a) return -1; // a < b\n    }\n\n    throw new Error('a and b are not siblings: ' + xpath.stringifyObject(a) + ' vs ' + xpath.stringifyObject(b));\n  }\n  /** The merge in merge-sort.*/\n\n\n  function mergeNodeLists(x, y) {\n    var a,\n        b,\n        aanc,\n        banc,\n        r = [];\n    if ('object' !== typeof x) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Invalid LHS for | operator ' + '(expected node-set): ' + x);\n    if ('object' !== typeof y) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Invalid LHS for | operator ' + '(expected node-set): ' + y);\n\n    while (true) {\n      if (null == a) {\n        a = x.shift();\n        if (null != a) aanc = addressVector(a);\n      }\n\n      if (null == b) {\n        b = y.shift();\n        if (null != b) banc = addressVector(b);\n      }\n\n      if (null == a || null == b) break;\n      var c = addressComparator(aanc, banc);\n\n      if (c < 0) {\n        r.push(a);\n        a = null;\n        aanc = null;\n      } else if (c > 0) {\n        r.push(b);\n        b = null;\n        banc = null;\n      } else if (getNodeName(a) < getNodeName(b)) {\n        // attributes\n        r.push(a);\n        a = null;\n        aanc = null;\n      } else if (getNodeName(a) > getNodeName(b)) {\n        // attributes\n        r.push(b);\n        b = null;\n        banc = null;\n      } else if (a !== b) {\n        // choose b arbitrarily\n        r.push(b);\n        b = null;\n        banc = null;\n      } else {\n        console.assert(a === b, c); // just skip b without pushing it.\n\n        b = null;\n        banc = null;\n      }\n    }\n\n    while (a) {\n      r.push(a);\n      a = x.shift();\n    }\n\n    while (b) {\n      r.push(b);\n      b = y.shift();\n    }\n\n    return r;\n  }\n\n  function comparisonHelper(test, x, y, isNumericComparison) {\n    var coersion;\n    if (isNumericComparison) coersion = fn.number;else coersion = 'boolean' === typeof x || 'boolean' === typeof y ? fn['boolean'] : 'number' === typeof x || 'number' === typeof y ? fn.number : fn.string;\n\n    if ('object' === typeof x && 'object' === typeof y) {\n      var aMap = {};\n\n      for (var i = 0; i < x.nodes.length; ++i) {\n        var xi = coersion({\n          nodes: [x.nodes[i]]\n        });\n\n        for (var j = 0; j < y.nodes.length; ++j) {\n          var yj = coersion({\n            nodes: [y.nodes[j]]\n          });\n          if (test(xi, yj)) return true;\n        }\n      }\n\n      return false;\n    } else if ('object' === typeof x && x.nodes && x.nodes.length) {\n      for (var i = 0; i < x.nodes.length; ++i) {\n        var xi = coersion({\n          nodes: [x.nodes[i]]\n        }),\n            yc = coersion(y);\n        if (test(xi, yc)) return true;\n      }\n\n      return false;\n    } else if ('object' === typeof y && x.nodes && x.nodes.length) {\n      for (var i = 0; i < x.nodes.length; ++i) {\n        var yi = coersion({\n          nodes: [y.nodes[i]]\n        }),\n            xc = coersion(x);\n        if (test(xc, yi)) return true;\n      }\n\n      return false;\n    } else {\n      var xc = coersion(x),\n          yc = coersion(y);\n      return test(xc, yc);\n    }\n  }\n\n  var axes = xpath.axes = {\n    'ancestor': function ancestor(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return ancestorHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase, false);\n    },\n    'ancestor-or-self': function ancestorOrSelf(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return ancestorHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase, true);\n    },\n    'attribute': function attribute(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      // TODO: figure out whether positions should be undefined here.\n      var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n      var nodeMultiSet = new NodeMultiSet(false);\n\n      if (null != nodeName) {\n        // TODO: with namespace\n        for (var i = 0; i < nodeList.length; ++i) {\n          var node = nodeList[i];\n          if (null == node.getAttributeNode) continue; // only Element has .getAttributeNode\n\n          var attr = node.getAttributeNode(nodeName);\n\n          if (null != attr && matcher.matches(attr)) {\n            nodeMultiSet.pushSeries();\n            nodeMultiSet.addNode(attr);\n            nodeMultiSet.popSeries();\n          }\n        }\n      } else {\n        for (var i = 0; i < nodeList.length; ++i) {\n          var node = nodeList[i];\n\n          if (null != node.attributes) {\n            nodeMultiSet.pushSeries();\n\n            for (var j = 0; j < node.attributes.length; j++) {\n              // all nodes have .attributes\n              var attr = node.attributes[j];\n              if (matcher.matches(attr)) // TODO: I think this check is unnecessary\n                nodeMultiSet.addNode(attr);\n            }\n\n            nodeMultiSet.popSeries();\n          }\n        }\n      }\n\n      return nodeMultiSet.finalize();\n    },\n    'child': function child(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n      var nodeMultiSet = new NodeMultiSet(false);\n\n      for (var i = 0; i < nodeList.length; ++i) {\n        var n = nodeList[i];\n        if (n.ownerElement) // skip attribute nodes' text child.\n          continue;\n\n        if (n.childNodes) {\n          nodeMultiSet.pushSeries();\n          var childList = 1 === nodeTypeNum && null != n.children ? n.children : n.childNodes;\n\n          for (var j = 0; j < childList.length; ++j) {\n            var child = childList[j];\n\n            if (matcher.matches(child)) {\n              nodeMultiSet.addNode(child);\n            } // don't have to do de-duping because children have parent,\n            // which are current context.\n\n          }\n\n          nodeMultiSet.popSeries();\n        }\n      }\n\n      nodeMultiSet.finalize();\n      return sortNodeMultiSet(nodeMultiSet);\n    },\n    'descendant': function descenant(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return descenantHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase, false);\n    },\n    'descendant-or-self': function descenantOrSelf(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return descenantHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase, true);\n    },\n    'following': function following(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return followingHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase);\n    },\n    'following-sibling': function followingSibling(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return followingSiblingHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase, Array.prototype.shift, function () {\n        return this[0];\n      }, function (node) {\n        return node.nextSibling;\n      });\n    },\n    'namespace': function namespace(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {// TODO\n    },\n    'parent': function parent(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n      var nodes = [],\n          pos = [];\n\n      for (var i = 0; i < nodeList.length; ++i) {\n        var parent = nodeList[i].parentNode || nodeList[i].ownerElement;\n        if (null == parent) continue;\n        if (!matcher.matches(parent)) continue;\n        if (nodes.length > 0 && parent === nodes[nodes.length - 1]) continue;\n        nodes.push(parent);\n        pos.push([1]);\n      }\n\n      return {\n        nodes: nodes,\n        pos: pos,\n        lasts: pos\n      };\n    },\n    'preceding': function preceding(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return precedingHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase);\n    },\n    'preceding-sibling': function precedingSibling(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      return followingSiblingHelper(nodeList\n      /*destructive!*/\n      , nodeTypeNum, nodeName, shouldLowerCase, Array.prototype.pop, function () {\n        return this[this.length - 1];\n      }, function (node) {\n        return node.previousSibling;\n      }, false, true);\n    },\n    'self': function self(nodeList\n    /*destructive!*/\n    , nodeTypeNum, nodeName, shouldLowerCase) {\n      var nodes = [],\n          pos = [];\n      var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);\n\n      for (var i = 0; i < nodeList.length; ++i) {\n        if (matcher.matches(nodeList[i])) {\n          nodes.push(nodeList[i]);\n          pos.push([1]);\n        }\n      }\n\n      return {\n        nodes: nodes,\n        pos: pos,\n        lasts: pos\n      };\n    }\n  };\n  /***************************************************************************\n   *                         Evaluation: functions                           *\n   ***************************************************************************/\n\n  var fn = {\n    'number': function number(optObject) {\n      if ('number' === typeof optObject) return optObject;\n      if ('string' === typeof optObject) return parseFloat(optObject); // note: parseFloat(' ') -> NaN, unlike +' ' -> 0.\n\n      if ('boolean' === typeof optObject) return +optObject;\n      return fn.number(fn.string.call(this, optObject)); // for node-sets\n    },\n    'string': function string(optObject) {\n      if (null == optObject) return fn.string(this);\n      if ('string' === typeof optObject || 'boolean' === typeof optObject || 'number' === typeof optObject) return '' + optObject;\n      if (0 == optObject.nodes.length) return '';\n      if (null != optObject.nodes[0].textContent) return optObject.nodes[0].textContent;\n      return optObject.nodes[0].nodeValue;\n    },\n    'boolean': function booleanVal(x) {\n      return 'object' === typeof x ? x.nodes.length > 0 : !!x;\n    },\n    'last': function last() {\n      console.assert(Array.isArray(this.pos));\n      console.assert(Array.isArray(this.lasts));\n      console.assert(1 === this.pos.length);\n      console.assert(1 === this.lasts.length);\n      console.assert(1 === this.lasts[0].length);\n      return this.lasts[0][0];\n    },\n    'position': function position() {\n      console.assert(Array.isArray(this.pos));\n      console.assert(Array.isArray(this.lasts));\n      console.assert(1 === this.pos.length);\n      console.assert(1 === this.lasts.length);\n      console.assert(1 === this.pos[0].length);\n      return this.pos[0][0];\n    },\n    'count': function count(nodeSet) {\n      if ('object' !== typeof nodeSet) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Position ' + stream.position() + ': Function count(node-set) ' + 'got wrong argument type: ' + nodeSet);\n      return nodeSet.nodes.length;\n    },\n    'id': function id(object) {\n      var r = {\n        nodes: []\n      };\n      var doc = this.nodes[0].ownerDocument || this.nodes[0];\n      console.assert(doc);\n      var ids;\n\n      if ('object' === typeof object) {\n        // for node-sets, map id over each node value.\n        ids = [];\n\n        for (var i = 0; i < object.nodes.length; ++i) {\n          var idNode = object.nodes[i];\n          var idsString = fn.string({\n            nodes: [idNode]\n          });\n          var a = idsString.split(/[ \\t\\r\\n]+/g);\n          Array.prototype.push.apply(ids, a);\n        }\n      } else {\n        var idsString = fn.string(object);\n        var a = idsString.split(/[ \\t\\r\\n]+/g);\n        ids = a;\n      }\n\n      for (var i = 0; i < ids.length; ++i) {\n        var id = ids[i];\n        if (0 === id.length) continue;\n        var node = doc.getElementById(id);\n        if (null != node) r.nodes.push(node);\n      }\n\n      r.nodes = sortUniqDocumentOrder(r.nodes);\n      return r;\n    },\n    'local-name': function localName(nodeSet) {\n      if (null == nodeSet) return fn.name(this);\n\n      if (null == nodeSet.nodes) {\n        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'argument to name() must be a node-set. got ' + nodeSet);\n      } // TODO: namespaced version\n\n\n      return nodeSet.nodes[0].localName;\n    },\n    'namespace-uri': function namespaceUri(nodeSet) {\n      // TODO\n      throw new Error('not implemented yet');\n    },\n    'name': function name(nodeSet) {\n      if (null == nodeSet) return fn.name(this);\n\n      if (null == nodeSet.nodes) {\n        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'argument to name() must be a node-set. got ' + nodeSet);\n      }\n\n      return nodeSet.nodes[0].name;\n    },\n    'concat': function concat(x) {\n      var l = [];\n\n      for (var i = 0; i < arguments.length; ++i) {\n        l.push(fn.string(arguments[i]));\n      }\n\n      return l.join('');\n    },\n    'starts-with': function startsWith(a, b) {\n      var as = fn.string(a),\n          bs = fn.string(b);\n      return as.substr(0, bs.length) === bs;\n    },\n    'contains': function contains(a, b) {\n      var as = fn.string(a),\n          bs = fn.string(b);\n      var i = as.indexOf(bs);\n      if (-1 === i) return false;\n      return true;\n    },\n    'substring-before': function substringBefore(a, b) {\n      var as = fn.string(a),\n          bs = fn.string(b);\n      var i = as.indexOf(bs);\n      if (-1 === i) return '';\n      return as.substr(0, i);\n    },\n    'substring-after': function substringBefore(a, b) {\n      var as = fn.string(a),\n          bs = fn.string(b);\n      var i = as.indexOf(bs);\n      if (-1 === i) return '';\n      return as.substr(i + bs.length);\n    },\n    'substring': function substring(string, start, optEnd) {\n      if (null == string || null == start) {\n        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Must be at least 2 arguments to string()');\n      }\n\n      var sString = fn.string(string),\n          iStart = fn.round(start),\n          iEnd = optEnd == null ? null : fn.round(optEnd); // Note that xpath string positions user 1-based index\n\n      if (iEnd == null) return sString.substr(iStart - 1);else return sString.substr(iStart - 1, iEnd);\n    },\n    'string-length': function stringLength(optString) {\n      return fn.string.call(this, optString).length;\n    },\n    'normalize-space': function normalizeSpace(optString) {\n      var s = fn.string.call(this, optString);\n      return s.replace(/[ \\t\\r\\n]+/g, ' ').replace(/^ | $/g, '');\n    },\n    'translate': function translate(string, from, to) {\n      var sString = fn.string.call(this, string),\n          sFrom = fn.string(from),\n          sTo = fn.string(to);\n      var eachCharRe = [];\n      var map = {};\n\n      for (var i = 0; i < sFrom.length; ++i) {\n        var c = sFrom.charAt(i);\n        map[c] = sTo.charAt(i); // returns '' if beyond length of sTo.\n        // copied from goog.string.regExpEscape in the Closure library.\n\n        eachCharRe.push(c.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1').replace(/\\x08/g, '\\\\x08'));\n      }\n\n      var re = new RegExp(eachCharRe.join('|'), 'g');\n      return sString.replace(re, function (c) {\n        return map[c];\n      });\n    },\n    /// Boolean functions\n    'not': function not(x) {\n      var bx = fn['boolean'](x);\n      return !bx;\n    },\n    'true': function trueVal() {\n      return true;\n    },\n    'false': function falseVal() {\n      return false;\n    },\n    // TODO\n    'lang': function lang(string) {\n      throw new Error('Not implemented');\n    },\n    'sum': function sum(optNodeSet) {\n      if (null == optNodeSet) return fn.sum(this); // for node-sets, map id over each node value.\n\n      var sum = 0;\n\n      for (var i = 0; i < optNodeSet.nodes.length; ++i) {\n        var node = optNodeSet.nodes[i];\n        var x = fn.number({\n          nodes: [node]\n        });\n        sum += x;\n      }\n\n      return sum;\n    },\n    'floor': function floor(number) {\n      return Math.floor(fn.number(number));\n    },\n    'ceiling': function ceiling(number) {\n      return Math.ceil(fn.number(number));\n    },\n    'round': function round(number) {\n      return Math.round(fn.number(number));\n    }\n  };\n  /***************************************************************************\n   *                         Evaluation: operators                           *\n   ***************************************************************************/\n\n  var more = {\n    UnaryMinus: function UnaryMinus(x) {\n      return -fn.number(x);\n    },\n    '+': function _(x, y) {\n      return fn.number(x) + fn.number(y);\n    },\n    '-': function _(x, y) {\n      return fn.number(x) - fn.number(y);\n    },\n    '*': function _(x, y) {\n      return fn.number(x) * fn.number(y);\n    },\n    'div': function div(x, y) {\n      return fn.number(x) / fn.number(y);\n    },\n    'mod': function mod(x, y) {\n      return fn.number(x) % fn.number(y);\n    },\n    '<': function _(x, y) {\n      return comparisonHelper(function (x, y) {\n        return fn.number(x) < fn.number(y);\n      }, x, y, true);\n    },\n    '<=': function _(x, y) {\n      return comparisonHelper(function (x, y) {\n        return fn.number(x) <= fn.number(y);\n      }, x, y, true);\n    },\n    '>': function _(x, y) {\n      return comparisonHelper(function (x, y) {\n        return fn.number(x) > fn.number(y);\n      }, x, y, true);\n    },\n    '>=': function _(x, y) {\n      return comparisonHelper(function (x, y) {\n        return fn.number(x) >= fn.number(y);\n      }, x, y, true);\n    },\n    'and': function and(x, y) {\n      return fn['boolean'](x) && fn['boolean'](y);\n    },\n    'or': function or(x, y) {\n      return fn['boolean'](x) || fn['boolean'](y);\n    },\n    '|': function _(x, y) {\n      return {\n        nodes: mergeNodeLists(x.nodes, y.nodes)\n      };\n    },\n    '=': function _(x, y) {\n      // optimization for two node-sets case: avoid n^2 comparisons.\n      if ('object' === typeof x && 'object' === typeof y) {\n        var aMap = {};\n\n        for (var i = 0; i < x.nodes.length; ++i) {\n          var s = fn.string({\n            nodes: [x.nodes[i]]\n          });\n          aMap[s] = true;\n        }\n\n        for (var i = 0; i < y.nodes.length; ++i) {\n          var s = fn.string({\n            nodes: [y.nodes[i]]\n          });\n          if (aMap[s]) return true;\n        }\n\n        return false;\n      } else {\n        return comparisonHelper(function (x, y) {\n          return x === y;\n        }, x, y);\n      }\n    },\n    '!=': function _(x, y) {\n      // optimization for two node-sets case: avoid n^2 comparisons.\n      if ('object' === typeof x && 'object' === typeof y) {\n        if (0 === x.nodes.length || 0 === y.nodes.length) return false;\n        var aMap = {};\n\n        for (var i = 0; i < x.nodes.length; ++i) {\n          var s = fn.string({\n            nodes: [x.nodes[i]]\n          });\n          aMap[s] = true;\n        }\n\n        for (var i = 0; i < y.nodes.length; ++i) {\n          var s = fn.string({\n            nodes: [y.nodes[i]]\n          });\n          if (!aMap[s]) return true;\n        }\n\n        return false;\n      } else {\n        return comparisonHelper(function (x, y) {\n          return x !== y;\n        }, x, y);\n      }\n    }\n  };\n  var nodeTypes = xpath.nodeTypes = {\n    'node': 0,\n    'attribute': 2,\n    'comment': 8,\n    // this.doc.COMMENT_NODE,\n    'text': 3,\n    // this.doc.TEXT_NODE,\n    'processing-instruction': 7,\n    // this.doc.PROCESSING_INSTRUCTION_NODE,\n    'element': 1 //this.doc.ELEMENT_NODE\n\n  };\n  /** For debugging and unit tests: returnjs a stringified version of the\n   * argument. */\n\n  var stringifyObject = xpath.stringifyObject = function stringifyObject(ctx) {\n    var seenKey = 'seen' + Math.floor(Math.random() * 1000000000);\n    return JSON.stringify(helper(ctx));\n\n    function helper(ctx) {\n      if (Array.isArray(ctx)) {\n        return ctx.map(function (x) {\n          return helper(x);\n        });\n      }\n\n      if ('object' !== typeof ctx) return ctx;\n      if (null == ctx) return ctx; //  if (ctx.toString) return ctx.toString();\n\n      if (null != ctx.outerHTML) return ctx.outerHTML;\n      if (null != ctx.nodeValue) return ctx.nodeName + '=' + ctx.nodeValue;\n      if (ctx[seenKey]) return '[circular]';\n      ctx[seenKey] = true;\n      var nicer = {};\n\n      for (var key in ctx) {\n        if (seenKey === key) continue;\n\n        try {\n          nicer[key] = helper(ctx[key]);\n        } catch (e) {\n          nicer[key] = '[exception: ' + e.message + ']';\n        }\n      }\n\n      delete ctx[seenKey];\n      return nicer;\n    }\n  };\n\n  var Evaluator = xpath.Evaluator = function Evaluator(doc) {\n    this.doc = doc;\n  };\n\n  Evaluator.prototype = {\n    val: function val(ast, ctx) {\n      console.assert(ctx.nodes);\n      if ('number' === typeof ast || 'string' === typeof ast) return ast;\n\n      if (more[ast[0]]) {\n        var evaluatedParams = [];\n\n        for (var i = 1; i < ast.length; ++i) {\n          evaluatedParams.push(this.val(ast[i], ctx));\n        }\n\n        var r = more[ast[0]].apply(ctx, evaluatedParams);\n        return r;\n      }\n\n      switch (ast[0]) {\n        case 'Root':\n          return {\n            nodes: [this.doc]\n          };\n\n        case 'FunctionCall':\n          var functionName = ast[1],\n              functionParams = ast[2];\n          if (null == fn[functionName]) throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, 'Unknown function: ' + functionName);\n          var evaluatedParams = [];\n\n          for (var i = 0; i < functionParams.length; ++i) {\n            evaluatedParams.push(this.val(functionParams[i], ctx));\n          }\n\n          var r = fn[functionName].apply(ctx, evaluatedParams);\n          return r;\n\n        case 'Predicate':\n          var lhs = this.val(ast[1], ctx);\n          var ret = {\n            nodes: []\n          };\n          var contexts = eachContext(lhs);\n\n          for (var i = 0; i < contexts.length; ++i) {\n            var singleNodeSet = contexts[i];\n            var rhs = this.val(ast[2], singleNodeSet);\n            var success;\n\n            if ('number' === typeof rhs) {\n              success = rhs === singleNodeSet.pos[0][0];\n            } else {\n              success = fn['boolean'](rhs);\n            }\n\n            if (success) {\n              var node = singleNodeSet.nodes[0];\n              ret.nodes.push(node); // skip over all the rest of the same node.\n\n              while (i + 1 < contexts.length && node === contexts[i + 1].nodes[0]) {\n                i++;\n              }\n            }\n          }\n\n          return ret;\n\n        case 'PathExpr':\n          // turn the path into an expressoin; i.e., remove the position\n          // information of the last axis.\n          var x = this.val(ast[1], ctx); // Make the nodeset a forward-direction-only one.\n\n          if (x.finalize) {\n            // it is a NodeMultiSet\n            return {\n              nodes: x.nodes\n            };\n          } else {\n            return x;\n          }\n\n        case '/':\n          // TODO: don't generate '/' nodes, just Axis nodes.\n          var lhs = this.val(ast[1], ctx);\n          console.assert(null != lhs);\n          var r = this.val(ast[2], lhs);\n          console.assert(null != r);\n          return r;\n\n        case 'Axis':\n          // All the axis tests from Step. We only get AxisSpecifier NodeTest,\n          // not the predicate (which is applied later)\n          var axis = ast[1],\n              nodeType = ast[2],\n              nodeTypeNum = nodeTypes[nodeType],\n              shouldLowerCase = true,\n              // TODO: give option\n          nodeName = ast[3] && shouldLowerCase ? ast[3].toLowerCase() : ast[3];\n          nodeName = nodeName === '*' ? null : nodeName;\n          if ('object' !== typeof ctx) return {\n            nodes: [],\n            pos: []\n          };\n          var nodeList = ctx.nodes.slice(); // TODO: is copy needed?\n\n          var r = axes[axis](nodeList\n          /*destructive!*/\n          , nodeTypeNum, nodeName, shouldLowerCase);\n          return r;\n      }\n    }\n  };\n\n  var evaluate = xpath.evaluate = function evaluate(expr, doc, context) {\n    //var astFactory = new AstEvaluatorFactory(doc, context);\n    var stream = new Stream(expr);\n    var ast = parse(stream, astFactory);\n    var val = new Evaluator(doc).val(ast, {\n      nodes: [context]\n    });\n    return val;\n  };\n  /***************************************************************************\n   *                           DOM interface                                 *\n   ***************************************************************************/\n\n\n  var XPathException = xpath.XPathException = function XPathException(code, message) {\n    var e = new Error(message);\n    e.name = 'XPathException';\n    e.code = code;\n    return e;\n  };\n\n  XPathException.INVALID_EXPRESSION_ERR = 51;\n  XPathException.TYPE_ERR = 52;\n\n  var XPathEvaluator = xpath.XPathEvaluator = function XPathEvaluator() {};\n\n  XPathEvaluator.prototype = {\n    createExpression: function createExpression(expression, resolver) {\n      return new XPathExpression(expression, resolver);\n    },\n    createNSResolver: function createNSResolver(nodeResolver) {// TODO\n    },\n    evaluate: function evaluate(expression, contextNode, resolver, type, result) {\n      var expr = new XPathExpression(expression, resolver);\n      return expr.evaluate(contextNode, type, result);\n    }\n  };\n\n  var XPathExpression = xpath.XPathExpression = function XPathExpression(expression, resolver, optDoc) {\n    var stream = new Stream(expression);\n    this._ast = parse(stream, astFactory);\n    this._doc = optDoc;\n  };\n\n  XPathExpression.prototype = {\n    evaluate: function evaluate(contextNode, type, result) {\n      if (null == contextNode.nodeType) throw new Error('bad argument (expected context node): ' + contextNode);\n      var doc = contextNode.ownerDocument || contextNode;\n\n      if (null != this._doc && this._doc !== doc) {\n        throw new core.DOMException(core.DOMException.WRONG_DOCUMENT_ERR, 'The document must be the same as the context node\\'s document.');\n      }\n\n      var evaluator = new Evaluator(doc);\n      var value = evaluator.val(this._ast, {\n        nodes: [contextNode]\n      });\n      if (XPathResult.NUMBER_TYPE === type) value = fn.number(value);else if (XPathResult.STRING_TYPE === type) value = fn.string(value);else if (XPathResult.BOOLEAN_TYPE === type) value = fn['boolean'](value);else if (XPathResult.ANY_TYPE !== type && XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== type && XPathResult.ORDERED_NODE_ITERATOR_TYPE !== type && XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== type && XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== type && XPathResult.ANY_UNORDERED_NODE_TYPE !== type && XPathResult.FIRST_ORDERED_NODE_TYPE !== type) throw new core.DOMException(core.DOMException.NOT_SUPPORTED_ERR, 'You must provide an XPath result type (0=any).');else if (XPathResult.ANY_TYPE !== type && 'object' !== typeof value) throw new XPathException(XPathException.TYPE_ERR, 'Value should be a node-set: ' + value);\n      return new XPathResult(doc, value, type);\n    }\n  };\n\n  var XPathResult = xpath.XPathResult = function XPathResult(doc, value, resultType) {\n    this._value = value;\n    this._resultType = resultType;\n    this._i = 0; // TODO: we removed mutation events but didn't take care of this. No tests fail, so that's nice, but eventually we\n    // should fix this, preferably by entirely replacing our XPath implementation.\n    // this._invalidated = false;\n    // if (this.resultType === XPathResult.UNORDERED_NODE_ITERATOR_TYPE ||\n    //     this.resultType === XPathResult.ORDERED_NODE_ITERATOR_TYPE) {\n    //   doc.addEventListener('DOMSubtreeModified', invalidate, true);\n    //   var self = this;\n    //   function invalidate() {\n    //     self._invalidated = true;\n    //     doc.removeEventListener('DOMSubtreeModified', invalidate, true);\n    //   }\n    // }\n  };\n\n  XPathResult.ANY_TYPE = 0;\n  XPathResult.NUMBER_TYPE = 1;\n  XPathResult.STRING_TYPE = 2;\n  XPathResult.BOOLEAN_TYPE = 3;\n  XPathResult.UNORDERED_NODE_ITERATOR_TYPE = 4;\n  XPathResult.ORDERED_NODE_ITERATOR_TYPE = 5;\n  XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE = 6;\n  XPathResult.ORDERED_NODE_SNAPSHOT_TYPE = 7;\n  XPathResult.ANY_UNORDERED_NODE_TYPE = 8;\n  XPathResult.FIRST_ORDERED_NODE_TYPE = 9;\n  var proto = {\n    // XPathResultType\n    get resultType() {\n      if (this._resultType) return this._resultType;\n\n      switch (typeof this._value) {\n        case 'number':\n          return XPathResult.NUMBER_TYPE;\n\n        case 'string':\n          return XPathResult.STRING_TYPE;\n\n        case 'boolean':\n          return XPathResult.BOOLEAN_TYPE;\n\n        default:\n          return XPathResult.UNORDERED_NODE_ITERATOR_TYPE;\n      }\n    },\n\n    get numberValue() {\n      if (XPathResult.NUMBER_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a NUMBER_TYPE.');\n      return this._value;\n    },\n\n    get stringValue() {\n      if (XPathResult.STRING_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a STRING_TYPE.');\n      return this._value;\n    },\n\n    get booleanValue() {\n      if (XPathResult.BOOLEAN_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a BOOLEAN_TYPE.');\n      return this._value;\n    },\n\n    get singleNodeValue() {\n      if (XPathResult.ANY_UNORDERED_NODE_TYPE !== this.resultType && XPathResult.FIRST_ORDERED_NODE_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a FIRST_ORDERED_NODE_TYPE.');\n      return this._value.nodes[0] || null;\n    },\n\n    get invalidIteratorState() {\n      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType && XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType) return false;\n      return !!this._invalidated;\n    },\n\n    get snapshotLength() {\n      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType && XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');\n      return this._value.nodes.length;\n    },\n\n    iterateNext: function iterateNext() {\n      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType && XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a ORDERED_NODE_ITERATOR_TYPE.');\n      if (this.invalidIteratorState) throw new core.DOMException(core.DOMException.INVALID_STATE_ERR, 'The document has been mutated since the result was returned');\n      return this._value.nodes[this._i++] || null;\n    },\n    snapshotItem: function snapshotItem(index) {\n      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType && XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType) throw new XPathException(XPathException.TYPE_ERR, 'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');\n      return this._value.nodes[index] || null;\n    }\n  }; // so you can access ANY_TYPE etc. from the instances:\n\n  XPathResult.prototype = Object.create(XPathResult, Object.keys(proto).reduce(function (descriptors, name) {\n    descriptors[name] = Object.getOwnPropertyDescriptor(proto, name);\n    return descriptors;\n  }, {\n    constructor: {\n      value: XPathResult,\n      writable: true,\n      configurable: true\n    }\n  }));\n  core.XPathException = XPathException;\n  core.XPathExpression = XPathExpression;\n  core.XPathResult = XPathResult;\n  core.XPathEvaluator = XPathEvaluator;\n  core.Document.prototype.createExpression = XPathEvaluator.prototype.createExpression;\n  core.Document.prototype.createNSResolver = XPathEvaluator.prototype.createNSResolver;\n  core.Document.prototype.evaluate = XPathEvaluator.prototype.evaluate;\n  return xpath; // for tests\n};","map":null,"metadata":{},"sourceType":"script"}