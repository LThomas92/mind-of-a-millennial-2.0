{"ast":null,"code":"//.CommonJS\nvar CSSOM = {}; ///CommonJS\n\n/**\n * @param {string} token\n */\n\nCSSOM.parse = function parse(token) {\n  var i = 0;\n  /**\n  \t\"before-selector\" or\n  \t\"selector\" or\n  \t\"atRule\" or\n  \t\"atBlock\" or\n  \t\"conditionBlock\" or\n  \t\"before-name\" or\n  \t\"name\" or\n  \t\"before-value\" or\n  \t\"value\"\n  */\n\n  var state = \"before-selector\";\n  var index;\n  var buffer = \"\";\n  var valueParenthesisDepth = 0;\n  var SIGNIFICANT_WHITESPACE = {\n    \"selector\": true,\n    \"value\": true,\n    \"value-parenthesis\": true,\n    \"atRule\": true,\n    \"importRule-begin\": true,\n    \"importRule\": true,\n    \"atBlock\": true,\n    \"conditionBlock\": true,\n    'documentRule-begin': true\n  };\n  var styleSheet = new CSSOM.CSSStyleSheet(); // @type CSSStyleSheet|CSSMediaRule|CSSSupportsRule|CSSFontFaceRule|CSSKeyframesRule|CSSDocumentRule\n\n  var currentScope = styleSheet; // @type CSSMediaRule|CSSSupportsRule|CSSKeyframesRule|CSSDocumentRule\n\n  var parentRule;\n  var ancestorRules = [];\n  var hasAncestors = false;\n  var prevScope;\n  var name,\n      priority = \"\",\n      styleRule,\n      mediaRule,\n      supportsRule,\n      importRule,\n      fontFaceRule,\n      keyframesRule,\n      documentRule,\n      hostRule;\n  var atKeyframesRegExp = /@(-(?:\\w+-)+)?keyframes/g;\n\n  var parseError = function parseError(message) {\n    var lines = token.substring(0, i).split('\\n');\n    var lineCount = lines.length;\n    var charCount = lines.pop().length + 1;\n    var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');\n    error.line = lineCount;\n    /* jshint sub : true */\n\n    error['char'] = charCount;\n    error.styleSheet = styleSheet;\n    throw error;\n  };\n\n  for (var character; character = token.charAt(i); i++) {\n    switch (character) {\n      case \" \":\n      case \"\\t\":\n      case \"\\r\":\n      case \"\\n\":\n      case \"\\f\":\n        if (SIGNIFICANT_WHITESPACE[state]) {\n          buffer += character;\n        }\n\n        break;\n      // String\n\n      case '\"':\n        index = i + 1;\n\n        do {\n          index = token.indexOf('\"', index) + 1;\n\n          if (!index) {\n            parseError('Unmatched \"');\n          }\n        } while (token[index - 2] === '\\\\');\n\n        buffer += token.slice(i, index);\n        i = index - 1;\n\n        switch (state) {\n          case 'before-value':\n            state = 'value';\n            break;\n\n          case 'importRule-begin':\n            state = 'importRule';\n            break;\n        }\n\n        break;\n\n      case \"'\":\n        index = i + 1;\n\n        do {\n          index = token.indexOf(\"'\", index) + 1;\n\n          if (!index) {\n            parseError(\"Unmatched '\");\n          }\n        } while (token[index - 2] === '\\\\');\n\n        buffer += token.slice(i, index);\n        i = index - 1;\n\n        switch (state) {\n          case 'before-value':\n            state = 'value';\n            break;\n\n          case 'importRule-begin':\n            state = 'importRule';\n            break;\n        }\n\n        break;\n      // Comment\n\n      case \"/\":\n        if (token.charAt(i + 1) === \"*\") {\n          i += 2;\n          index = token.indexOf(\"*/\", i);\n\n          if (index === -1) {\n            parseError(\"Missing */\");\n          } else {\n            i = index + 1;\n          }\n        } else {\n          buffer += character;\n        }\n\n        if (state === \"importRule-begin\") {\n          buffer += \" \";\n          state = \"importRule\";\n        }\n\n        break;\n      // At-rule\n\n      case \"@\":\n        if (token.indexOf(\"@-moz-document\", i) === i) {\n          state = \"documentRule-begin\";\n          documentRule = new CSSOM.CSSDocumentRule();\n          documentRule.__starts = i;\n          i += \"-moz-document\".length;\n          buffer = \"\";\n          break;\n        } else if (token.indexOf(\"@media\", i) === i) {\n          state = \"atBlock\";\n          mediaRule = new CSSOM.CSSMediaRule();\n          mediaRule.__starts = i;\n          i += \"media\".length;\n          buffer = \"\";\n          break;\n        } else if (token.indexOf(\"@supports\", i) === i) {\n          state = \"conditionBlock\";\n          supportsRule = new CSSOM.CSSSupportsRule();\n          supportsRule.__starts = i;\n          i += \"supports\".length;\n          buffer = \"\";\n          break;\n        } else if (token.indexOf(\"@host\", i) === i) {\n          state = \"hostRule-begin\";\n          i += \"host\".length;\n          hostRule = new CSSOM.CSSHostRule();\n          hostRule.__starts = i;\n          buffer = \"\";\n          break;\n        } else if (token.indexOf(\"@import\", i) === i) {\n          state = \"importRule-begin\";\n          i += \"import\".length;\n          buffer += \"@import\";\n          break;\n        } else if (token.indexOf(\"@font-face\", i) === i) {\n          state = \"fontFaceRule-begin\";\n          i += \"font-face\".length;\n          fontFaceRule = new CSSOM.CSSFontFaceRule();\n          fontFaceRule.__starts = i;\n          buffer = \"\";\n          break;\n        } else {\n          atKeyframesRegExp.lastIndex = i;\n          var matchKeyframes = atKeyframesRegExp.exec(token);\n\n          if (matchKeyframes && matchKeyframes.index === i) {\n            state = \"keyframesRule-begin\";\n            keyframesRule = new CSSOM.CSSKeyframesRule();\n            keyframesRule.__starts = i;\n            keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found\n\n            i += matchKeyframes[0].length - 1;\n            buffer = \"\";\n            break;\n          } else if (state === \"selector\") {\n            state = \"atRule\";\n          }\n        }\n\n        buffer += character;\n        break;\n\n      case \"{\":\n        if (state === \"selector\" || state === \"atRule\") {\n          styleRule.selectorText = buffer.trim();\n          styleRule.style.__starts = i;\n          buffer = \"\";\n          state = \"before-name\";\n        } else if (state === \"atBlock\") {\n          mediaRule.media.mediaText = buffer.trim();\n\n          if (parentRule) {\n            ancestorRules.push(parentRule);\n          }\n\n          currentScope = parentRule = mediaRule;\n          mediaRule.parentStyleSheet = styleSheet;\n          buffer = \"\";\n          state = \"before-selector\";\n        } else if (state === \"conditionBlock\") {\n          supportsRule.conditionText = buffer.trim();\n\n          if (parentRule) {\n            ancestorRules.push(parentRule);\n          }\n\n          currentScope = parentRule = supportsRule;\n          supportsRule.parentStyleSheet = styleSheet;\n          buffer = \"\";\n          state = \"before-selector\";\n        } else if (state === \"hostRule-begin\") {\n          if (parentRule) {\n            ancestorRules.push(parentRule);\n          }\n\n          currentScope = parentRule = hostRule;\n          hostRule.parentStyleSheet = styleSheet;\n          buffer = \"\";\n          state = \"before-selector\";\n        } else if (state === \"fontFaceRule-begin\") {\n          if (parentRule) {\n            ancestorRules.push(parentRule);\n            fontFaceRule.parentRule = parentRule;\n          }\n\n          fontFaceRule.parentStyleSheet = styleSheet;\n          styleRule = fontFaceRule;\n          buffer = \"\";\n          state = \"before-name\";\n        } else if (state === \"keyframesRule-begin\") {\n          keyframesRule.name = buffer.trim();\n\n          if (parentRule) {\n            ancestorRules.push(parentRule);\n            keyframesRule.parentRule = parentRule;\n          }\n\n          keyframesRule.parentStyleSheet = styleSheet;\n          currentScope = parentRule = keyframesRule;\n          buffer = \"\";\n          state = \"keyframeRule-begin\";\n        } else if (state === \"keyframeRule-begin\") {\n          styleRule = new CSSOM.CSSKeyframeRule();\n          styleRule.keyText = buffer.trim();\n          styleRule.__starts = i;\n          buffer = \"\";\n          state = \"before-name\";\n        } else if (state === \"documentRule-begin\") {\n          // FIXME: what if this '{' is in the url text of the match function?\n          documentRule.matcher.matcherText = buffer.trim();\n\n          if (parentRule) {\n            ancestorRules.push(parentRule);\n            documentRule.parentRule = parentRule;\n          }\n\n          currentScope = parentRule = documentRule;\n          documentRule.parentStyleSheet = styleSheet;\n          buffer = \"\";\n          state = \"before-selector\";\n        }\n\n        break;\n\n      case \":\":\n        if (state === \"name\") {\n          name = buffer.trim();\n          buffer = \"\";\n          state = \"before-value\";\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \"(\":\n        if (state === 'value') {\n          // ie css expression mode\n          if (buffer.trim() === 'expression') {\n            var info = new CSSOM.CSSValueExpression(token, i).parse();\n\n            if (info.error) {\n              parseError(info.error);\n            } else {\n              buffer += info.expression;\n              i = info.idx;\n            }\n          } else {\n            state = 'value-parenthesis'; //always ensure this is reset to 1 on transition\n            //from value to value-parenthesis\n\n            valueParenthesisDepth = 1;\n            buffer += character;\n          }\n        } else if (state === 'value-parenthesis') {\n          valueParenthesisDepth++;\n          buffer += character;\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \")\":\n        if (state === 'value-parenthesis') {\n          valueParenthesisDepth--;\n          if (valueParenthesisDepth === 0) state = 'value';\n        }\n\n        buffer += character;\n        break;\n\n      case \"!\":\n        if (state === \"value\" && token.indexOf(\"!important\", i) === i) {\n          priority = \"important\";\n          i += \"important\".length;\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \";\":\n        switch (state) {\n          case \"value\":\n            styleRule.style.setProperty(name, buffer.trim(), priority);\n            priority = \"\";\n            buffer = \"\";\n            state = \"before-name\";\n            break;\n\n          case \"atRule\":\n            buffer = \"\";\n            state = \"before-selector\";\n            break;\n\n          case \"importRule\":\n            importRule = new CSSOM.CSSImportRule();\n            importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;\n            importRule.cssText = buffer + character;\n            styleSheet.cssRules.push(importRule);\n            buffer = \"\";\n            state = \"before-selector\";\n            break;\n\n          default:\n            buffer += character;\n            break;\n        }\n\n        break;\n\n      case \"}\":\n        switch (state) {\n          case \"value\":\n            styleRule.style.setProperty(name, buffer.trim(), priority);\n            priority = \"\";\n\n          /* falls through */\n\n          case \"before-name\":\n          case \"name\":\n            styleRule.__ends = i + 1;\n\n            if (parentRule) {\n              styleRule.parentRule = parentRule;\n            }\n\n            styleRule.parentStyleSheet = styleSheet;\n            currentScope.cssRules.push(styleRule);\n            buffer = \"\";\n\n            if (currentScope.constructor === CSSOM.CSSKeyframesRule) {\n              state = \"keyframeRule-begin\";\n            } else {\n              state = \"before-selector\";\n            }\n\n            break;\n\n          case \"keyframeRule-begin\":\n          case \"before-selector\":\n          case \"selector\":\n            // End of media/supports/document rule.\n            if (!parentRule) {\n              parseError(\"Unexpected }\");\n            } // Handle rules nested in @media or @supports\n\n\n            hasAncestors = ancestorRules.length > 0;\n\n            while (ancestorRules.length > 0) {\n              parentRule = ancestorRules.pop();\n\n              if (parentRule.constructor.name === \"CSSMediaRule\" || parentRule.constructor.name === \"CSSSupportsRule\") {\n                prevScope = currentScope;\n                currentScope = parentRule;\n                currentScope.cssRules.push(prevScope);\n                break;\n              }\n\n              if (ancestorRules.length === 0) {\n                hasAncestors = false;\n              }\n            }\n\n            if (!hasAncestors) {\n              currentScope.__ends = i + 1;\n              styleSheet.cssRules.push(currentScope);\n              currentScope = styleSheet;\n              parentRule = null;\n            }\n\n            buffer = \"\";\n            state = \"before-selector\";\n            break;\n        }\n\n        break;\n\n      default:\n        switch (state) {\n          case \"before-selector\":\n            state = \"selector\";\n            styleRule = new CSSOM.CSSStyleRule();\n            styleRule.__starts = i;\n            break;\n\n          case \"before-name\":\n            state = \"name\";\n            break;\n\n          case \"before-value\":\n            state = \"value\";\n            break;\n\n          case \"importRule-begin\":\n            state = \"importRule\";\n            break;\n        }\n\n        buffer += character;\n        break;\n    }\n  }\n\n  return styleSheet;\n}; //.CommonJS\n\n\nexports.parse = CSSOM.parse; // The following modules cannot be included sooner due to the mutual dependency with parse.js\n\nCSSOM.CSSStyleSheet = require(\"./CSSStyleSheet\").CSSStyleSheet;\nCSSOM.CSSStyleRule = require(\"./CSSStyleRule\").CSSStyleRule;\nCSSOM.CSSImportRule = require(\"./CSSImportRule\").CSSImportRule;\nCSSOM.CSSMediaRule = require(\"./CSSMediaRule\").CSSMediaRule;\nCSSOM.CSSSupportsRule = require(\"./CSSSupportsRule\").CSSSupportsRule;\nCSSOM.CSSFontFaceRule = require(\"./CSSFontFaceRule\").CSSFontFaceRule;\nCSSOM.CSSHostRule = require(\"./CSSHostRule\").CSSHostRule;\nCSSOM.CSSStyleDeclaration = require('./CSSStyleDeclaration').CSSStyleDeclaration;\nCSSOM.CSSKeyframeRule = require('./CSSKeyframeRule').CSSKeyframeRule;\nCSSOM.CSSKeyframesRule = require('./CSSKeyframesRule').CSSKeyframesRule;\nCSSOM.CSSValueExpression = require('./CSSValueExpression').CSSValueExpression;\nCSSOM.CSSDocumentRule = require('./CSSDocumentRule').CSSDocumentRule; ///CommonJS","map":null,"metadata":{},"sourceType":"script"}