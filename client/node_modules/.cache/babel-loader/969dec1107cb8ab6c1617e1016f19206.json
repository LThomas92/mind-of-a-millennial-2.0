{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  CSSRule: require(\"./CSSRule\").CSSRule,\n  CSSStyleSheet: require(\"./CSSStyleSheet\").CSSStyleSheet,\n  MediaList: require(\"./MediaList\").MediaList\n}; ///CommonJS\n\n/**\n * @constructor\n * @see http://dev.w3.org/csswg/cssom/#cssimportrule\n * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule\n */\n\nCSSOM.CSSImportRule = function CSSImportRule() {\n  CSSOM.CSSRule.call(this);\n  this.href = \"\";\n  this.media = new CSSOM.MediaList();\n  this.styleSheet = new CSSOM.CSSStyleSheet();\n};\n\nCSSOM.CSSImportRule.prototype = new CSSOM.CSSRule();\nCSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;\nCSSOM.CSSImportRule.prototype.type = 3;\nObject.defineProperty(CSSOM.CSSImportRule.prototype, \"cssText\", {\n  get: function get() {\n    var mediaText = this.media.mediaText;\n    return \"@import url(\" + this.href + \")\" + (mediaText ? \" \" + mediaText : \"\") + \";\";\n  },\n  set: function set(cssText) {\n    var i = 0;\n    /**\n     * @import url(partial.css) screen, handheld;\n     *        ||               |\n     *        after-import     media\n     *         |\n     *         url\n     */\n\n    var state = '';\n    var buffer = '';\n    var index;\n\n    for (var character; character = cssText.charAt(i); i++) {\n      switch (character) {\n        case ' ':\n        case '\\t':\n        case '\\r':\n        case '\\n':\n        case '\\f':\n          if (state === 'after-import') {\n            state = 'url';\n          } else {\n            buffer += character;\n          }\n\n          break;\n\n        case '@':\n          if (!state && cssText.indexOf('@import', i) === i) {\n            state = 'after-import';\n            i += 'import'.length;\n            buffer = '';\n          }\n\n          break;\n\n        case 'u':\n          if (state === 'url' && cssText.indexOf('url(', i) === i) {\n            index = cssText.indexOf(')', i + 1);\n\n            if (index === -1) {\n              throw i + ': \")\" not found';\n            }\n\n            i += 'url('.length;\n            var url = cssText.slice(i, index);\n\n            if (url[0] === url[url.length - 1]) {\n              if (url[0] === '\"' || url[0] === \"'\") {\n                url = url.slice(1, -1);\n              }\n            }\n\n            this.href = url;\n            i = index;\n            state = 'media';\n          }\n\n          break;\n\n        case '\"':\n          if (state === 'url') {\n            index = cssText.indexOf('\"', i + 1);\n\n            if (!index) {\n              throw i + \": '\\\"' not found\";\n            }\n\n            this.href = cssText.slice(i + 1, index);\n            i = index;\n            state = 'media';\n          }\n\n          break;\n\n        case \"'\":\n          if (state === 'url') {\n            index = cssText.indexOf(\"'\", i + 1);\n\n            if (!index) {\n              throw i + ': \"\\'\" not found';\n            }\n\n            this.href = cssText.slice(i + 1, index);\n            i = index;\n            state = 'media';\n          }\n\n          break;\n\n        case ';':\n          if (state === 'media') {\n            if (buffer) {\n              this.media.mediaText = buffer.trim();\n            }\n          }\n\n          break;\n\n        default:\n          if (state === 'media') {\n            buffer += character;\n          }\n\n          break;\n      }\n    }\n  }\n}); //.CommonJS\n\nexports.CSSImportRule = CSSOM.CSSImportRule; ///CommonJS","map":null,"metadata":{},"sourceType":"script"}