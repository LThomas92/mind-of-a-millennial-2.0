{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nfunction HTMLCanvasElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLCanvasElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLCanvasElement, HTMLElement.interface);\nObject.defineProperty(HTMLCanvasElement, \"prototype\", {\n  value: HTMLCanvasElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nHTMLCanvasElement.prototype.getContext = function getContext(contextId) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getContext' on 'HTMLCanvasElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getContext' on 'HTMLCanvasElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n\n  for (var i = 1; i < arguments.length; i++) {\n    var _curArg = arguments[i];\n    _curArg = conversions[\"any\"](_curArg, {\n      context: \"Failed to execute 'getContext' on 'HTMLCanvasElement': parameter \" + (i + 1)\n    });\n    args.push(_curArg);\n  }\n\n  return utils.tryWrapperForImpl((_this$impl = this[impl]).getContext.apply(_this$impl, args));\n};\n\nHTMLCanvasElement.prototype.toDataURL = function toDataURL() {\n  var _this$impl2;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'toDataURL' on 'HTMLCanvasElement': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    var _curArg2 = arguments[1];\n\n    if (_curArg2 !== undefined) {\n      _curArg2 = conversions[\"any\"](_curArg2, {\n        context: \"Failed to execute 'toDataURL' on 'HTMLCanvasElement': parameter 2\"\n      });\n    }\n\n    args.push(_curArg2);\n  }\n  return (_this$impl2 = this[impl]).toDataURL.apply(_this$impl2, args);\n};\n\nHTMLCanvasElement.prototype.toBlob = function toBlob(callback) {\n  var _this$impl3;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'toBlob' on 'HTMLCanvasElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = utils.tryImplForWrapper(curArg);\n    args.push(curArg);\n  }\n  {\n    var _curArg3 = arguments[1];\n\n    if (_curArg3 !== undefined) {\n      _curArg3 = conversions[\"DOMString\"](_curArg3, {\n        context: \"Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 2\"\n      });\n    }\n\n    args.push(_curArg3);\n  }\n  {\n    var _curArg4 = arguments[2];\n\n    if (_curArg4 !== undefined) {\n      _curArg4 = conversions[\"any\"](_curArg4, {\n        context: \"Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 3\"\n      });\n    }\n\n    args.push(_curArg4);\n  }\n  return (_this$impl3 = this[impl]).toBlob.apply(_this$impl3, args);\n};\n\nObject.defineProperty(HTMLCanvasElement.prototype, \"width\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"width\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'width' property on 'HTMLCanvasElement': The provided value\"\n    });\n    this[impl][\"width\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLCanvasElement.prototype, \"height\", {\n  get: function get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"height\"];\n  },\n  set: function set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'height' property on 'HTMLCanvasElement': The provided value\"\n    });\n    this[impl][\"height\"] = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLCanvasElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLCanvasElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLCanvasElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLCanvasElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLCanvasElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLCanvasElement,\n  expose: {\n    Window: {\n      HTMLCanvasElement: HTMLCanvasElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/HTMLCanvasElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}