{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/traversal\"),\n    isConnected = _require.isConnected,\n    descendantsByHTMLLocalNames = _require.descendantsByHTMLLocalNames;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar notImplemented = require(\"../../browser/not-implemented\");\n\nvar _require3 = require(\"../../utils\"),\n    reflectURLAttribute = _require3.reflectURLAttribute;\n\nvar Event = require(\"../generated/Event\"); // http://www.whatwg.org/specs/web-apps/current-work/#category-listed\n\n\nvar listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]); // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n\nvar submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\nvar encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nvar methods = new Set([\"get\", \"post\", \"dialog\"]);\nvar constraintValidationPositiveResult = Symbol(\"positive\");\nvar constraintValidationNegativeResult = Symbol(\"negative\");\n\nvar HTMLFormElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLFormElementImpl, _HTMLElementImpl);\n\n  function HTMLFormElementImpl() {\n    _classCallCheck(this, HTMLFormElementImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLFormElementImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLFormElementImpl, [{\n    key: \"_descendantAdded\",\n    value: function _descendantAdded(parent, child) {\n      var form = this;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = domSymbolTree.treeIterator(child)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var el = _step.value;\n\n          if (typeof el._changedFormOwner === \"function\") {\n            el._changedFormOwner(form);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), \"_descendantAdded\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = domSymbolTree.treeIterator(child)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var el = _step2.value;\n\n          if (typeof el._changedFormOwner === \"function\") {\n            el._changedFormOwner(null);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), \"_descendantRemoved\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_doSubmit\",\n    value: function _doSubmit() {\n      if (!isConnected(this)) {\n        return;\n      }\n\n      var ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n      ev.initEvent(\"submit\", true, true);\n\n      if (this.dispatchEvent(ev)) {\n        this.submit();\n      }\n    }\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.elements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var el = _step3.value;\n\n          if (typeof el._formReset === \"function\") {\n            el._formReset();\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    // If the checkValidity() method is invoked, the user agent must statically validate the\n    // constraints of the form element, and return true if the constraint validation returned\n    // a positive result, and false if it returned a negative result.\n    value: function checkValidity() {\n      return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n  }, {\n    key: \"reportValidity\",\n    value: function reportValidity() {\n      return this.checkValidity();\n    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n  }, {\n    key: \"_staticallyValidateConstraints\",\n    value: function _staticallyValidateConstraints() {\n      var controls = [];\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = domSymbolTree.treeIterator(this)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var el = _step4.value;\n\n          if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n            controls.push(el);\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var invalidControls = [];\n\n      for (var _i = 0, _controls = controls; _i < _controls.length; _i++) {\n        var control = _controls[_i];\n\n        if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n          invalidControls.push(control);\n        }\n      }\n\n      if (invalidControls.length === 0) {\n        return {\n          result: constraintValidationPositiveResult\n        };\n      }\n\n      var unhandledInvalidControls = [];\n\n      for (var _i2 = 0, _invalidControls = invalidControls; _i2 < _invalidControls.length; _i2++) {\n        var invalidControl = _invalidControls[_i2];\n        var notCancelled = invalidControl.dispatchEvent(Event.createImpl([\"invalid\", {\n          cancelable: true\n        }]));\n\n        if (notCancelled) {\n          unhandledInvalidControls.push(invalidControl);\n        }\n      }\n\n      return {\n        result: constraintValidationNegativeResult,\n        unhandledInvalidControls: unhandledInvalidControls\n      };\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      var _this = this;\n\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return descendantsByHTMLLocalNames(_this, listedElements);\n        }\n      });\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.elements.length;\n    }\n  }, {\n    key: \"method\",\n    get: function get() {\n      var method = this.getAttribute(\"method\");\n\n      if (method) {\n        method = method.toLowerCase();\n      }\n\n      if (methods.has(method)) {\n        return method;\n      }\n\n      return \"get\";\n    },\n    set: function set(V) {\n      this.setAttribute(\"method\", V);\n    }\n  }, {\n    key: \"enctype\",\n    get: function get() {\n      var type = this.getAttribute(\"enctype\");\n\n      if (type) {\n        type = type.toLowerCase();\n      }\n\n      if (encTypes.has(type)) {\n        return type;\n      }\n\n      return \"application/x-www-form-urlencoded\";\n    },\n    set: function set(V) {\n      this.setAttribute(\"enctype\", V);\n    }\n  }, {\n    key: \"action\",\n    get: function get() {\n      var attributeValue = this.getAttribute(\"action\");\n\n      if (attributeValue === null || attributeValue === \"\") {\n        return this._ownerDocument.URL;\n      }\n\n      return reflectURLAttribute(this, \"action\");\n    },\n    set: function set(V) {\n      this.setAttribute(\"action\", V);\n    }\n  }]);\n\n  return HTMLFormElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}