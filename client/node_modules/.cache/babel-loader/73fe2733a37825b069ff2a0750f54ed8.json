{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _assertThisInitialized = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"tough-cookie\"),\n    CookieJar = _require.CookieJar;\n\nvar NodeImpl = require(\"./Node-impl\").implementation;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require2 = require(\"../../utils\"),\n    mixin = _require2.mixin,\n    memoizeQuery = _require2.memoizeQuery;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    firstChildWithHTMLLocalName = _require3.firstChildWithHTMLLocalName,\n    firstChildWithHTMLLocalNames = _require3.firstChildWithHTMLLocalNames,\n    firstDescendantWithHTMLLocalName = _require3.firstDescendantWithHTMLLocalName;\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar _require4 = require(\"../../level2/style\"),\n    StyleSheetList = _require4.StyleSheetList;\n\nvar _require5 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require5.domSymbolTree;\n\nvar eventAccessors = require(\"../helpers/create-event-accessor\");\n\nvar _require6 = require(\"../helpers/strings\"),\n    asciiLowercase = _require6.asciiLowercase,\n    stripAndCollapseASCIIWhitespace = _require6.stripAndCollapseASCIIWhitespace;\n\nvar _require7 = require(\"../helpers/namespaces\"),\n    HTML_NS = _require7.HTML_NS,\n    SVG_NS = _require7.SVG_NS;\n\nvar DOMException = require(\"domexception\");\n\nvar HTMLToDOM = require(\"../../browser/htmltodom\");\n\nvar History = require(\"../generated/History\");\n\nvar Location = require(\"../generated/Location\");\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar NodeList = require(\"../generated/NodeList\");\n\nvar validateName = require(\"../helpers/validate-names\").name;\n\nvar _require8 = require(\"../helpers/validate-names\"),\n    validateAndExtract = _require8.validateAndExtract;\n\nvar resourceLoader = require(\"../../browser/resource-loader\");\n\nvar GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nvar _require9 = require(\"../node\"),\n    clone = _require9.clone,\n    listOfElementsWithQualifiedName = _require9.listOfElementsWithQualifiedName,\n    listOfElementsWithNamespaceAndLocalName = _require9.listOfElementsWithNamespaceAndLocalName,\n    listOfElementsWithClassNames = _require9.listOfElementsWithClassNames;\n\nvar generatedAttr = require(\"../generated/Attr\");\n\nvar Comment = require(\"../generated/Comment\");\n\nvar ProcessingInstruction = require(\"../generated/ProcessingInstruction\");\n\nvar CDATASection = require(\"../generated/CDATASection\");\n\nvar Text = require(\"../generated/Text\");\n\nvar DocumentFragment = require(\"../generated/DocumentFragment\");\n\nvar DOMImplementation = require(\"../generated/DOMImplementation\");\n\nvar NonElementParentNodeImpl = require(\"./NonElementParentNode-impl\").implementation;\n\nvar ParentNodeImpl = require(\"./ParentNode-impl\").implementation;\n\nvar Element = require(\"../generated/Element\");\n\nvar HTMLUnknownElement = require(\"../generated/HTMLUnknownElement\");\n\nvar SVGElement = require(\"../generated/SVGElement\");\n\nvar TreeWalker = require(\"../generated/TreeWalker\");\n\nvar NodeIterator = require(\"../generated/NodeIterator\");\n\nvar CustomEvent = require(\"../generated/CustomEvent\");\n\nvar ErrorEvent = require(\"../generated/ErrorEvent\");\n\nvar Event = require(\"../generated/Event\");\n\nvar FocusEvent = require(\"../generated/FocusEvent\");\n\nvar HashChangeEvent = require(\"../generated/HashChangeEvent\");\n\nvar KeyboardEvent = require(\"../generated/KeyboardEvent\");\n\nvar MessageEvent = require(\"../generated/MessageEvent\");\n\nvar MouseEvent = require(\"../generated/MouseEvent\");\n\nvar PopStateEvent = require(\"../generated/PopStateEvent\");\n\nvar ProgressEvent = require(\"../generated/ProgressEvent\");\n\nvar TouchEvent = require(\"../generated/TouchEvent\");\n\nvar UIEvent = require(\"../generated/UIEvent\");\n\nfunction clearChildNodes(node) {\n  for (var child = domSymbolTree.firstChild(node); child; child = domSymbolTree.firstChild(node)) {\n    node.removeChild(child);\n  }\n}\n\nvar ResourceQueue =\n/*#__PURE__*/\nfunction () {\n  function ResourceQueue(paused) {\n    _classCallCheck(this, ResourceQueue);\n\n    this.paused = Boolean(paused);\n  }\n\n  _createClass(ResourceQueue, [{\n    key: \"push\",\n    value: function push(callback) {\n      var q = this;\n      var item = {\n        prev: q.tail,\n        check: function check() {\n          if (!q.paused && !this.prev && this.fired) {\n            callback(this.err, this.data, this.response);\n\n            if (this.next) {\n              this.next.prev = null;\n              this.next.check();\n            } else {\n              // q.tail===this\n              q.tail = null;\n            }\n          }\n        }\n      };\n\n      if (q.tail) {\n        q.tail.next = item;\n      }\n\n      q.tail = item;\n      return function (err, data, response) {\n        item.fired = 1;\n        item.err = err;\n        item.data = data;\n        item.response = response;\n        item.check();\n      };\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n\n      this.paused = false;\n      var head = this.tail;\n\n      while (head && head.prev) {\n        head = head.prev;\n      }\n\n      if (head) {\n        head.check();\n      }\n    }\n  }]);\n\n  return ResourceQueue;\n}();\n\nvar RequestManager =\n/*#__PURE__*/\nfunction () {\n  function RequestManager() {\n    _classCallCheck(this, RequestManager);\n\n    this.openedRequests = [];\n  }\n\n  _createClass(RequestManager, [{\n    key: \"add\",\n    value: function add(req) {\n      this.openedRequests.push(req);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(req) {\n      var idx = this.openedRequests.indexOf(req);\n\n      if (idx !== -1) {\n        this.openedRequests.splice(idx, 1);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.openedRequests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var openedRequest = _step.value;\n          openedRequest.abort();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.openedRequests = [];\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.openedRequests.length;\n    }\n  }]);\n\n  return RequestManager;\n}();\n\nfunction pad(number) {\n  if (number < 10) {\n    return \"0\" + number;\n  }\n\n  return number;\n}\n\nfunction toLastModifiedString(date) {\n  return pad(date.getMonth() + 1) + \"/\" + pad(date.getDate()) + \"/\" + date.getFullYear() + \" \" + pad(date.getHours()) + \":\" + pad(date.getMinutes()) + \":\" + pad(date.getSeconds());\n}\n\nvar eventInterfaceTable = {\n  customevent: CustomEvent,\n  errorevent: ErrorEvent,\n  event: Event,\n  events: Event,\n  focusevent: FocusEvent,\n  hashchangeevent: HashChangeEvent,\n  htmlevents: Event,\n  keyboardevent: KeyboardEvent,\n  messageevent: MessageEvent,\n  mouseevent: MouseEvent,\n  mouseevents: MouseEvent,\n  popstateevent: PopStateEvent,\n  progressevent: ProgressEvent,\n  svgevents: Event,\n  touchevent: TouchEvent,\n  uievent: UIEvent,\n  uievents: UIEvent\n};\n\nvar DocumentImpl =\n/*#__PURE__*/\nfunction (_NodeImpl) {\n  _inherits(DocumentImpl, _NodeImpl);\n\n  function DocumentImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, DocumentImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DocumentImpl).call(this, args, privateData));\n\n    _this._initGlobalEvents();\n\n    _this._ownerDocument = _assertThisInitialized(_this);\n    _this.nodeType = NODE_TYPE.DOCUMENT_NODE;\n\n    if (!privateData.options) {\n      privateData.options = {};\n    }\n\n    if (!privateData.options.parsingMode) {\n      privateData.options.parsingMode = \"xml\";\n    }\n\n    if (!privateData.options.encoding) {\n      privateData.options.encoding = \"UTF-8\";\n    }\n\n    if (!privateData.options.contentType) {\n      privateData.options.contentType = privateData.options.parsingMode === \"xml\" ? \"application/xml\" : \"text/html\";\n    }\n\n    _this._parsingMode = privateData.options.parsingMode;\n    _this._htmlToDom = new HTMLToDOM(privateData.options.parsingMode);\n    _this._implementation = DOMImplementation.createImpl([], {\n      ownerDocument: _assertThisInitialized(_this)\n    });\n    _this._defaultView = privateData.options.defaultView || null;\n    _this._global = privateData.options.global;\n    _this._documentElement = null;\n    _this._ids = Object.create(null);\n    _this._attached = true;\n    _this._currentScript = null;\n    _this._cookieJar = privateData.options.cookieJar;\n    _this._parseOptions = privateData.options.parseOptions;\n\n    if (_this._cookieJar === undefined) {\n      _this._cookieJar = new CookieJar(null, {\n        looseMode: true\n      });\n    }\n\n    _this.contentType = privateData.options.contentType;\n    _this._encoding = privateData.options.encoding;\n    var urlOption = privateData.options.url === undefined ? \"about:blank\" : privateData.options.url;\n    var parsed = whatwgURL.parseURL(urlOption);\n\n    if (parsed === null) {\n      throw new TypeError(\"Could not parse \\\"\".concat(urlOption, \"\\\" as a URL\"));\n    }\n\n    _this._URL = parsed;\n    _this.origin = whatwgURL.serializeURLOrigin(parsed);\n    _this._location = Location.createImpl([], {\n      relevantDocument: _assertThisInitialized(_this)\n    });\n    _this._history = History.createImpl([], {\n      window: _this._defaultView,\n      document: _assertThisInitialized(_this),\n      actAsIfLocationReloadCalled: function actAsIfLocationReloadCalled() {\n        return _this._location.reload();\n      }\n    });\n\n    if (privateData.options.cookie) {\n      var cookies = Array.isArray(privateData.options.cookie) ? privateData.options.cookie : [privateData.options.cookie];\n\n      var document = _assertThisInitialized(_this);\n\n      cookies.forEach(function (cookieStr) {\n        document._cookieJar.setCookieSync(cookieStr, document.URL, {\n          ignoreError: true\n        });\n      });\n    }\n\n    _this._workingNodeIterators = [];\n    _this._workingNodeIteratorsMax = privateData.options.concurrentNodeIterators === undefined ? 10 : Number(privateData.options.concurrentNodeIterators);\n\n    if (isNaN(_this._workingNodeIteratorsMax)) {\n      throw new TypeError(\"The 'concurrentNodeIterators' option must be a Number\");\n    }\n\n    if (_this._workingNodeIteratorsMax < 0) {\n      throw new RangeError(\"The 'concurrentNodeIterators' option must be a non negative Number\");\n    }\n\n    _this._referrer = privateData.options.referrer || \"\";\n    _this._lastModified = toLastModifiedString(privateData.options.lastModified || new Date());\n    _this._queue = new ResourceQueue(privateData.options.deferClose);\n    _this._customResourceLoader = privateData.options.resourceLoader;\n    _this._pool = privateData.options.pool;\n    _this._agentOptions = privateData.options.agentOptions;\n    _this._strictSSL = privateData.options.strictSSL;\n    _this._proxy = privateData.options.proxy;\n    _this._requestManager = new RequestManager();\n    _this.readyState = \"loading\";\n    _this._lastFocusedElement = null; // Each Document in a browsing context can also have a latest entry. This is the entry for that Document\n    // to which the browsing context's session history was most recently traversed. When a Document is created,\n    // it initially has no latest entry.\n\n    _this._latestEntry = null;\n    return _this;\n  }\n\n  _createClass(DocumentImpl, [{\n    key: \"hasFocus\",\n    value: function hasFocus() {\n      return Boolean(this._lastFocusedElement);\n    }\n  }, {\n    key: \"_createElementWithCorrectElementInterface\",\n    value: function _createElementWithCorrectElementInterface(localName, namespace) {\n      // https://dom.spec.whatwg.org/#concept-element-interface\n      if (this._elementBuilders[namespace] && this._elementBuilders[namespace][localName]) {\n        return this._elementBuilders[namespace][localName](this, localName, namespace);\n      } else if (namespace === HTML_NS) {\n        return HTMLUnknownElement.createImpl([], {\n          ownerDocument: this,\n          localName: localName,\n          namespace: namespace\n        });\n      } else if (namespace === SVG_NS) {\n        return SVGElement.createImpl([], {\n          ownerDocument: this,\n          localName: localName,\n          namespace: namespace\n        });\n      }\n\n      return Element.createImpl([], {\n        ownerDocument: this,\n        localName: localName,\n        namespace: namespace\n      });\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(\n    /* Node */\n    arg) {\n      if (this.documentElement && arg.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        throw new DOMException(\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\");\n      }\n\n      return _get(_getPrototypeOf(DocumentImpl.prototype), \"appendChild\", this).call(this, arg);\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(\n    /* Node */\n    arg) {\n      var ret = _get(_getPrototypeOf(DocumentImpl.prototype), \"removeChild\", this).call(this, arg);\n\n      if (arg === this._documentElement) {\n        this._documentElement = null; // force a recalculation\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      if (child.tagName === \"STYLE\") {\n        var index = this.styleSheets.indexOf(child.sheet);\n\n        if (index > -1) {\n          this.styleSheets.splice(index, 1);\n        }\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write() {\n      var text = \"\";\n\n      for (var i = 0; i < arguments.length; ++i) {\n        text += String(arguments[i]);\n      }\n\n      if (this._parsingMode === \"xml\") {\n        throw new DOMException(\"Cannot use document.write on XML documents\", \"InvalidStateError\");\n      }\n\n      if (this._writeAfterElement) {\n        // If called from an script element directly (during the first tick),\n        // the new elements are inserted right after that element.\n        var tempDiv = this.createElement(\"div\");\n        tempDiv.innerHTML = text;\n        var child = tempDiv.firstChild;\n        var previous = this._writeAfterElement;\n        var parent = this._writeAfterElement.parentNode;\n\n        while (child) {\n          var node = child;\n          child = child.nextSibling;\n          node._isMovingDueToDocumentWrite = true; // hack for script execution\n\n          parent.insertBefore(node, previous.nextSibling);\n          node._isMovingDueToDocumentWrite = false;\n          previous = node;\n        }\n      } else if (this.readyState === \"loading\") {\n        // During page loading, document.write appends to the current element\n        // Find the last child that has been added to the document.\n        if (this.lastChild) {\n          var _node = this;\n\n          while (_node.lastChild && _node.lastChild.nodeType === NODE_TYPE.ELEMENT_NODE) {\n            _node = _node.lastChild;\n          }\n\n          _node.innerHTML = text;\n        } else {\n          clearChildNodes(this);\n\n          this._htmlToDom.appendToDocument(text, this);\n        }\n      } else if (text) {\n        clearChildNodes(this);\n\n        this._htmlToDom.appendToDocument(text, this);\n      }\n    }\n  }, {\n    key: \"writeln\",\n    value: function writeln() {\n      this.write.apply(this, Array.prototype.slice.call(arguments).concat([\"\\n\"]));\n    } // This is implemented separately for Document (which has a _ids cache) and DocumentFragment (which does not).\n\n  }, {\n    key: \"getElementById\",\n    value: function getElementById(id) {\n      // Return the first element with this ID.\n      return this._ids[id] && this._ids[id].length > 0 ? this._ids[id][0] : null;\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var child = domSymbolTree.firstChild(this);\n\n      while (child) {\n        this.removeChild(child);\n        child = domSymbolTree.firstChild(this);\n      }\n\n      this._documentElement = null;\n\n      this._modified();\n\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._queue.resume(); // Set the readyState to 'complete' once all resources are loaded.\n      // As a side-effect the document's load-event will be dispatched.\n\n\n      resourceLoader.enqueue(this, null, function () {\n        this.readyState = \"complete\";\n        var ev = this.createEvent(\"HTMLEvents\");\n        ev.initEvent(\"DOMContentLoaded\", false, false);\n        this.dispatchEvent(ev);\n      })(null, true);\n    }\n  }, {\n    key: \"getElementsByName\",\n    value: function getElementsByName(elementName) {\n      var _this2 = this;\n\n      return NodeList.createImpl([], {\n        element: this,\n        query: function query() {\n          return domSymbolTree.treeToArray(_this2, {\n            filter: function filter(node) {\n              return node.getAttribute && node.getAttribute(\"name\") === elementName;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_runPreRemovingSteps\",\n    value: function _runPreRemovingSteps(oldNode) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._workingNodeIterators[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var activeNodeIterator = _step2.value;\n\n          activeNodeIterator._preRemovingSteps(oldNode);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"createEvent\",\n    value: function createEvent(type) {\n      var typeLower = type.toLowerCase();\n      var eventWrapper = eventInterfaceTable[typeLower] || null;\n\n      if (!eventWrapper) {\n        throw new DOMException(\"The provided event type (\\\"\" + type + \"\\\") is invalid\", \"NotSupportedError\");\n      }\n\n      var impl = eventWrapper.createImpl([\"\"]);\n      impl._initializedFlag = false;\n      return impl;\n    }\n  }, {\n    key: \"createProcessingInstruction\",\n    value: function createProcessingInstruction(target, data) {\n      validateName(target);\n\n      if (data.includes(\"?>\")) {\n        throw new DOMException(\"Processing instruction data cannot contain the string \\\"?>\\\"\", \"InvalidCharacterError\");\n      }\n\n      return ProcessingInstruction.createImpl([], {\n        ownerDocument: this,\n        target: target,\n        data: data\n      });\n    } // https://dom.spec.whatwg.org/#dom-document-createcdatasection\n\n  }, {\n    key: \"createCDATASection\",\n    value: function createCDATASection(data) {\n      if (this._parsingMode === \"html\") {\n        throw new DOMException(\"Cannot create CDATA sections in HTML documents\", \"NotSupportedError\");\n      }\n\n      if (data.includes(\"]]>\")) {\n        throw new DOMException(\"CDATA section data cannot contain the string \\\"]]>\\\"\", \"InvalidCharacterError\");\n      }\n\n      return CDATASection.createImpl([], {\n        ownerDocument: this,\n        data: data\n      });\n    }\n  }, {\n    key: \"createTextNode\",\n    value: function createTextNode(data) {\n      return Text.createImpl([], {\n        ownerDocument: this,\n        data: data\n      });\n    }\n  }, {\n    key: \"createComment\",\n    value: function createComment(data) {\n      return Comment.createImpl([], {\n        ownerDocument: this,\n        data: data\n      });\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(localName) {\n      validateName(localName);\n\n      if (this._parsingMode === \"html\") {\n        localName = asciiLowercase(localName);\n      }\n\n      var namespace = this._parsingMode === \"html\" || this.contentType === \"application/xhtml+xml\" ? HTML_NS : null;\n      return this._createElementWithCorrectElementInterface(localName, namespace);\n    }\n  }, {\n    key: \"createElementNS\",\n    value: function createElementNS(namespace, qualifiedName) {\n      namespace = namespace !== null ? String(namespace) : namespace;\n      var extracted = validateAndExtract(namespace, qualifiedName);\n\n      var element = this._createElementWithCorrectElementInterface(extracted.localName, extracted.namespace);\n\n      element._prefix = extracted.prefix;\n      return element;\n    }\n  }, {\n    key: \"createDocumentFragment\",\n    value: function createDocumentFragment() {\n      return DocumentFragment.createImpl([], {\n        ownerDocument: this\n      });\n    }\n  }, {\n    key: \"createAttribute\",\n    value: function createAttribute(localName) {\n      validateName(localName);\n\n      if (this._parsingMode === \"html\") {\n        localName = asciiLowercase(localName);\n      }\n\n      return generatedAttr.createImpl([], {\n        localName: localName\n      });\n    }\n  }, {\n    key: \"createAttributeNS\",\n    value: function createAttributeNS(namespace, name) {\n      if (namespace === undefined) {\n        namespace = null;\n      }\n\n      namespace = namespace !== null ? String(namespace) : namespace;\n      var extracted = validateAndExtract(namespace, name);\n      return generatedAttr.createImpl([], {\n        namespace: extracted.namespace,\n        namespacePrefix: extracted.prefix,\n        localName: extracted.localName\n      });\n    } // TODO: Add callback interface support to `webidl2js`\n\n  }, {\n    key: \"createTreeWalker\",\n    value: function createTreeWalker(root, whatToShow, filter) {\n      return TreeWalker.createImpl([], {\n        root: root,\n        whatToShow: whatToShow,\n        filter: filter\n      });\n    }\n  }, {\n    key: \"createNodeIterator\",\n    value: function createNodeIterator(root, whatToShow, filter) {\n      var nodeIterator = NodeIterator.createImpl([], {\n        root: root,\n        whatToShow: whatToShow,\n        filter: filter\n      });\n\n      this._workingNodeIterators.push(nodeIterator);\n\n      while (this._workingNodeIterators.length > this._workingNodeIteratorsMax) {\n        var toInactivate = this._workingNodeIterators.shift();\n\n        toInactivate._working = false;\n      }\n\n      return nodeIterator;\n    }\n  }, {\n    key: \"importNode\",\n    value: function importNode(node, deep) {\n      if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n        throw new DOMException(\"Cannot import a document node\", \"NotSupportedError\");\n      }\n\n      return clone(node, this, deep);\n    }\n  }, {\n    key: \"adoptNode\",\n    value: function adoptNode(node) {\n      if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n        throw new DOMException(\"Cannot adopt a document node\", \"NotSupportedError\");\n      } // TODO: Determine correct way to detect a shadow root\n      // See also https://github.com/w3c/webcomponents/issues/182\n\n\n      if (node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n\n      node._ownerDocument = this;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = domSymbolTree.treeIterator(node)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var descendant = _step3.value;\n          descendant._ownerDocument = this;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return node;\n    }\n  }, {\n    key: \"clear\",\n    // The clear(), captureEvents(), and releaseEvents() methods must do nothing\n    value: function clear() {}\n  }, {\n    key: \"captureEvents\",\n    value: function captureEvents() {}\n  }, {\n    key: \"releaseEvents\",\n    value: function releaseEvents() {}\n  }, {\n    key: \"compatMode\",\n    get: function get() {\n      return this._parsingMode === \"xml\" || this.doctype ? \"CSS1Compat\" : \"BackCompat\";\n    }\n  }, {\n    key: \"charset\",\n    get: function get() {\n      return this._encoding;\n    }\n  }, {\n    key: \"characterSet\",\n    get: function get() {\n      return this._encoding;\n    }\n  }, {\n    key: \"inputEncoding\",\n    get: function get() {\n      return this._encoding;\n    }\n  }, {\n    key: \"doctype\",\n    get: function get() {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var childNode = _step4.value;\n\n          if (childNode.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {\n            return childNode;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"URL\",\n    get: function get() {\n      return whatwgURL.serializeURL(this._URL);\n    }\n  }, {\n    key: \"documentURI\",\n    get: function get() {\n      return whatwgURL.serializeURL(this._URL);\n    }\n  }, {\n    key: \"location\",\n    get: function get() {\n      return this._defaultView ? this._location : null;\n    }\n  }, {\n    key: \"documentElement\",\n    get: function get() {\n      if (this._documentElement) {\n        return this._documentElement;\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var childNode = _step5.value;\n\n          if (childNode.nodeType === NODE_TYPE.ELEMENT_NODE) {\n            this._documentElement = childNode;\n            return childNode;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"implementation\",\n    get: function get() {\n      return this._implementation;\n    },\n    set: function set(implementation) {\n      this._implementation = implementation;\n    }\n  }, {\n    key: \"defaultView\",\n    get: function get() {\n      return this._defaultView;\n    }\n  }, {\n    key: \"currentScript\",\n    get: function get() {\n      return this._currentScript;\n    }\n  }, {\n    key: \"activeElement\",\n    get: function get() {\n      if (this._lastFocusedElement) {\n        return this._lastFocusedElement;\n      }\n\n      return this.body;\n    }\n  }, {\n    key: \"referrer\",\n    get: function get() {\n      return this._referrer || \"\";\n    }\n  }, {\n    key: \"lastModified\",\n    get: function get() {\n      return this._lastModified;\n    }\n  }, {\n    key: \"images\",\n    get: function get() {\n      return this.getElementsByTagName(\"IMG\");\n    }\n  }, {\n    key: \"embeds\",\n    get: function get() {\n      return this.getElementsByTagName(\"EMBED\");\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this.embeds;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      var _this3 = this;\n\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return domSymbolTree.treeToArray(_this3, {\n            filter: function filter(node) {\n              return (node._localName === \"a\" || node._localName === \"area\") && node.hasAttribute(\"href\") && node._namespaceURI === HTML_NS;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"forms\",\n    get: function get() {\n      return this.getElementsByTagName(\"FORM\");\n    }\n  }, {\n    key: \"scripts\",\n    get: function get() {\n      return this.getElementsByTagName(\"SCRIPT\");\n    }\n  }, {\n    key: \"anchors\",\n    get: function get() {\n      var _this4 = this;\n\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return domSymbolTree.treeToArray(_this4, {\n            filter: function filter(node) {\n              return node._localName === \"a\" && node.hasAttribute(\"name\") && node._namespaceURI === HTML_NS;\n            }\n          });\n        }\n      });\n    } // The applets attribute must return an\n    // HTMLCollection rooted at the Document node,\n    // whose filter matches nothing.\n    // (It exists for historical reasons.)\n\n  }, {\n    key: \"applets\",\n    get: function get() {\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return [];\n        }\n      });\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      // TODO SVG\n      var titleElement = firstDescendantWithHTMLLocalName(this, \"title\");\n      var value = titleElement !== null ? titleElement.textContent : \"\";\n      value = stripAndCollapseASCIIWhitespace(value);\n      return value;\n    },\n    set: function set(val) {\n      // TODO SVG\n      var titleElement = firstDescendantWithHTMLLocalName(this, \"title\");\n      var headElement = this.head;\n\n      if (titleElement === null && headElement === null) {\n        return;\n      }\n\n      var element;\n\n      if (titleElement !== null) {\n        element = titleElement;\n      } else {\n        element = this.createElement(\"title\");\n        headElement.appendChild(element);\n      }\n\n      element.textContent = val;\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this.documentElement ? this.documentElement.dir : \"\";\n    },\n    set: function set(value) {\n      if (this.documentElement) {\n        this.documentElement.dir = value;\n      }\n    }\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this.documentElement ? firstChildWithHTMLLocalName(this.documentElement, \"head\") : null;\n    }\n  }, {\n    key: \"body\",\n    get: function get() {\n      var documentElement = this.documentElement;\n\n      if (!documentElement || documentElement._localName !== \"html\" || documentElement._namespaceURI !== HTML_NS) {\n        return null;\n      }\n\n      return firstChildWithHTMLLocalNames(this.documentElement, new Set([\"body\", \"frameset\"]));\n    },\n    set: function set(value) {\n      if (value === null || value._namespaceURI !== HTML_NS || value._localName !== \"body\" && value._localName !== \"frameset\") {\n        throw new DOMException(\"Cannot set the body to null or a non-body/frameset element\", \"HierarchyRequestError\");\n      }\n\n      var bodyElement = this.body;\n\n      if (value === bodyElement) {\n        return;\n      }\n\n      if (bodyElement !== null) {\n        bodyElement.parentNode.replaceChild(value, bodyElement);\n        return;\n      }\n\n      var documentElement = this.documentElement;\n\n      if (documentElement === null) {\n        throw new DOMException(\"Cannot set the body when there is no document element\", \"HierarchyRequestError\");\n      }\n\n      documentElement.appendChild(value);\n    }\n  }, {\n    key: \"cookie\",\n    get: function get() {\n      return this._cookieJar.getCookieStringSync(this.URL, {\n        http: false\n      });\n    },\n    set: function set(cookieStr) {\n      cookieStr = String(cookieStr);\n\n      this._cookieJar.setCookieSync(cookieStr, this.URL, {\n        http: false,\n        ignoreError: true\n      });\n    }\n  }, {\n    key: \"styleSheets\",\n    get: function get() {\n      if (!this._styleSheets) {\n        this._styleSheets = new StyleSheetList();\n      } // TODO: each style and link element should register its sheet on creation\n      // and remove it on removal.\n\n\n      return this._styleSheets;\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      if (this._defaultView && this._defaultView._pretendToBeVisual) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"visibilityState\",\n    get: function get() {\n      if (this._defaultView && this._defaultView._pretendToBeVisual) {\n        return \"visible\";\n      }\n\n      return \"prerender\";\n    }\n  }]);\n\n  return DocumentImpl;\n}(NodeImpl);\n\neventAccessors.createEventAccessor(DocumentImpl.prototype, \"readystatechange\");\nmixin(DocumentImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(DocumentImpl.prototype, NonElementParentNodeImpl.prototype);\nmixin(DocumentImpl.prototype, ParentNodeImpl.prototype);\nDocumentImpl.prototype._elementBuilders = Object.create(null);\nDocumentImpl.prototype.getElementsByTagName = memoizeQuery(function (qualifiedName) {\n  return listOfElementsWithQualifiedName(qualifiedName, this);\n});\nDocumentImpl.prototype.getElementsByTagNameNS = memoizeQuery(function (namespace, localName) {\n  return listOfElementsWithNamespaceAndLocalName(namespace, localName, this);\n});\nDocumentImpl.prototype.getElementsByClassName = memoizeQuery(function getElementsByClassName(classNames) {\n  return listOfElementsWithClassNames(classNames, this);\n});\nmodule.exports = {\n  implementation: DocumentImpl\n};","map":null,"metadata":{},"sourceType":"script"}