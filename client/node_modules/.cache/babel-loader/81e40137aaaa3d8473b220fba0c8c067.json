{"ast":null,"code":"\"use strict\";\n\nvar cssom = require(\"cssom\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar resourceLoader = require(\"../../browser/resource-loader\"); // TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n// It (and the things it calls) is nowhere close right now.\n\n\nexports.fetchStylesheet = function (elementImpl, urlString) {\n  var parsedURL = whatwgURL.parseURL(urlString);\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\n}; // https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\n\n\nexports.removeStylesheet = function (sheet, elementImpl) {\n  var styleSheets = elementImpl._ownerDocument.styleSheets;\n  styleSheets.splice(styleSheets.indexOf(sheet, 1)); // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\n\n  elementImpl.sheet = null; // TODO: \"Set the CSS style sheetâ€™s parent CSS style sheet, owner node and owner CSS rule to null.\"\n  // Probably when we have a real CSSOM implementation.\n}; // https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\n// - Parsing failures are not handled gracefully like they should be\n// - The import rules stuff seems out of place, and probably should affect the load event...\n\n\nexports.createStylesheet = function (sheetText, elementImpl, baseURL) {\n  var sheet;\n\n  try {\n    sheet = cssom.parse(sheetText);\n  } catch (e) {\n    if (elementImpl._ownerDocument._defaultView) {\n      var error = new Error(\"Could not parse CSS stylesheet\");\n      error.detail = sheetText;\n      error.type = \"css parsing\";\n\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\n    }\n\n    return;\n  }\n\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\n  addStylesheet(sheet, elementImpl);\n}; // https://drafts.csswg.org/cssom/#add-a-css-style-sheet\n\n\nfunction addStylesheet(sheet, elementImpl) {\n  elementImpl._ownerDocument.styleSheets.push(sheet); // Set the association explicitly; in the spec it's implicit.\n\n\n  elementImpl.sheet = sheet; // TODO: title and disabled stuff\n}\n\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\n  var defaultEncoding = elementImpl._ownerDocument._encoding;\n\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttribute(\"charset\")) {\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttribute(\"charset\"));\n  }\n\n  resourceLoader.load(elementImpl, urlString, {\n    defaultEncoding: defaultEncoding\n  }, function (data) {\n    // TODO: MIME type checking?\n    if (elementImpl.sheet) {\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\n    }\n\n    exports.createStylesheet(data, elementImpl, parsedURL);\n  });\n} // TODO this is actually really messed up and overwrites the sheet on elementImpl\n// Tracking in https://github.com/tmpvar/jsdom/issues/2124\n\n\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\n  if (!cssRules) {\n    return;\n  }\n\n  for (var i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      var parsed = whatwgURL.parseURL(cssRules[i].href, {\n        baseURL: baseURL\n      });\n\n      if (parsed === null) {\n        var window = elementImpl._ownerDocument._defaultView;\n\n        if (window) {\n          var error = new Error(\"Could not parse CSS @import URL \".concat(cssRules[i].href, \" relative to base URL \") + \"\\\"\".concat(whatwgURL.serializeURL(baseURL), \"\\\"\"));\n          error.type = \"css @import URL parsing\";\n\n          window._virtualConsole.emit(\"jsdomError\", error);\n        }\n      } else {\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}