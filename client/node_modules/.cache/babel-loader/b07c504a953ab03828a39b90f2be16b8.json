{"ast":null,"code":"module.exports = function () {\n  function _waka(parser, startRule) {\n    if (startRule && !parser.rules[startRule]) throw new Error('start rule missing: ' + JSON.stringify(startRule));\n    return {\n      getState: function getState() {\n        return parser.state;\n      },\n      getTrace: function getTrace(message) {\n        return (message ? message + '\\n' : '') + parser.state.traceLine();\n      },\n      exec: function exec(input) {\n        if (!startRule) throw new Error('no start rule given');\n        parser.state.setInput(input);\n\n        try {\n          var value = parser.rules[startRule]();\n        } catch (err) {\n          var error = err;\n        }\n\n        if (error == null) {\n          if (!parser.state.adv || !parser.state.isEOF()) var error = new Error('Unexpected syntax in top');\n        }\n\n        return {\n          success: error == null,\n          value: !error ? value : undefined,\n          error: error\n        };\n      },\n      startWith: function startWith(rule) {\n        return _waka(parser, rule);\n      }\n    };\n  }\n\n  ;\n  return _waka(function () {\n    'use strict';\n\n    var _rules = {};\n\n    _rules.NameStartChar = function () {\n      var _R = _P.match(\":\");\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $0 = _P.cur();\n\n        if ($0 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"A\" <= $0 && $0 <= \"Z\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\"_\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $1 = _P.cur();\n\n        if ($1 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"a\" <= $1 && $1 <= \"z\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $2 = _P.cur();\n\n        if ($2 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\xC0\" <= $2 && $2 <= \"\\xD6\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $3 = _P.cur();\n\n        if ($3 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\xD8\" <= $3 && $3 <= \"\\xF6\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $4 = _P.cur();\n\n        if ($4 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\xF8\" <= $4 && $4 <= \"\\u02FF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $5 = _P.cur();\n\n        if ($5 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u0370\" <= $5 && $5 <= \"\\u037D\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $6 = _P.cur();\n\n        if ($6 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u037F\" <= $6 && $6 <= \"\\u1FFF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $7 = _P.cur();\n\n        if ($7 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u200C\" <= $7 && $7 <= \"\\u200D\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $8 = _P.cur();\n\n        if ($8 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u2070\" <= $8 && $8 <= \"\\u218F\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $9 = _P.cur();\n\n        if ($9 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u2C00\" <= $9 && $9 <= \"\\u2FEF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $a = _P.cur();\n\n        if ($a == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u3001\" <= $a && $a <= \"\\uD7FF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $b = _P.cur();\n\n        if ($b == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\uF900\" <= $b && $b <= \"\\uFDCF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $c = _P.cur();\n\n        if ($c == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\uFDF0\" <= $c && $c <= \"\\uFFFD\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        $d: {\n          var $e = _P.pos;\n\n          var $f = _P.cur();\n\n          if ($f == null) {\n            _P.adv = false;\n            null;\n          } else {\n            _P.step(\"\\uD800\" <= $f && $f <= \"\\uDB7F\");\n          }\n\n          if (!_P.adv) break $d;\n\n          var $g = _P.cur();\n\n          if ($g == null) {\n            _P.adv = false;\n            null;\n          } else {\n            _P.step(\"\\uDC00\" <= $g && $g <= \"\\uDFFF\");\n          }\n\n          var _R = _P.doc.substring($e, _P.pos);\n        }\n\n        if (!_P.adv) _P.pos = $e;\n      }\n\n      return _R;\n    };\n\n    _rules.NameChar = function () {\n      var _R = _rules.NameStartChar();\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\"-\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\".\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $0 = _P.cur();\n\n        if ($0 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"0\" <= $0 && $0 <= \"9\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\"\\xB7\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $1 = _P.cur();\n\n        if ($1 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u0300\" <= $1 && $1 <= \"\\u036F\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $2 = _P.cur();\n\n        if ($2 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u203F\" <= $2 && $2 <= \"\\u2040\");\n        }\n      }\n\n      return _R;\n    };\n\n    _rules.Name = function () {\n      $0: {\n        var $1 = _P.pos;\n\n        _rules.NameStartChar();\n\n        if (!_P.adv) break $0;\n        var $2 = false;\n\n        for (;;) {\n          _rules.NameChar();\n\n          if (!_P.adv) break;\n          $2 = true;\n        }\n\n        ;\n        _P.adv = true;\n\n        var _R = _P.doc.substring($1, _P.pos);\n      }\n\n      if (!_P.adv) _P.pos = $1;\n      return _R;\n    };\n\n    _rules.QName = function () {\n      var _R = _rules.PrefixedName();\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _rules.UnprefixedName();\n      }\n\n      return _R;\n    };\n\n    _rules.PrefixedName = function () {\n      $0: {\n        var $1 = _P.pos;\n\n        _rules.Prefix();\n\n        if (!_P.adv) break $0;\n\n        _P.match(\":\");\n\n        if (!_P.adv) break $0;\n\n        _rules.LocalPart();\n\n        var _R = _P.doc.substring($1, _P.pos);\n      }\n\n      if (!_P.adv) _P.pos = $1;\n      return _R;\n    };\n\n    _rules.UnprefixedName = function () {\n      var _R = _rules.LocalPart();\n\n      return _R;\n    };\n\n    _rules.Prefix = function () {\n      var _R = _rules.NCName();\n\n      return _R;\n    };\n\n    _rules.LocalPart = function () {\n      var _R = _rules.NCName();\n\n      return _R;\n    };\n\n    _rules.NCNameStartChar = function () {\n      var $0 = _P.cur();\n\n      if ($0 == null) {\n        _P.adv = false;\n        var _R = null;\n      } else {\n        var _R = _P.step(\"A\" <= $0 && $0 <= \"Z\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\"_\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $1 = _P.cur();\n\n        if ($1 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"a\" <= $1 && $1 <= \"z\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $2 = _P.cur();\n\n        if ($2 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\xC0\" <= $2 && $2 <= \"\\xD6\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $3 = _P.cur();\n\n        if ($3 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\xD8\" <= $3 && $3 <= \"\\xF6\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $4 = _P.cur();\n\n        if ($4 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\xF8\" <= $4 && $4 <= \"\\u02FF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $5 = _P.cur();\n\n        if ($5 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u0370\" <= $5 && $5 <= \"\\u037D\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $6 = _P.cur();\n\n        if ($6 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u037F\" <= $6 && $6 <= \"\\u1FFF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $7 = _P.cur();\n\n        if ($7 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u200C\" <= $7 && $7 <= \"\\u200D\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $8 = _P.cur();\n\n        if ($8 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u2070\" <= $8 && $8 <= \"\\u218F\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $9 = _P.cur();\n\n        if ($9 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u2C00\" <= $9 && $9 <= \"\\u2FEF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $a = _P.cur();\n\n        if ($a == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u3001\" <= $a && $a <= \"\\uD7FF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $b = _P.cur();\n\n        if ($b == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\uF900\" <= $b && $b <= \"\\uFDCF\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $c = _P.cur();\n\n        if ($c == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\uFDF0\" <= $c && $c <= \"\\uFFFD\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        $d: {\n          var $e = _P.pos;\n\n          var $f = _P.cur();\n\n          if ($f == null) {\n            _P.adv = false;\n            null;\n          } else {\n            _P.step(\"\\uD800\" <= $f && $f <= \"\\uDB7F\");\n          }\n\n          if (!_P.adv) break $d;\n\n          var $g = _P.cur();\n\n          if ($g == null) {\n            _P.adv = false;\n            null;\n          } else {\n            _P.step(\"\\uDC00\" <= $g && $g <= \"\\uDFFF\");\n          }\n\n          var _R = _P.doc.substring($e, _P.pos);\n        }\n\n        if (!_P.adv) _P.pos = $e;\n      }\n\n      return _R;\n    };\n\n    _rules.NCNameChar = function () {\n      var _R = _rules.NCNameStartChar();\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\"-\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\".\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $0 = _P.cur();\n\n        if ($0 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"0\" <= $0 && $0 <= \"9\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var _R = _P.match(\"\\xB7\");\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $1 = _P.cur();\n\n        if ($1 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u0300\" <= $1 && $1 <= \"\\u036F\");\n        }\n      }\n\n      if (!_P.adv) {\n        _P.adv = true;\n\n        var $2 = _P.cur();\n\n        if ($2 == null) {\n          _P.adv = false;\n          var _R = null;\n        } else {\n          var _R = _P.step(\"\\u203F\" <= $2 && $2 <= \"\\u2040\");\n        }\n      }\n\n      return _R;\n    };\n\n    _rules.NCName = function () {\n      $0: {\n        var $1 = _P.pos;\n\n        _rules.NCNameStartChar();\n\n        if (!_P.adv) break $0;\n        var $2 = false;\n\n        for (;;) {\n          _rules.NCNameChar();\n\n          if (!_P.adv) break;\n          $2 = true;\n        }\n\n        ;\n        _P.adv = true;\n\n        var _R = _P.doc.substring($1, _P.pos);\n      }\n\n      if (!_P.adv) _P.pos = $1;\n      return _R;\n    };\n\n    function ParserState() {\n      this.doc = '';\n      this.pos = 0;\n      this.adv = true;\n\n      this.setInput = function (doc) {\n        this.doc = doc;\n        this.pos = 0;\n        this.adv = true;\n      };\n\n      this.isEOF = function () {\n        return this.pos == this.doc.length;\n      };\n\n      this.cur = function () {\n        return _P.doc[_P.pos];\n      };\n\n      this.match = function (str) {\n        if (_P.adv = _P.doc.substr(_P.pos, str.length) == str) {\n          _P.pos += str.length;\n          return str;\n        }\n      };\n\n      this.step = function (flag) {\n        if (_P.adv = flag) {\n          _P.pos++;\n          return _P.doc[_P.pos - 1];\n        }\n      };\n\n      this.unexpected = function (rule) {\n        throw new Error('Unexpected syntax in ' + rule);\n      };\n\n      this.traceLine = function (pos) {\n        if (!pos) pos = _P.pos;\n\n        var from = _P.doc.lastIndexOf('\\n', pos),\n            to = _P.doc.indexOf('\\n', pos);\n\n        if (from == -1) from = 0;else from++;\n        if (to == -1) to = pos.length;\n\n        var lineNo = _P.doc.substring(0, from).split('\\n').length;\n\n        var line = _P.doc.substring(from, to);\n\n        var pointer = Array(200).join(' ').substr(0, pos - from) + '^^^';\n        return 'Line ' + lineNo + ':\\n' + line + '\\n' + pointer;\n      };\n    }\n\n    var _P = new ParserState();\n\n    return {\n      state: _P,\n      rules: _rules\n    };\n  }(), null);\n}();","map":null,"metadata":{},"sourceType":"script"}