{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar DOMException = require(\"domexception\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    firstChildWithHTMLLocalName = _require3.firstChildWithHTMLLocalName,\n    childrenByHTMLLocalName = _require3.childrenByHTMLLocalName;\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nfunction tHeadInsertionPoint(table) {\n  var iterator = domSymbolTree.childrenIterator(table);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterator[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var child = _step.value;\n\n      if (child.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n        continue;\n      }\n\n      if (child._namespaceURI !== HTML_NS || child._localName !== \"caption\" && child._localName !== \"colgroup\") {\n        return child;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nvar HTMLTableElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLTableElementImpl, _HTMLElementImpl);\n\n  function HTMLTableElementImpl() {\n    _classCallCheck(this, HTMLTableElementImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLTableElementImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLTableElementImpl, [{\n    key: \"createTBody\",\n    value: function createTBody() {\n      var el = this._ownerDocument.createElement(\"TBODY\");\n\n      var tbodies = childrenByHTMLLocalName(this, \"tbody\");\n      var insertionPoint = tbodies[tbodies.length - 1];\n\n      if (insertionPoint) {\n        this.insertBefore(el, insertionPoint.nextSibling);\n      } else {\n        this.appendChild(el);\n      }\n\n      return el;\n    }\n  }, {\n    key: \"createTHead\",\n    value: function createTHead() {\n      var el = this.tHead;\n\n      if (!el) {\n        el = this.tHead = this._ownerDocument.createElement(\"THEAD\");\n      }\n\n      return el;\n    }\n  }, {\n    key: \"deleteTHead\",\n    value: function deleteTHead() {\n      this.tHead = null;\n    }\n  }, {\n    key: \"createTFoot\",\n    value: function createTFoot() {\n      var el = this.tFoot;\n\n      if (!el) {\n        el = this.tFoot = this._ownerDocument.createElement(\"TFOOT\");\n      }\n\n      return el;\n    }\n  }, {\n    key: \"deleteTFoot\",\n    value: function deleteTFoot() {\n      this.tFoot = null;\n    }\n  }, {\n    key: \"createCaption\",\n    value: function createCaption() {\n      var el = this.caption;\n\n      if (!el) {\n        el = this.caption = this._ownerDocument.createElement(\"CAPTION\");\n      }\n\n      return el;\n    }\n  }, {\n    key: \"deleteCaption\",\n    value: function deleteCaption() {\n      var c = this.caption;\n\n      if (c) {\n        c.parentNode.removeChild(c);\n      }\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow(index) {\n      if (index < -1 || index > this.rows.length) {\n        throw new DOMException(\"Cannot insert a row at an index that is less than -1 or greater than the number of \" + \"existing rows\", \"IndexSizeError\");\n      }\n\n      var tr = this._ownerDocument.createElement(\"tr\");\n\n      if (this.rows.length === 0 && this.tBodies.length === 0) {\n        var tBody = this._ownerDocument.createElement(\"tbody\");\n\n        tBody.appendChild(tr);\n        this.appendChild(tBody);\n      } else if (this.rows.length === 0) {\n        var _tBody = this.tBodies.item(this.tBodies.length - 1);\n\n        _tBody.appendChild(tr);\n      } else if (index === -1 || index === this.rows.length) {\n        var tSection = this.rows.item(this.rows.length - 1).parentNode;\n        tSection.appendChild(tr);\n      } else {\n        var beforeTR = this.rows.item(index);\n        var _tSection = beforeTR.parentNode;\n\n        _tSection.insertBefore(tr, beforeTR);\n      }\n\n      return tr;\n    }\n  }, {\n    key: \"deleteRow\",\n    value: function deleteRow(index) {\n      var rowLength = this.rows.length;\n\n      if (index < -1 || index >= rowLength) {\n        throw new DOMException(\"Cannot delete a row at index \".concat(index, \", where no row exists\"), \"IndexSizeError\");\n      }\n\n      if (index === -1) {\n        if (rowLength === 0) {\n          return;\n        }\n\n        index = rowLength - 1;\n      }\n\n      var tr = this.rows.item(index);\n      tr.parentNode.removeChild(tr);\n    }\n  }, {\n    key: \"caption\",\n    get: function get() {\n      return firstChildWithHTMLLocalName(this, \"caption\");\n    },\n    set: function set(value) {\n      var currentCaption = this.caption;\n\n      if (currentCaption !== null) {\n        this.removeChild(currentCaption);\n      }\n\n      if (value !== null) {\n        var insertionPoint = this.firstChild;\n        this.insertBefore(value, insertionPoint);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"tHead\",\n    get: function get() {\n      return firstChildWithHTMLLocalName(this, \"thead\");\n    },\n    set: function set(value) {\n      if (value !== null && value._localName !== \"thead\") {\n        throw new DOMException(\"Cannot set a non-thead element as a table header\", \"HierarchyRequestError\");\n      }\n\n      var currentHead = this.tHead;\n\n      if (currentHead !== null) {\n        this.removeChild(currentHead);\n      }\n\n      if (value !== null) {\n        var insertionPoint = tHeadInsertionPoint(this);\n        this.insertBefore(value, insertionPoint);\n      }\n    }\n  }, {\n    key: \"tFoot\",\n    get: function get() {\n      return firstChildWithHTMLLocalName(this, \"tfoot\");\n    },\n    set: function set(value) {\n      if (value !== null && value._localName !== \"tfoot\") {\n        throw new DOMException(\"Cannot set a non-tfoot element as a table footer\", \"HierarchyRequestError\");\n      }\n\n      var currentFoot = this.tFoot;\n\n      if (currentFoot !== null) {\n        this.removeChild(currentFoot);\n      }\n\n      if (value !== null) {\n        this.appendChild(value);\n      }\n    }\n  }, {\n    key: \"rows\",\n    get: function get() {\n      var _this = this;\n\n      if (!this._rows) {\n        this._rows = HTMLCollection.createImpl([], {\n          element: this,\n          query: function query() {\n            var headerRows = [];\n            var bodyRows = [];\n            var footerRows = [];\n            var iterator = domSymbolTree.childrenIterator(_this);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = iterator[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var child = _step2.value;\n\n                if (child.nodeType !== NODE_TYPE.ELEMENT_NODE || child._namespaceURI !== HTML_NS) {\n                  continue;\n                }\n\n                if (child._localName === \"thead\") {\n                  headerRows.push.apply(headerRows, _toConsumableArray(childrenByHTMLLocalName(child, \"tr\")));\n                } else if (child._localName === \"tbody\") {\n                  bodyRows.push.apply(bodyRows, _toConsumableArray(childrenByHTMLLocalName(child, \"tr\")));\n                } else if (child._localName === \"tfoot\") {\n                  footerRows.push.apply(footerRows, _toConsumableArray(childrenByHTMLLocalName(child, \"tr\")));\n                } else if (child._localName === \"tr\") {\n                  bodyRows.push(child);\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            return [].concat(headerRows, bodyRows, footerRows);\n          }\n        });\n      }\n\n      return this._rows;\n    }\n  }, {\n    key: \"tBodies\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._tBodies) {\n        this._tBodies = HTMLCollection.createImpl([], {\n          element: this,\n          query: function query() {\n            return childrenByHTMLLocalName(_this2, \"tbody\");\n          }\n        });\n      }\n\n      return this._tBodies;\n    }\n  }]);\n\n  return HTMLTableElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLTableElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}