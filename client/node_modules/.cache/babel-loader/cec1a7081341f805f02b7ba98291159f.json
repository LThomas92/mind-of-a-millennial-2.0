{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar vm = require(\"vm\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../../utils\"),\n    reflectURLAttribute = _require.reflectURLAttribute;\n\nvar resourceLoader = require(\"../../browser/resource-loader\");\n\nvar reportException = require(\"../helpers/runtime-script-errors\");\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/strings\"),\n    asciiLowercase = _require3.asciiLowercase;\n\nvar _require4 = require(\"../helpers/text\"),\n    childTextContent = _require4.childTextContent;\n\nvar nodeTypes = require(\"../node-type\");\n\nvar jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\n\nvar HTMLScriptElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLScriptElementImpl, _HTMLElementImpl);\n\n  function HTMLScriptElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLScriptElementImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLScriptElementImpl).call(this, args, privateData));\n    _this._alreadyStarted = false;\n    _this._parserInserted = false; // set by the parser\n\n    return _this;\n  }\n\n  _createClass(HTMLScriptElementImpl, [{\n    key: \"_attach\",\n    value: function _attach() {\n      _get(_getPrototypeOf(HTMLScriptElementImpl.prototype), \"_attach\", this).call(this); // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n      // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n      // then. Instead, we'll let it eval here.\n\n\n      if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n        this._eval();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      _get(_getPrototypeOf(HTMLScriptElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n\n      if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n        resourceLoader.load(this, this.src, {\n          defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n        }, this._innerEval);\n      }\n    }\n  }, {\n    key: \"_poppedOffStackOfOpenElements\",\n    value: function _poppedOffStackOfOpenElements() {\n      // This seems to roughly correspond to\n      // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n      // don't implement the full semantics.\n      this._eval();\n    } // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n    // to go before it's aligned.\n\n  }, {\n    key: \"_eval\",\n    value: function _eval() {\n      if (this._alreadyStarted) {\n        return;\n      } // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n      // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n\n\n      if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n        return;\n      }\n\n      if (!this._attached) {\n        return;\n      }\n\n      var scriptBlocksTypeString = this._getTypeString();\n\n      var type = getType(scriptBlocksTypeString);\n\n      if (type !== \"classic\") {\n        // TODO: implement modules, and then change the check to `type === null`.\n        return;\n      }\n\n      this._alreadyStarted = true; // Equivalent to the spec's \"scripting is disabled\" check.\n\n      if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n        return;\n      } // TODO: implement nomodule here, **but only after we support modules**.\n      // At this point we completely depart from the spec.\n\n\n      if (this.hasAttribute(\"src\")) {\n        resourceLoader.load(this, this.src, {\n          defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n        }, this._innerEval);\n      } else {\n        resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n      }\n    }\n  }, {\n    key: \"_innerEval\",\n    value: function _innerEval(text, filename) {\n      this._ownerDocument._writeAfterElement = this;\n      processJavaScript(this, text, filename);\n      delete this._ownerDocument._writeAfterElement;\n    }\n  }, {\n    key: \"_getTypeString\",\n    value: function _getTypeString() {\n      var typeAttr = this.getAttribute(\"type\");\n      var langAttr = this.getAttribute(\"language\");\n\n      if (typeAttr === \"\") {\n        return \"text/javascript\";\n      }\n\n      if (typeAttr === null && langAttr === \"\") {\n        return \"text/javascript\";\n      }\n\n      if (typeAttr === null && langAttr === null) {\n        return \"text/javascript\";\n      }\n\n      if (typeAttr !== null) {\n        return typeAttr.trim();\n      }\n\n      if (langAttr !== null) {\n        return \"text/\" + langAttr;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return childTextContent(this);\n    },\n    set: function set(text) {\n      this.textContent = text;\n    }\n  }, {\n    key: \"src\",\n    get: function get() {\n      return reflectURLAttribute(this, \"src\");\n    },\n    set: function set(V) {\n      this.setAttribute(\"src\", V);\n    }\n  }]);\n\n  return HTMLScriptElementImpl;\n}(HTMLElementImpl);\n\nfunction processJavaScript(element, code, filename) {\n  var document = element.ownerDocument;\n  var window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n    var lineOffset = 0;\n\n    if (!element.src) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = domSymbolTree.childrenIterator(element)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n\n          if (child.nodeType === nodeTypes.TEXT_NODE) {\n            if (child.__location) {\n              lineOffset = child.__location.line - 1;\n            }\n\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, {\n        filename: filename,\n        lineOffset: lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  var lowercased = asciiLowercase(typeString); // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}