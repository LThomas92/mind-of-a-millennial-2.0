{"ast":null,"code":"import AxiosAPI from \"../components/AxiosAPI\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  AxiosAPI.post(\"/api/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  AxiosAPI.post(\"/api/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/Lawrence/Desktop/mind-of-a-millennial/client/src/actions/authActions.js"],"names":["AxiosAPI","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DR,EAAAA,QAAQ,CAACS,IAAT,CAAc,eAAd,EAA+BH,QAA/B,EACGI,IADH,CACQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CADf,EAEGC,KAFH,CAESC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAHZ;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC/CR,EAAAA,QAAQ,CAACS,IAAT,CAAc,YAAd,EAA4BH,QAA5B,EACGI,IADH,CACQC,GAAG,IAAI;AACX;AAEA;AAHW,UAIHS,KAJG,GAIOT,GAAG,CAACO,IAJX,CAIHE,KAJG;AAKXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALW,CAMX;;AACAnB,IAAAA,YAAY,CAACmB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CATW,CAUX;;AACAZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGV,KAdH,CAcSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAfZ;AAoBD,CArBM,C,CAuBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEX,gBADD;AAELY,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAG,MAAMjB,QAAQ,IAAI;AAC1C;AACAa,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAzB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAO,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import AxiosAPI from \"../components/AxiosAPI\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  AxiosAPI.post(\"/api/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  AxiosAPI.post(\"/api/login\", userData)\n    .then(res => {\n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}