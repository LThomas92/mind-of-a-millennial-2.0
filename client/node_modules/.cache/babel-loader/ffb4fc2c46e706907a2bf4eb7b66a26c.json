{"ast":null,"code":"\"use strict\";\n\nvar vm = require(\"vm\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar ErrorEvent = require(\"../generated/ErrorEvent\");\n\nvar reportException = require(\"./runtime-script-errors\");\n\nexports.appendHandler = function appendHandler(el, eventName) {\n  el.addEventListener(eventName, function (event) {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    event = idlUtils.implForWrapper(event);\n    var callback = el[\"on\" + eventName];\n\n    if (callback === null) {\n      return;\n    }\n\n    var specialError = ErrorEvent.isImpl(event) && event.type === \"error\" && event.currentTarget.constructor.name === \"Window\";\n    var returnValue = null;\n    var thisValue = idlUtils.tryWrapperForImpl(event.currentTarget); // https://heycam.github.io/webidl/#es-invoking-callback-functions\n\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(thisValue, event.message, event.filename, event.lineno, event.colno, event.error);\n      } else {\n        var eventWrapper = idlUtils.wrapperForImpl(event);\n        returnValue = callback.call(thisValue, eventWrapper);\n      }\n    }\n\n    if (event.type === \"beforeunload\") {\n      // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\n\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n}; // \"Simple\" in this case means \"no content attributes involved\"\n\n\nexports.setupForSimpleEventAccessors = function (prototype, events) {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n\n      exports.appendHandler(this, event);\n    }\n\n    this._eventHandlers[event] = handler;\n  };\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var event = _step.value;\n      exports.createEventAccessor(prototype, event);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}; // https://html.spec.whatwg.org/#event-handler-idl-attributes\n\n\nexports.createEventAccessor = function createEventAccessor(obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get: function get() {\n      // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\n      var value = this._getEventHandlerFor(event);\n\n      if (!value) {\n        return null;\n      }\n\n      if (value.body !== undefined) {\n        var element;\n        var document;\n\n        if (this.constructor.name === \"Window\") {\n          element = null;\n          document = idlUtils.implForWrapper(this.document);\n        } else {\n          element = this;\n          document = element.ownerDocument;\n        }\n\n        var body = value.body;\n        var formOwner = element !== null && element.form ? element.form : null;\n        var window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\n\n        try {\n          // eslint-disable-next-line no-new-func\n          Function(body); // properly error out on syntax errors\n          // Note: this won't execute body; that would require `Function(body)()`.\n        } catch (e) {\n          if (window) {\n            reportException(window, e);\n          }\n\n          this._setEventHandlerFor(event, null);\n\n          return null;\n        } // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n\n        var fn;\n        var createFunction = vm.isContext(document._global) ? document.defaultView._globalProxy.Function : Function;\n\n        if (event === \"error\" && element === null) {\n          var wrapperBody = document ? body + \"\\n//# sourceURL=\".concat(document.URL) : body; // eslint-disable-next-line no-new-func\n\n          fn = createFunction(\"window\", \"with (window) { return function onerror(event, source, lineno, colno, error) {\\n  \".concat(wrapperBody, \"\\n}; }\"))(window);\n        } else {\n          var argNames = [];\n          var args = [];\n          argNames.push(\"window\");\n          args.push(window);\n\n          if (element !== null) {\n            argNames.push(\"document\");\n            args.push(idlUtils.wrapperForImpl(document));\n          }\n\n          if (formOwner !== null) {\n            argNames.push(\"formOwner\");\n            args.push(idlUtils.wrapperForImpl(formOwner));\n          }\n\n          if (element !== null) {\n            argNames.push(\"element\");\n            args.push(idlUtils.wrapperForImpl(element));\n          }\n\n          var _wrapperBody = \"\\nreturn function on\".concat(event, \"(event) {\\n  \").concat(body, \"\\n};\");\n\n          for (var i = argNames.length - 1; i >= 0; --i) {\n            _wrapperBody = \"with (\".concat(argNames[i], \") { \").concat(_wrapperBody, \" }\");\n          }\n\n          if (document) {\n            _wrapperBody += \"\\n//# sourceURL=\".concat(document.URL);\n          }\n\n          argNames.push(_wrapperBody);\n          fn = createFunction.apply(void 0, argNames).apply(void 0, args);\n        }\n\n        this._setEventHandlerFor(event, fn);\n      }\n\n      return this._getEventHandlerFor(event);\n    },\n    set: function set(val) {\n      val = eventHandlerArgCoercion(val);\n\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};\n\nfunction typeIsObject(v) {\n  return typeof v === \"object\" && v !== null || typeof v === \"function\";\n} // Implements:\n//     [TreatNonObjectAsNull]\n//     callback EventHandlerNonNull = any (Event event);\n//     typedef EventHandlerNonNull? EventHandler;\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\n// non-callable callback functions as callback functions that return undefined.\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\n\n\nfunction eventHandlerArgCoercion(val) {\n  if (!typeIsObject(val)) {\n    return null;\n  }\n\n  return val;\n}","map":null,"metadata":{},"sourceType":"script"}