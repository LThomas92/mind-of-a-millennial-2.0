{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar NodeImpl = require(\"./Node-impl\").implementation;\n\nvar ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\n\nvar NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nvar DOMException = require(\"domexception\");\n\nvar _require2 = require(\"../node-type\"),\n    TEXT_NODE = _require2.TEXT_NODE;\n\nvar CharacterDataImpl =\n/*#__PURE__*/\nfunction (_NodeImpl) {\n  _inherits(CharacterDataImpl, _NodeImpl);\n\n  function CharacterDataImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, CharacterDataImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CharacterDataImpl).call(this, args, privateData));\n    _this._data = privateData.data;\n    return _this;\n  }\n\n  _createClass(CharacterDataImpl, [{\n    key: \"substringData\",\n    value: function substringData(offset, count) {\n      var length = this.length;\n\n      if (offset > length) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      if (offset + count > length) {\n        return this._data.substring(offset);\n      }\n\n      return this._data.substring(offset, offset + count);\n    }\n  }, {\n    key: \"appendData\",\n    value: function appendData(data) {\n      this.replaceData(this.length, 0, data);\n    }\n  }, {\n    key: \"insertData\",\n    value: function insertData(offset, data) {\n      this.replaceData(offset, 0, data);\n    }\n  }, {\n    key: \"deleteData\",\n    value: function deleteData(offset, count) {\n      this.replaceData(offset, count, \"\");\n    }\n  }, {\n    key: \"replaceData\",\n    value: function replaceData(offset, count, data) {\n      var length = this.length;\n\n      if (offset > length) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      if (offset + count > length) {\n        count = length - offset;\n      }\n\n      var start = this._data.substring(0, offset);\n\n      var end = this._data.substring(offset + count);\n\n      this._data = start + data + end; // TODO: range stuff\n\n      if (this.nodeType === TEXT_NODE && this.parentNode) {\n        this.parentNode._childTextContentChangeSteps();\n      }\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(data) {\n      this.replaceData(0, this.length, data);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._data.length;\n    }\n  }]);\n\n  return CharacterDataImpl;\n}(NodeImpl);\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\nmodule.exports = {\n  implementation: CharacterDataImpl\n};","map":null,"metadata":{},"sourceType":"script"}