{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function SymbolTreeNode() {\n    _classCallCheck(this, SymbolTreeNode);\n\n    this.parent = null;\n    this.previousSibling = null;\n    this.nextSibling = null;\n    this.firstChild = null;\n    this.lastChild = null;\n    /** This value is incremented anytime a children is added or removed */\n\n    this.childrenVersion = 0;\n    /** The last child object which has a cached index */\n\n    this.childIndexCachedUpTo = null;\n    /** This value represents the cached node index, as long as\n     * cachedIndexVersion matches with the childrenVersion of the parent */\n\n    this.cachedIndex = -1;\n    this.cachedIndexVersion = NaN; // NaN is never equal to anything\n  }\n\n  _createClass(SymbolTreeNode, [{\n    key: \"childrenChanged\",\n    value: function childrenChanged() {\n      /* jshint -W016 */\n      // integer wrap around\n      this.childrenVersion = this.childrenVersion + 1 & 0xFFFFFFFF;\n      this.childIndexCachedUpTo = null;\n    }\n  }, {\n    key: \"getCachedIndex\",\n    value: function getCachedIndex(parentNode) {\n      // (assumes parentNode is actually the parent)\n      if (this.cachedIndexVersion !== parentNode.childrenVersion) {\n        this.cachedIndexVersion = NaN; // cachedIndex is no longer valid\n\n        return -1;\n      }\n\n      return this.cachedIndex; // -1 if not cached\n    }\n  }, {\n    key: \"setCachedIndex\",\n    value: function setCachedIndex(parentNode, index) {\n      // (assumes parentNode is actually the parent)\n      this.cachedIndexVersion = parentNode.childrenVersion;\n      this.cachedIndex = index;\n    }\n  }, {\n    key: \"isAttached\",\n    get: function get() {\n      return Boolean(this.parent || this.previousSibling || this.nextSibling);\n    }\n  }, {\n    key: \"hasChildren\",\n    get: function get() {\n      return Boolean(this.firstChild);\n    }\n  }]);\n\n  return SymbolTreeNode;\n}();","map":null,"metadata":{},"sourceType":"script"}