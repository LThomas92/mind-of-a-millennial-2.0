{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Document = require(\"../generated/Document\");\n\nvar _require = require(\"../../browser/documentfeatures\"),\n    applyDocumentFeatures = _require.applyDocumentFeatures;\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function DOMParserImpl() {\n    _classCallCheck(this, DOMParserImpl);\n  }\n\n  _createClass(DOMParserImpl, [{\n    key: \"parseFromString\",\n    value: function parseFromString(string, contentType) {\n      switch (String(contentType)) {\n        case \"text/html\":\n          {\n            return createScriptingDisabledDocument(\"html\", contentType, string);\n          }\n\n        case \"text/xml\":\n        case \"application/xml\":\n        case \"application/xhtml+xml\":\n        case \"image/svg+xml\":\n          {\n            // TODO: use a strict XML parser (sax's strict mode might work?) and create parsererror elements\n            try {\n              return createScriptingDisabledDocument(\"xml\", contentType, string);\n            } catch (error) {\n              var document = createScriptingDisabledDocument(\"xml\", contentType);\n              var element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n              element.textContent = error.message;\n              document.appendChild(element);\n              return document;\n            }\n          }\n\n        default:\n          throw new TypeError(\"Invalid contentType\");\n      }\n    }\n  }]);\n\n  return DOMParserImpl;\n}();\n\nfunction createScriptingDisabledDocument(parsingMode, contentType, string) {\n  var document = Document.createImpl([], {\n    options: {\n      parsingMode: parsingMode,\n      encoding: \"UTF-8\",\n      contentType: contentType // TODO: somehow set URL to active document's URL\n\n    }\n  }); // \"scripting enabled\" set to false\n\n  applyDocumentFeatures(document, {\n    FetchExternalResources: [],\n    SkipExternalResources: false\n  });\n\n  if (string !== undefined) {\n    document._htmlToDom.appendToDocument(string, document);\n  }\n\n  document.close();\n  return document;\n}","map":null,"metadata":{},"sourceType":"script"}