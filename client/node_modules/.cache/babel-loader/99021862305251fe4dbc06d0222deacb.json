{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _draftJs = require(\"draft-js\");\n\nvar _ErrorBoundary = require(\"./ErrorBoundary\");\n\nvar _ErrorBoundary2 = _interopRequireDefault(_ErrorBoundary);\n\nvar _MediaWrapper = require(\"./MediaWrapper\");\n\nvar _MediaWrapper2 = _interopRequireDefault(_MediaWrapper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\n * Copyright (c) 2016, Globo.com (https://github.com/globocom)\n *\n * License: MIT\n */\n\n\nvar Media = function (_Component) {\n  _inherits(Media, _Component);\n\n  function Media(props) {\n    _classCallCheck(this, Media);\n\n    var _this = _possibleConstructorReturn(this, (Media.__proto__ || Object.getPrototypeOf(Media)).call(this, props));\n\n    _this.remove = _this.remove.bind(_this);\n    _this.updateData = _this.updateData.bind(_this);\n    _this.onChange = _this.props.blockProps.onChange;\n    return _this;\n  }\n\n  _createClass(Media, [{\n    key: \"remove\",\n    value: function remove() {\n      var editorState = this.props.blockProps.getEditorState();\n      var selection = editorState.getSelection();\n      var content = editorState.getCurrentContent();\n      var keyAfter = content.getKeyAfter(this.props.block.key);\n      var blockMap = content.getBlockMap().delete(this.props.block.key);\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n\n      var newState = _draftJs.EditorState.push(editorState, withoutAtomicBlock, \"remove-range\"); // if this is not the last block\n\n\n      if (keyAfter) {\n        var newSelection = new _draftJs.SelectionState({\n          anchorKey: keyAfter,\n          anchorOffset: 0,\n          focusKey: keyAfter,\n          focusOffset: this.props.block.getLength()\n        });\n\n        var newEditorState = _draftJs.EditorState.forceSelection(newState, newSelection);\n\n        this.onChange(newEditorState);\n      } else {\n        this.onChange(newState);\n      }\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData(data) {\n      var editorState = this.props.blockProps.getEditorState();\n      var content = editorState.getCurrentContent();\n      var selection = new _draftJs.SelectionState({\n        anchorKey: this.props.block.key,\n        anchorOffset: 0,\n        focusKey: this.props.block.key,\n        focusOffset: this.props.block.getLength()\n      });\n\n      var newContentState = _draftJs.Modifier.mergeBlockData(content, selection, data);\n\n      var newEditorState = _draftJs.EditorState.push(editorState, newContentState, \"change-block-data\");\n\n      this.onChange(newEditorState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Should we use immutables?\n      var data = this.props.block.getData().toJS();\n      var _props$blockProps = this.props.blockProps,\n          plugin = _props$blockProps.plugin,\n          setInitialReadOnly = _props$blockProps.setInitialReadOnly,\n          setReadOnly = _props$blockProps.setReadOnly,\n          i18n = _props$blockProps.i18n;\n      var Block = plugin.blockComponent;\n      return _react2.default.createElement(_ErrorBoundary2.default, _extends({}, this.props, {\n        i18n: i18n,\n        data: data,\n        container: this\n      }), _react2.default.createElement(_MediaWrapper2.default, {\n        i18n: i18n,\n        setInitialReadOnly: setInitialReadOnly,\n        setReadOnly: setReadOnly\n      }, _react2.default.createElement(Block, {\n        i18n: i18n,\n        data: data,\n        container: this,\n        blockProps: this.props.blockProps\n      })));\n    }\n  }]);\n\n  return Media;\n}(_react.Component);\n\nexports.default = Media;","map":null,"metadata":{},"sourceType":"script"}