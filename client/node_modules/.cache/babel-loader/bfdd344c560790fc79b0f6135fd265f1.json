{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _immutable = require(\"immutable\");\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _draftJs = require(\"draft-js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * Copyright (c) 2016, Globo.com (https://github.com/globocom)\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @typechecks\n * \n */\n\n\nvar List = _immutable2.default.List,\n    Map = _immutable2.default.Map;\n\nfunction insertDataBlock(editorState, data) {\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n\n  var afterRemoval = _draftJs.Modifier.removeRange(contentState, selectionState, \"backward\");\n\n  var targetSelection = afterRemoval.getSelectionAfter();\n\n  var afterSplit = _draftJs.Modifier.splitBlock(afterRemoval, targetSelection);\n\n  var insertionTarget = afterSplit.getSelectionAfter();\n\n  var asAtomicBlock = _draftJs.Modifier.setBlockType(afterSplit, insertionTarget, \"atomic\");\n\n  var block = new _draftJs.ContentBlock({\n    key: (0, _draftJs.genKey)(),\n    type: \"atomic\",\n    text: \"\",\n    characterList: List(),\n    data: new Map(data)\n  });\n  var fragmentArray = [block, new _draftJs.ContentBlock({\n    key: (0, _draftJs.genKey)(),\n    type: \"unstyled\",\n    text: \"\",\n    characterList: List()\n  })];\n\n  var fragment = _draftJs.BlockMapBuilder.createFromArray(fragmentArray);\n\n  var withAtomicBlock = _draftJs.Modifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n\n  var newContent = withAtomicBlock.merge({\n    selectionBefore: selectionState,\n    selectionAfter: withAtomicBlock.getSelectionAfter().set(\"hasFocus\", true)\n  });\n  return _draftJs.EditorState.push(editorState, newContent, \"insert-fragment\");\n}\n\nexports.default = insertDataBlock;","map":null,"metadata":{},"sourceType":"script"}