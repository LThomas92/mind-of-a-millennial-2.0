{"ast":null,"code":"\"use strict\"; // https://infra.spec.whatwg.org/#sets\n//\n// Only use this class if a Set cannot be used, e.g. when \"replace\" operation is needed, since there's no way to replace\n// an element while keep the relative order using a Set, only remove and then add something at the end.\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function OrderedSet() {\n    _classCallCheck(this, OrderedSet);\n\n    this._items = [];\n  }\n\n  _createClass(OrderedSet, [{\n    key: \"append\",\n    value: function append(item) {\n      if (!this.contains(item)) {\n        this._items.push(item);\n      }\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend(item) {\n      if (!this.contains(item)) {\n        this._items.unshift(item);\n      }\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(item, replacement) {\n      var seen = false;\n\n      for (var i = 0; i < this._items.length;) {\n        var isInstance = this._items[i] === item || this._items[i] === replacement;\n\n        if (seen && isInstance) {\n          this._items.splice(i, 1);\n        } else {\n          if (isInstance) {\n            this._items[i] = replacement;\n            seen = true;\n          }\n\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n\n      this.removePredicate(function (item) {\n        return items.includes(item);\n      });\n    }\n  }, {\n    key: \"removePredicate\",\n    value: function removePredicate(predicate) {\n      for (var i = 0; i < this._items.length;) {\n        if (predicate(this._items[i])) {\n          this._items.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      this._items.length = 0;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(item) {\n      return this._items.includes(item);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._items.length === 0;\n    } // Useful for other parts of jsdom\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this._items[Symbol.iterator]();\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._items.keys();\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._items[index];\n    }\n  }, {\n    key: \"some\",\n    value: function some(func) {\n      return this._items.some(func);\n    } // https://dom.spec.whatwg.org/#concept-ordered-set-parser\n\n  }, {\n    key: \"serialize\",\n    // https://dom.spec.whatwg.org/#concept-ordered-set-serializer\n    value: function serialize() {\n      return this._items.join(\" \");\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._items.length;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(input) {\n      var tokens = new OrderedSet();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = input.split(/[\\t\\n\\f\\r ]+/)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var token = _step.value;\n\n          if (token) {\n            tokens.append(token);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }]);\n\n  return OrderedSet;\n}();","map":null,"metadata":{},"sourceType":"script"}