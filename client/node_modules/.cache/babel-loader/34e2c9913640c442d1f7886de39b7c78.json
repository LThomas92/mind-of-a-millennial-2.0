{"ast":null,"code":"\"use strict\";\n\nvar whatwgEncoding = require(\"whatwg-encoding\"); // https://html.spec.whatwg.org/#encoding-sniffing-algorithm\n\n\nmodule.exports = function sniffHTMLEncoding(buffer, options) {\n  var encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  if (encoding === null && options.transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(options.transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null && options.defaultEncoding !== undefined) {\n    encoding = options.defaultEncoding;\n  }\n\n  if (encoding === null) {\n    encoding = \"windows-1252\";\n  }\n\n  return encoding;\n}; // https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\n\n\nfunction prescanMetaCharset(buffer) {\n  var l = Math.min(buffer.length, 1024);\n\n  for (var i = 0; i < l; i++) {\n    var c = buffer[i];\n\n    if (c === 0x3C) {\n      // \"<\"\n      var c1 = buffer[i + 1];\n      var c2 = buffer[i + 2];\n      var c3 = buffer[i + 3];\n      var c4 = buffer[i + 4];\n      var c5 = buffer[i + 5]; // !-- (comment start)\n\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n\n        for (; i < l; i++) {\n          c = buffer[i];\n          c1 = buffer[i + 1];\n          c2 = buffer[i + 2]; // --> (comment end)\n\n          if (c === 0x2D && c1 === 0x2D && c2 === 0x3E) {\n            i += 2;\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) && (c2 === 0x45 || c2 === 0x65) && (c3 === 0x54 || c3 === 0x74) && (c4 === 0x41 || c4 === 0x61) && (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        var gotPragma = false;\n        var needPragma = null;\n        var charset = null;\n        var attrRes = void 0;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n\n          if (attrRes.attr) {\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if (c1 >= 0x41 && c1 <= 0x5A || c1 >= 0x61 && c1 <= 0x7A) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // space or >\n\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n\n        var _attrRes = void 0;\n\n        do {\n          _attrRes = getAttribute(buffer, i, l);\n          i = _attrRes.i;\n        } while (_attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // >\n\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n} // https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\n\n\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    var c = buffer[i]; // space or /\n\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    } // \">\"\n\n\n    if (c === 0x3E) {\n      i++;\n      break;\n    }\n\n    var name = \"\";\n    var value = \"\";\n\n    nameLoop: for (; i < l; i++) {\n      c = buffer[i]; // \"=\"\n\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      } // space\n\n\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i]; // space\n\n          if (isSpaceCharacter(c)) {\n            continue;\n          } // not \"=\"\n\n\n          if (c !== 0x3D) {\n            return {\n              attr: {\n                name: name,\n                value: value\n              },\n              i: i\n            };\n          }\n\n          i++;\n          break nameLoop;\n        }\n\n        break;\n      } // / or >\n\n\n      if (c === 0x2F || c === 0x3E) {\n        return {\n          attr: {\n            name: name,\n            value: value\n          },\n          i: i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n\n    c = buffer[i]; // space\n\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i]; // space\n\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    } // \" or '\n\n\n    if (c === 0x22 || c === 0x27) {\n      var quote = c;\n\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return {\n            attr: {\n              name: name,\n              value: value\n            },\n            i: i\n          };\n        } // A-Z\n\n\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    } // >\n\n\n    if (c === 0x3E) {\n      return {\n        attr: {\n          name: name,\n          value: value\n        },\n        i: i\n      };\n    } // A-Z\n\n\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i]; // space or >\n\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return {\n          attr: {\n            name: name,\n            value: value\n          },\n          i: i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n\n  return {\n    i: i\n  };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  var position = 0;\n\n  while (true) {\n    var subPosition = string.substring(position).search(/charset/i);\n\n    if (subPosition === -1) {\n      return null;\n    }\n\n    subPosition += \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    var nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    } // It is an unmatched quotation mark\n\n\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  var end = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n\n  if (end === -1) {\n    end = string.length;\n  }\n\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}","map":null,"metadata":{},"sourceType":"script"}