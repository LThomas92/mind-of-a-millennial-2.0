{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _draftJs = require(\"draft-js\");\n\nvar _immutable = require(\"immutable\");\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _Toolbar = require(\"./Toolbar\");\n\nvar _Toolbar2 = _interopRequireDefault(_Toolbar);\n\nvar _Sidebar = require(\"./Sidebar\");\n\nvar _Sidebar2 = _interopRequireDefault(_Sidebar);\n\nvar _Media = require(\"./Media\");\n\nvar _Media2 = _interopRequireDefault(_Media);\n\nvar _i18n = require(\"../i18n\");\n\nvar _i18n2 = _interopRequireDefault(_i18n);\n\nvar _plugin = require(\"../plugins/not-found/plugin\");\n\nvar _plugin2 = _interopRequireDefault(_plugin);\n\nvar _default = require(\"../plugins/default\");\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _default3 = require(\"../actions/default\");\n\nvar _default4 = _interopRequireDefault(_default3);\n\nvar _default5 = require(\"../entity_inputs/default\");\n\nvar _default6 = _interopRequireDefault(_default5);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\n * Copyright (c) 2016, Globo.com (https://github.com/globocom)\n *\n * License: MIT\n */\n// i18n shim! I feel bad for doing this =(\n// https://github.com/megawac/async/blob/d2dd36b4558f483682f3c672630fdcb36a96d4d2/lib/async.js#L16\n\n\n((typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) === \"object\" && self.self === self && self || (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) === \"object\" && global.global === global && global || undefined).__ = function (x) {\n  console.warn(\"__() has been deprecated and will be removed soon. \" + \"You can move this code to your app, instead. __() code can be found at \" + \"https://gist.github.com/marcelometal/768454831c0c10ee03b939187b7bebbf\");\n  return x;\n};\n\nvar NO_RESET_STYLE_DEFAULT = [\"ordered-list-item\", \"unordered-list-item\"];\nvar MegadraftEditor = (_temp = _class = function (_Component) {\n  _inherits(MegadraftEditor, _Component);\n\n  function MegadraftEditor(props) {\n    _classCallCheck(this, MegadraftEditor);\n\n    var _this = _possibleConstructorReturn(this, (MegadraftEditor.__proto__ || Object.getPrototypeOf(MegadraftEditor)).call(this, props));\n\n    _this.getEditorState = function () {\n      return _this.props.editorState;\n    };\n\n    _this.state = {\n      readOnly: _this.props.readOnly || false,\n      hasFocus: false\n    };\n    _this.onChange = _this.onChange.bind(_this);\n    _this.onTab = _this.onTab.bind(_this);\n    _this.mediaBlockRenderer = _this.mediaBlockRenderer.bind(_this);\n    _this.handleKeyCommand = _this.handleKeyCommand.bind(_this);\n    _this.handleReturn = _this.handleReturn.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    _this.setReadOnly = _this.setReadOnly.bind(_this);\n    _this.getReadOnly = _this.getReadOnly.bind(_this);\n    _this.getInitialReadOnly = _this.getInitialReadOnly.bind(_this);\n    _this.setInitialReadOnly = _this.setInitialReadOnly.bind(_this);\n    _this.externalKeyBindings = _this.externalKeyBindings.bind(_this);\n    _this.plugins = _this.getValidPlugins();\n    _this.entityInputs = _this.props.entityInputs || _default6.default;\n    _this.blocksWithoutStyleReset = _this.props.blocksWithoutStyleReset || NO_RESET_STYLE_DEFAULT;\n    _this.pluginsByType = _this.getPluginsByType();\n    _this.keyBindings = _this.props.keyBindings || [];\n    return _this;\n  }\n\n  _createClass(MegadraftEditor, [{\n    key: \"getValidPlugins\",\n    value: function getValidPlugins() {\n      var plugins = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (this.props.plugins || _default2.default)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var plugin = _step.value;\n\n          if (!plugin || typeof plugin.type !== \"string\") {\n            console.warn(\"Plugin: Missing `type` field. Details: \", plugin);\n            continue;\n          }\n\n          plugins.push(plugin);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return plugins;\n    }\n  }, {\n    key: \"getPluginsByType\",\n    value: function getPluginsByType() {\n      var pluginsByType = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.plugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var plugin = _step2.value;\n          pluginsByType[plugin.type] = plugin;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return pluginsByType;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.readOnly !== nextProps.readOnly) {\n        this.setState({\n          readOnly: nextProps.readOnly\n        });\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(editorState) {\n      this.props.onChange(editorState);\n    }\n  }, {\n    key: \"externalKeyBindings\",\n    value: function externalKeyBindings(e) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.keyBindings[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var kb = _step3.value;\n\n          if (kb.isKeyBound(e)) {\n            return kb.name;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return (0, _draftJs.getDefaultKeyBinding)(e);\n    }\n  }, {\n    key: \"onTab\",\n    value: function onTab(event) {\n      if (this.props.onTab) {\n        this.props.onTab(event);\n      }\n    }\n  }, {\n    key: \"handleKeyCommand\",\n    value: function handleKeyCommand(command) {\n      // external key bindings\n      if (this.keyBindings.length) {\n        var extKb = this.keyBindings.find(function (kb) {\n          return kb.name === command;\n        });\n\n        if (extKb) {\n          extKb.action();\n          return true;\n        }\n      }\n\n      var editorState = this.props.editorState;\n\n      var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.props.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n    /*\n     * Copyright (c) 2016 Icelab\n     *\n     * License: MIT\n     */\n    //Based on https://github.com/icelab/draft-js-block-breakout-plugin\n\n  }, {\n    key: \"resetBlockStyle\",\n    value: function resetBlockStyle(editorState, selection, contentState, currentBlock, blockType) {\n      var List = _immutable2.default.List;\n      var emptyBlockKey = (0, _draftJs.genKey)();\n      var emptyBlock = new _draftJs.ContentBlock({\n        key: emptyBlockKey,\n        text: \"\",\n        type: blockType,\n        depth: 0,\n        characterList: List(),\n        inlineStyleRanges: []\n      });\n      var blockMap = contentState.getBlockMap();\n      var blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n        return v === currentBlock;\n      });\n      var blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n        return v === currentBlock;\n      }).rest();\n      var augmentedBlocks = [[currentBlock.getKey(), currentBlock], [emptyBlockKey, emptyBlock]];\n      var focusKey = emptyBlockKey;\n      var newBlocks = blocksBefore.concat(augmentedBlocks, blocksAfter).toOrderedMap();\n      var newContentState = contentState.merge({\n        blockMap: newBlocks,\n        selectionBefore: selection,\n        selectionAfter: selection.merge({\n          anchorKey: focusKey,\n          anchorOffset: 0,\n          focusKey: focusKey,\n          focusOffset: 0,\n          isBackward: false\n        })\n      });\n\n      var noStyle = _immutable2.default.OrderedSet([]);\n\n      var resetState = _draftJs.EditorState.push(editorState, newContentState, \"split-block\");\n\n      var emptySelection = _draftJs.SelectionState.createEmpty(emptyBlockKey);\n\n      var editorSelected = _draftJs.EditorState.forceSelection(resetState, emptySelection);\n\n      var noStyleState = _draftJs.EditorState.setInlineStyleOverride(editorSelected, noStyle);\n\n      this.props.onChange(noStyleState);\n    }\n  }, {\n    key: \"handleReturn\",\n    value: function handleReturn(event) {\n      if (this.props.softNewLines === false) {\n        return false;\n      }\n\n      if (!event.shiftKey) {\n        var _editorState = this.props.editorState;\n\n        var selection = _editorState.getSelection();\n\n        var contentState = _editorState.getCurrentContent();\n\n        var currentBlock = contentState.getBlockForKey(selection.getEndKey());\n        var endOffset = selection.getEndOffset();\n        var atEndOfBlock = endOffset === currentBlock.getLength();\n        var resetStyleNewLine = this.props.resetStyleNewLine;\n        var noReset = this.blocksWithoutStyleReset.includes(currentBlock.type);\n\n        if (atEndOfBlock && resetStyleNewLine) {\n          var blockType = noReset ? currentBlock.type : \"unstyled\";\n          this.resetBlockStyle(_editorState, selection, contentState, currentBlock, blockType);\n          return true;\n        }\n\n        return false;\n      }\n\n      var editorState = this.props.editorState;\n      var currentContent = editorState.getCurrentContent();\n      var currentSelection = editorState.getSelection();\n      var contentBlock = currentContent.getBlockMap().get(currentSelection.getFocusKey());\n      var contentText = contentBlock.getText();\n\n      if (contentText.charAt(currentSelection.focusOffset - 1) == \"\\n\" || contentText.charAt(currentSelection.focusOffset) == \"\\n\") {\n        return false;\n      }\n\n      var newState = _draftJs.RichUtils.insertSoftNewline(editorState);\n\n      this.props.onChange(newState);\n      return true;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.draftEl.focus();\n    }\n  }, {\n    key: \"setReadOnly\",\n    value: function setReadOnly(readOnly) {\n      this.setState({\n        readOnly: readOnly\n      });\n    }\n  }, {\n    key: \"getReadOnly\",\n    value: function getReadOnly() {\n      return this.state.readOnly;\n    }\n  }, {\n    key: \"getInitialReadOnly\",\n    value: function getInitialReadOnly() {\n      return this.props.readOnly || false;\n    }\n  }, {\n    key: \"setInitialReadOnly\",\n    value: function setInitialReadOnly() {\n      var readOnly = this.props.readOnly || false;\n      this.setState({\n        readOnly: readOnly\n      });\n    }\n  }, {\n    key: \"handleBlockNotFound\",\n    value: function handleBlockNotFound(block) {\n      if (this.props.handleBlockNotFound) {\n        return this.props.handleBlockNotFound(block);\n      }\n\n      return _plugin2.default;\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      clearTimeout(this.blurTimeoutID);\n\n      if (!this.state.hasFocus) {\n        this.setState({\n          hasFocus: true\n        });\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this2 = this;\n\n      this.blurTimeoutID = setTimeout(function () {\n        if (_this2.state.hasFocus) {\n          _this2.setState({\n            hasFocus: false\n          });\n        }\n      }, 200);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.blurTimeoutID);\n    }\n  }, {\n    key: \"mediaBlockRenderer\",\n    value: function mediaBlockRenderer(block) {\n      var handled = this.props.blockRendererFn(block);\n\n      if (handled) {\n        return handled;\n      }\n\n      if (block.getType() !== \"atomic\") {\n        return null;\n      }\n\n      var type = block.getData().toObject().type;\n      var plugin = this.pluginsByType[type] || this.handleBlockNotFound(block);\n\n      if (!plugin) {\n        return null;\n      }\n\n      return {\n        component: _Media2.default,\n        editable: false,\n        props: {\n          i18n: this.props.i18n[this.props.language],\n          plugin: plugin,\n          onChange: this.onChange,\n          editorState: this.props.editorState,\n          getEditorState: this.getEditorState,\n          setReadOnly: this.setReadOnly,\n          getReadOnly: this.getReadOnly,\n          getInitialReadOnly: this.getInitialReadOnly,\n          setInitialReadOnly: this.setInitialReadOnly\n        }\n      };\n    }\n  }, {\n    key: \"blockStyleFn\",\n    value: function blockStyleFn(contentBlock) {\n      var type = contentBlock.getType();\n\n      if (type === \"unstyled\") {\n        return \"paragraph\";\n      }\n    }\n  }, {\n    key: \"renderSidebar\",\n    value: function renderSidebar(props) {\n      var sidebarRendererFn = this.props.sidebarRendererFn;\n\n      if (typeof sidebarRendererFn === \"function\") {\n        return sidebarRendererFn(props);\n      }\n\n      return _react2.default.createElement(_Sidebar2.default, props);\n    }\n  }, {\n    key: \"renderToolbar\",\n    value: function renderToolbar(props) {\n      var _props$Toolbar = this.props.Toolbar,\n          Toolbar = _props$Toolbar === undefined ? _Toolbar2.default : _props$Toolbar;\n      return _react2.default.createElement(Toolbar, props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var hideSidebarOnBlur = this.props.hideSidebarOnBlur || false;\n      var i18n = this.props.i18n[this.props.language];\n      return _react2.default.createElement(\"div\", {\n        className: \"megadraft\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"megadraft-editor\",\n        id: this.props.id || \"megadraft-editor\",\n        ref: function ref(el) {\n          _this3.editorEl = el;\n        },\n        onBlur: this.handleBlur,\n        onFocus: this.handleFocus\n      }, this.renderSidebar({\n        i18n: i18n,\n        plugins: this.plugins,\n        editorState: this.props.editorState,\n        readOnly: this.state.readOnly,\n        onChange: this.onChange,\n        maxSidebarButtons: this.props.maxSidebarButtons,\n        modalOptions: this.props.modalOptions,\n        editorHasFocus: this.state.hasFocus,\n        hideSidebarOnBlur: hideSidebarOnBlur\n      }), _react2.default.createElement(_draftJs.Editor, _extends({}, this.props, {\n        ref: function ref(el) {\n          _this3.draftEl = el;\n        },\n        readOnly: this.state.readOnly,\n        blockRendererFn: this.mediaBlockRenderer,\n        blockStyleFn: this.props.blockStyleFn || this.blockStyleFn,\n        onTab: this.onTab,\n        handleKeyCommand: this.handleKeyCommand,\n        handleReturn: this.props.handleReturn || this.handleReturn,\n        keyBindingFn: this.externalKeyBindings,\n        onChange: this.onChange\n      })), this.renderToolbar({\n        i18n: i18n,\n        editor: this.editorEl,\n        draft: this.draftEl,\n        editorState: this.props.editorState,\n        editorHasFocus: this.state.hasFocus,\n        readOnly: this.state.readOnly,\n        onChange: this.onChange,\n        actions: this.props.actions,\n        entityInputs: this.entityInputs,\n        shouldDisplayToolbarFn: this.props.shouldDisplayToolbarFn\n      })));\n    }\n  }]);\n\n  return MegadraftEditor;\n}(_react.Component), _class.defaultProps = {\n  actions: _default4.default,\n  blockRendererFn: function blockRendererFn() {},\n  i18n: _i18n2.default,\n  language: \"en-US\"\n}, _temp);\nexports.default = MegadraftEditor;","map":null,"metadata":{},"sourceType":"script"}