{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../node\"),\n    convertNodesIntoNode = _require.convertNodesIntoNode;\n\nvar ChildNodeImpl =\n/*#__PURE__*/\nfunction () {\n  function ChildNodeImpl() {\n    _classCallCheck(this, ChildNodeImpl);\n  }\n\n  _createClass(ChildNodeImpl, [{\n    key: \"remove\",\n    value: function remove() {\n      if (!this.parentNode) {\n        return;\n      }\n\n      this.parentNode.removeChild(this);\n    }\n  }, {\n    key: \"after\",\n    value: function after() {\n      var parent = this.parentNode;\n\n      if (parent) {\n        var viableNextSibling = this.nextSibling;\n\n        for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n          nodes[_key] = arguments[_key];\n        }\n\n        var idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n        while (idx !== -1) {\n          viableNextSibling = viableNextSibling.nextSibling;\n\n          if (!viableNextSibling) {\n            break;\n          }\n\n          idx = nodes.indexOf(viableNextSibling);\n        }\n\n        parent.insertBefore(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);\n      }\n    }\n  }, {\n    key: \"before\",\n    value: function before() {\n      var parent = this.parentNode;\n\n      if (parent) {\n        var viablePreviousSibling = this.previousSibling;\n\n        for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          nodes[_key2] = arguments[_key2];\n        }\n\n        var idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;\n\n        while (idx !== -1) {\n          viablePreviousSibling = viablePreviousSibling.previousSibling;\n\n          if (!viablePreviousSibling) {\n            break;\n          }\n\n          idx = nodes.indexOf(viablePreviousSibling);\n        }\n\n        parent.insertBefore(convertNodesIntoNode(this._ownerDocument, nodes), viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild);\n      }\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith() {\n      var parent = this.parentNode;\n\n      if (parent) {\n        var viableNextSibling = this.nextSibling;\n\n        for (var _len3 = arguments.length, nodes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          nodes[_key3] = arguments[_key3];\n        }\n\n        var idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n        while (idx !== -1) {\n          viableNextSibling = viableNextSibling.nextSibling;\n\n          if (!viableNextSibling) {\n            break;\n          }\n\n          idx = nodes.indexOf(viableNextSibling);\n        }\n\n        var node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n        if (this.parentNode === parent) {\n          parent.replaceChild(node, this);\n        } else {\n          parent.insertBefore(node, viableNextSibling);\n        }\n      }\n    }\n  }]);\n\n  return ChildNodeImpl;\n}();\n\nmodule.exports = {\n  implementation: ChildNodeImpl\n};","map":null,"metadata":{},"sourceType":"script"}