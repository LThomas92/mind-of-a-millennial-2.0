{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/traversal\"),\n    closest = _require.closest;\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    isDisabled = _require2.isDisabled,\n    isSubmittable = _require2.isSubmittable,\n    isButton = _require2.isButton,\n    normalizeToCRLF = _require2.normalizeToCRLF;\n\nvar Blob = require(\"../generated/Blob.js\");\n\nvar File = require(\"../generated/File.js\");\n\nvar conversions = require(\"webidl-conversions\");\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function FormDataImpl(args) {\n    _classCallCheck(this, FormDataImpl);\n\n    this._entries = [];\n\n    if (args[0] !== undefined) {\n      this._entries = constructTheFormDataSet(args[0]);\n    }\n  }\n\n  _createClass(FormDataImpl, [{\n    key: \"append\",\n    value: function append(name, value, filename) {\n      var entry = createAnEntry(name, value, filename);\n\n      this._entries.push(entry);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      this._entries = this._entries.filter(function (entry) {\n        return entry.name !== name;\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var foundEntry = this._entries.find(function (entry) {\n        return entry.name === name;\n      });\n\n      return foundEntry !== undefined ? foundEntry.value : null;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      return this._entries.filter(function (entry) {\n        return entry.name === name;\n      }).map(function (entry) {\n        return entry.value;\n      });\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._entries.findIndex(function (entry) {\n        return entry.name === name;\n      }) !== -1;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value, filename) {\n      var entry = createAnEntry(name, value, filename);\n\n      var foundIndex = this._entries.findIndex(function (e) {\n        return e.name === name;\n      });\n\n      if (foundIndex !== -1) {\n        this._entries[foundIndex] = entry;\n        this._entries = this._entries.filter(function (e, i) {\n          return e.name !== name || i === foundIndex;\n        });\n      } else {\n        this._entries.push(entry);\n      }\n    }\n  }, {\n    key: Symbol.iterator,\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function value() {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _iteratorError = undefined;\n              _context.prev = 3;\n              _iterator = this._entries[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                _context.next = 12;\n                break;\n              }\n\n              entry = _step.value;\n              _context.next = 9;\n              return [entry.name, idlUtils.tryWrapperForImpl(entry.value)];\n\n            case 9:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 12:\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 18:\n              _context.prev = 18;\n              _context.prev = 19;\n\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n\n            case 21:\n              _context.prev = 21;\n\n              if (!_didIteratorError) {\n                _context.next = 24;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 24:\n              return _context.finish(21);\n\n            case 25:\n              return _context.finish(18);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n    })\n  }]);\n\n  return FormDataImpl;\n}();\n\nfunction createAnEntry(name, value, filename) {\n  var entry = {\n    name: name\n  }; // https://github.com/whatwg/xhr/issues/75\n\n  if (Blob.isImpl(value) && !File.isImpl(value)) {\n    var oldValue = value;\n    value = File.createImpl([[], \"blob\", {\n      type: oldValue.type\n    }]); // \"representing the same bytes\"\n\n    value._buffer = oldValue._buffer;\n  }\n\n  if (File.isImpl(value) && filename !== undefined) {\n    var _oldValue = value;\n    value = File.createImpl([[], filename, // spec makes no mention of `lastModified`; assume it is inherited\n    // (Chrome's behavior)\n    {\n      type: _oldValue.type,\n      lastModified: _oldValue.lastModified\n    }]); // \"representing the same bytes\"\n\n    value._buffer = _oldValue._buffer;\n  }\n\n  entry.value = value;\n  return entry;\n}\n\nfunction constructTheFormDataSet(form, submitter) {\n  // https://html.spec.whatwg.org/multipage/forms.html#constructing-form-data-set\n  var controls = form.elements.filter(isSubmittable); // submittable is a subset of listed\n\n  var formDataSet = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = controls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var fieldWrapper = _step2.value;\n      var field = fieldWrapper;\n\n      if (closest(field, \"datalist\") !== null) {\n        continue;\n      }\n\n      if (isDisabled(field)) {\n        continue;\n      }\n\n      if (isButton(field) && field !== submitter) {\n        continue;\n      }\n\n      if (field.type === \"checkbox\" && field._checkedness === false) {\n        continue;\n      }\n\n      if (field.type === \"radio\" && field._checkedness === false) {\n        continue;\n      }\n\n      if (field.type !== \"image\" && (!field.hasAttribute(\"name\") || field.getAttribute(\"name\") === \"\")) {\n        continue;\n      }\n\n      if (field.localName === \"object\") {\n        // in jsdom, no objects are \"using a plugin\"\n        continue;\n      }\n\n      var type = field.type; // Omit special processing of <input type=\"image\"> since so far we don't actually ever pass submitter\n\n      var nameAttr = field.getAttribute(\"name\");\n      var name = nameAttr === null ? \"\" : nameAttr;\n\n      if (field.localName === \"select\") {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = field.options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var option = _step3.value;\n\n            if (option._selectedness === true && !isDisabled(field)) {\n              formDataSet.push({\n                name: name,\n                value: option.value,\n                type: type\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      } else if (field.localName === \"input\" && (type === \"checkbox\" || type === \"radio\")) {\n        var _value = field.hasAttribute(\"value\") ? field.getAttribute(\"value\") : \"on\";\n\n        formDataSet.push({\n          name: name,\n          value: _value,\n          type: type\n        });\n      } else if (type === \"file\") {\n        for (var i = 0; i < field.files.length; ++i) {\n          formDataSet.push({\n            name: name,\n            value: field.files.item(i),\n            type: type\n          });\n        }\n\n        if (field.files.length === 0) {\n          formDataSet.push({\n            name: name,\n            value: \"\",\n            type: \"application/octet-stream\"\n          });\n        }\n      }\n      /* skip plugins */\n      else {\n          formDataSet.push({\n            name: name,\n            value: field._getValue(),\n            type: type\n          });\n        }\n\n      var dirname = field.getAttribute(\"dirname\");\n\n      if (dirname !== null && dirname !== \"\") {\n        var dir = \"ltr\"; // jsdom does not (yet?) implement actual directionality\n\n        formDataSet.push({\n          name: dirname,\n          value: dir,\n          type: \"direction\"\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  for (var _i = 0, _formDataSet = formDataSet; _i < _formDataSet.length; _i++) {\n    var entry = _formDataSet[_i];\n    entry.name = conversions.USVString(normalizeToCRLF(entry.name));\n\n    if (entry.type !== \"file\" && entry.type !== \"textarea\") {\n      entry.value = normalizeToCRLF(entry.value);\n    }\n\n    if (entry.type !== \"file\") {\n      entry.value = conversions.USVString(entry.value);\n    }\n  }\n\n  return formDataSet;\n}","map":null,"metadata":{},"sourceType":"script"}