{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar _require = require(\"../helpers/document-base-url.js\"),\n    documentBaseURLSerialized = _require.documentBaseURLSerialized,\n    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord; // https://html.spec.whatwg.org/#history-3\n\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function HistoryImpl(args, privateData) {\n    _classCallCheck(this, HistoryImpl);\n\n    this._window = privateData.window;\n    this._document = privateData.document;\n    this._actAsIfLocationReloadCalled = privateData.actAsIfLocationReloadCalled;\n    this._state = null;\n  }\n\n  _createClass(HistoryImpl, [{\n    key: \"_guardAgainstInactiveDocuments\",\n    value: function _guardAgainstInactiveDocuments() {\n      if (!this._window) {\n        throw new DOMException(\"History object is associated with a document that is not fully active.\", \"SecurityError\");\n      }\n    }\n  }, {\n    key: \"go\",\n    value: function go(delta) {\n      this._guardAgainstInactiveDocuments();\n\n      if (delta === 0) {\n        // When the go(delta) method is invoked, if delta is zero, the user agent must act as\n        // if the location.reload() method was called instead.\n        this._actAsIfLocationReloadCalled();\n      } else {\n        // Otherwise, the user agent must traverse the history by a delta whose value is delta\n        this._window._sessionHistory.traverseByDelta(delta);\n      }\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.go(-1);\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      this.go(+1);\n    }\n  }, {\n    key: \"pushState\",\n    value: function pushState(data, title, url) {\n      this._sharedPushAndReplaceState(data, title, url, \"pushState\");\n    }\n  }, {\n    key: \"replaceState\",\n    value: function replaceState(data, title, url) {\n      this._sharedPushAndReplaceState(data, title, url, \"replaceState\");\n    } // https://html.spec.whatwg.org/#dom-history-pushstate\n\n  }, {\n    key: \"_sharedPushAndReplaceState\",\n    value: function _sharedPushAndReplaceState(data, title, url, methodName) {\n      this._guardAgainstInactiveDocuments(); // TODO structured clone data\n\n\n      var newURL;\n\n      if (url !== null) {\n        // Not implemented: use of entry settings object's API base URL. Instead we just use the document base URL. The\n        // difference matters in the case of cross-frame calls.\n        newURL = parseURLToResultingURLRecord(url, this._document);\n\n        if (newURL === null) {\n          throw new DOMException(\"Could not parse url argument \\\"\".concat(url, \"\\\" to \").concat(methodName, \" \") + \"against base URL \\\"\".concat(documentBaseURLSerialized(this._document), \"\\\".\"), \"SecurityError\");\n        }\n\n        if (newURL.scheme !== this._document._URL.scheme || newURL.username !== this._document._URL.username || newURL.password !== this._document._URL.password || newURL.host !== this._document._URL.host || newURL.port !== this._document._URL.port || newURL.cannotBeABaseURL !== this._document._URL.cannotBeABaseURL) {\n          throw new DOMException(\"\".concat(methodName, \" cannot update history to a URL which \") + \"differs in components other than in path, query, or fragment.\", \"SecurityError\");\n        } // Not implemented: origin check (seems to only apply to documents with weird origins, e.g. sandboxed ones)\n\n      } else {\n        newURL = this._window._sessionHistory.currentEntry.url;\n      }\n\n      if (methodName === \"pushState\") {\n        this._window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n\n        this._window._sessionHistory.clearHistoryTraversalTasks();\n\n        var newEntry = {\n          document: this._document,\n          stateObject: data,\n          title: title,\n          url: newURL\n        };\n\n        this._window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n\n        this._window._sessionHistory.updateCurrentEntry(newEntry);\n      } else {\n        var currentEntry = this._window._sessionHistory.currentEntry;\n        currentEntry.stateObject = data;\n        currentEntry.title = title;\n        currentEntry.url = newURL;\n      } // TODO: If the current entry in the session history represents a non-GET request\n      // (e.g. it was the result of a POST submission) then update it to instead represent\n      // a GET request.\n\n\n      this._document._URL = newURL; // arguably it's a bit odd that the state and latestEntry do not belong to the SessionHistory\n      // but the spec gives them to \"History\" and \"Document\" respecively.\n\n      this._state = data; // TODO clone again!! O_o\n\n      this._document._latestEntry = this._window._sessionHistory.currentEntry;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._guardAgainstInactiveDocuments();\n\n      return this._window._sessionHistory.length;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      this._guardAgainstInactiveDocuments();\n\n      return this._state;\n    }\n  }]);\n\n  return HistoryImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}