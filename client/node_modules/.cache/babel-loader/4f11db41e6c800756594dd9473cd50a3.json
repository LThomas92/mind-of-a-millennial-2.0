{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/Lawrence/Desktop/mind-of-a-millennial/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar notImplemented = require(\"../../browser/not-implemented\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../../utils\"),\n    Canvas = _require.Canvas;\n\nvar HTMLCanvasElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLCanvasElementImpl, _HTMLElementImpl);\n\n  function HTMLCanvasElementImpl() {\n    _classCallCheck(this, HTMLCanvasElementImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLCanvasElementImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLCanvasElementImpl, [{\n    key: \"_attrModified\",\n    value: function _attrModified(name, value) {\n      if (this._canvas && (name === \"width\" || name === \"height\")) {\n        this._canvas[name] = parseInt(value);\n      }\n\n      return _get(_getPrototypeOf(HTMLCanvasElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_getCanvas\",\n    value: function _getCanvas() {\n      if (Canvas && !this._canvas) {\n        this._canvas = new Canvas(this.width, this.height);\n      }\n\n      return this._canvas;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(contextId) {\n      var canvas = this._getCanvas();\n\n      if (canvas) {\n        if (!this._context) {\n          this._context = canvas.getContext(contextId) || null;\n\n          if (this._context) {\n            // Override the native canvas reference with our wrapper. This is the\n            // reason why we need to locally cache _context, since each call to\n            // canvas.getContext(contextId) would replace this reference again.\n            // Perhaps in the longer term, a better solution would be to create a\n            // full wrapper for the Context object as well.\n            this._context.canvas = idlUtils.wrapperForImpl(this);\n            wrapNodeCanvasMethod(this._context, \"createPattern\");\n            wrapNodeCanvasMethod(this._context, \"drawImage\");\n          }\n        }\n\n        return this._context;\n      }\n\n      notImplemented(\"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n      return null;\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() {\n      var canvas = this._getCanvas();\n\n      if (canvas) {\n        return canvas.toDataURL.apply(this._canvas, arguments);\n      }\n\n      notImplemented(\"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n      return null;\n    }\n  }, {\n    key: \"toBlob\",\n    value: function toBlob(callback, type, qualityArgument) {\n      var window = this._ownerDocument._defaultView;\n\n      var canvas = this._getCanvas();\n\n      if (canvas) {\n        var stream;\n\n        switch (type) {\n          case \"image/jpg\":\n          case \"image/jpeg\":\n            stream = canvas.createJPEGStream({\n              quality: Math.max(0, Math.min(1, qualityArgument)) * 100\n            });\n            break;\n\n          default:\n            // TODO: Patch node-canvas to receive qualityArgument for PNG stream\n            type = \"image/png\";\n            stream = canvas.createPNGStream();\n        }\n\n        var buffers = [];\n        stream.on(\"data\", function (chunk) {\n          buffers.push(chunk);\n        });\n        stream.on(\"end\", function () {\n          callback(new window.Blob(buffers, {\n            type: type\n          }));\n        });\n      } else {\n        notImplemented(\"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\", window);\n      }\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      var parsed = parseInt(this.getAttribute(\"width\"));\n      return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n    },\n    set: function set(v) {\n      v = v > 2147483647 ? 300 : v;\n      this.setAttribute(\"width\", String(v));\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      var parsed = parseInt(this.getAttribute(\"height\"));\n      return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n    },\n    set: function set(v) {\n      v = v > 2147483647 ? 150 : v;\n      this.setAttribute(\"height\", String(v));\n    }\n  }]);\n\n  return HTMLCanvasElementImpl;\n}(HTMLElementImpl); // We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\n\n\nfunction wrapNodeCanvasMethod(ctx, name) {\n  var prev = ctx[name];\n\n  ctx[name] = function (image) {\n    var impl = idlUtils.implForWrapper(image);\n\n    if (impl) {\n      arguments[0] = impl._image || impl._canvas;\n    }\n\n    return prev.apply(ctx, arguments);\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}